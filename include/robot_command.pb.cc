// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: robot_command.proto

#include "robot_command.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace rocos {
constexpr SingleAxisEnabled::SingleAxisEnabled(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(0){}
struct SingleAxisEnabledDefaultTypeInternal {
  constexpr SingleAxisEnabledDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SingleAxisEnabledDefaultTypeInternal() {}
  union {
    SingleAxisEnabled _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SingleAxisEnabledDefaultTypeInternal _SingleAxisEnabled_default_instance_;
constexpr SingleAxisDisabled::SingleAxisDisabled(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(0){}
struct SingleAxisDisabledDefaultTypeInternal {
  constexpr SingleAxisDisabledDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SingleAxisDisabledDefaultTypeInternal() {}
  union {
    SingleAxisDisabled _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SingleAxisDisabledDefaultTypeInternal _SingleAxisDisabled_default_instance_;
constexpr SingleAxisMode::SingleAxisMode(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(0)
  , value_(0)
{}
struct SingleAxisModeDefaultTypeInternal {
  constexpr SingleAxisModeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SingleAxisModeDefaultTypeInternal() {}
  union {
    SingleAxisMode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SingleAxisModeDefaultTypeInternal _SingleAxisMode_default_instance_;
constexpr SingleAxisMove::SingleAxisMove(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pos_(0)
  , max_vel_(0)
  , max_acc_(0)
  , id_(0)
  , raw_data_(false)
  , max_jerk_(0)
  , least_time_(0){}
struct SingleAxisMoveDefaultTypeInternal {
  constexpr SingleAxisMoveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SingleAxisMoveDefaultTypeInternal() {}
  union {
    SingleAxisMove _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SingleAxisMoveDefaultTypeInternal _SingleAxisMove_default_instance_;
constexpr SingleAxisStop::SingleAxisStop(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(0){}
struct SingleAxisStopDefaultTypeInternal {
  constexpr SingleAxisStopDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SingleAxisStopDefaultTypeInternal() {}
  union {
    SingleAxisStop _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SingleAxisStopDefaultTypeInternal _SingleAxisStop_default_instance_;
constexpr SingleAxisCommand::SingleAxisCommand(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct SingleAxisCommandDefaultTypeInternal {
  constexpr SingleAxisCommandDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SingleAxisCommandDefaultTypeInternal() {}
  union {
    SingleAxisCommand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SingleAxisCommandDefaultTypeInternal _SingleAxisCommand_default_instance_;
constexpr MultiAxisEnabled::MultiAxisEnabled(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct MultiAxisEnabledDefaultTypeInternal {
  constexpr MultiAxisEnabledDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MultiAxisEnabledDefaultTypeInternal() {}
  union {
    MultiAxisEnabled _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MultiAxisEnabledDefaultTypeInternal _MultiAxisEnabled_default_instance_;
constexpr MultiAxisDisabled::MultiAxisDisabled(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct MultiAxisDisabledDefaultTypeInternal {
  constexpr MultiAxisDisabledDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MultiAxisDisabledDefaultTypeInternal() {}
  union {
    MultiAxisDisabled _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MultiAxisDisabledDefaultTypeInternal _MultiAxisDisabled_default_instance_;
constexpr MultiAxisMode::MultiAxisMode(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_()
  , _value_cached_byte_size_(0){}
struct MultiAxisModeDefaultTypeInternal {
  constexpr MultiAxisModeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MultiAxisModeDefaultTypeInternal() {}
  union {
    MultiAxisMode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MultiAxisModeDefaultTypeInternal _MultiAxisMode_default_instance_;
constexpr MultiAxisSync::MultiAxisSync(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(0)
{}
struct MultiAxisSyncDefaultTypeInternal {
  constexpr MultiAxisSyncDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MultiAxisSyncDefaultTypeInternal() {}
  union {
    MultiAxisSync _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MultiAxisSyncDefaultTypeInternal _MultiAxisSync_default_instance_;
constexpr MultiAxisMove::MultiAxisMove(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : target_pos_()
  , max_vel_()
  , max_acc_()
  , max_jerk_()
  , least_time_(0)
  , raw_data_(false)
  , sync_(0)
{}
struct MultiAxisMoveDefaultTypeInternal {
  constexpr MultiAxisMoveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MultiAxisMoveDefaultTypeInternal() {}
  union {
    MultiAxisMove _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MultiAxisMoveDefaultTypeInternal _MultiAxisMove_default_instance_;
constexpr MultiAxisStop::MultiAxisStop(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct MultiAxisStopDefaultTypeInternal {
  constexpr MultiAxisStopDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MultiAxisStopDefaultTypeInternal() {}
  union {
    MultiAxisStop _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MultiAxisStopDefaultTypeInternal _MultiAxisStop_default_instance_;
constexpr MultiAxisCommand::MultiAxisCommand(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct MultiAxisCommandDefaultTypeInternal {
  constexpr MultiAxisCommandDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MultiAxisCommandDefaultTypeInternal() {}
  union {
    MultiAxisCommand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MultiAxisCommandDefaultTypeInternal _MultiAxisCommand_default_instance_;
constexpr Enabled::Enabled(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : target_pos_()
  , target_vel_(){}
struct EnabledDefaultTypeInternal {
  constexpr EnabledDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EnabledDefaultTypeInternal() {}
  union {
    Enabled _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EnabledDefaultTypeInternal _Enabled_default_instance_;
constexpr Disabled::Disabled(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct DisabledDefaultTypeInternal {
  constexpr DisabledDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DisabledDefaultTypeInternal() {}
  union {
    Disabled _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DisabledDefaultTypeInternal _Disabled_default_instance_;
constexpr ZeroOffset::ZeroOffset(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(){}
struct ZeroOffsetDefaultTypeInternal {
  constexpr ZeroOffsetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ZeroOffsetDefaultTypeInternal() {}
  union {
    ZeroOffset _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ZeroOffsetDefaultTypeInternal _ZeroOffset_default_instance_;
constexpr CntPerUnit::CntPerUnit(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(){}
struct CntPerUnitDefaultTypeInternal {
  constexpr CntPerUnitDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CntPerUnitDefaultTypeInternal() {}
  union {
    CntPerUnit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CntPerUnitDefaultTypeInternal _CntPerUnit_default_instance_;
constexpr MoveJ::MoveJ(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : q_(nullptr)
  , speed_(0)
  , acceleration_(0)
  , time_(0)
  , radius_(0)
  , asynchronous_(false){}
struct MoveJDefaultTypeInternal {
  constexpr MoveJDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MoveJDefaultTypeInternal() {}
  union {
    MoveJ _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MoveJDefaultTypeInternal _MoveJ_default_instance_;
constexpr MoveJ_IK::MoveJ_IK(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pose_(nullptr)
  , speed_(0)
  , acceleration_(0)
  , time_(0)
  , radius_(0)
  , asynchronous_(false){}
struct MoveJ_IKDefaultTypeInternal {
  constexpr MoveJ_IKDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MoveJ_IKDefaultTypeInternal() {}
  union {
    MoveJ_IK _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MoveJ_IKDefaultTypeInternal _MoveJ_IK_default_instance_;
constexpr MoveL::MoveL(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pose_(nullptr)
  , speed_(0)
  , acceleration_(0)
  , time_(0)
  , radius_(0)
  , asynchronous_(false){}
struct MoveLDefaultTypeInternal {
  constexpr MoveLDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MoveLDefaultTypeInternal() {}
  union {
    MoveL _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MoveLDefaultTypeInternal _MoveL_default_instance_;
constexpr MoveL_FK::MoveL_FK(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : q_(nullptr)
  , speed_(0)
  , acceleration_(0)
  , time_(0)
  , radius_(0)
  , asynchronous_(false){}
struct MoveL_FKDefaultTypeInternal {
  constexpr MoveL_FKDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MoveL_FKDefaultTypeInternal() {}
  union {
    MoveL_FK _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MoveL_FKDefaultTypeInternal _MoveL_FK_default_instance_;
constexpr MoveC::MoveC(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pose_via_(nullptr)
  , pose_to_(nullptr)
  , speed_(0)
  , acceleration_(0)
  , time_(0)
  , radius_(0)
  , mode_(0)

  , asynchronous_(false){}
struct MoveCDefaultTypeInternal {
  constexpr MoveCDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MoveCDefaultTypeInternal() {}
  union {
    MoveC _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MoveCDefaultTypeInternal _MoveC_default_instance_;
constexpr MoveP::MoveP(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pose_(nullptr)
  , speed_(0)
  , acceleration_(0)
  , time_(0)
  , radius_(0)
  , asynchronous_(false){}
struct MovePDefaultTypeInternal {
  constexpr MovePDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MovePDefaultTypeInternal() {}
  union {
    MoveP _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MovePDefaultTypeInternal _MoveP_default_instance_;
constexpr Path_PathEntry::Path_PathEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_(0)

  , _oneof_case_{}{}
struct Path_PathEntryDefaultTypeInternal {
  constexpr Path_PathEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Path_PathEntryDefaultTypeInternal() {}
  union {
    Path_PathEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Path_PathEntryDefaultTypeInternal _Path_PathEntry_default_instance_;
constexpr Path::Path(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : waypoints_(){}
struct PathDefaultTypeInternal {
  constexpr PathDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PathDefaultTypeInternal() {}
  union {
    Path _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PathDefaultTypeInternal _Path_default_instance_;
constexpr MovePath::MovePath(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : path_(nullptr)
  , asynchronous_(false){}
struct MovePathDefaultTypeInternal {
  constexpr MovePathDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MovePathDefaultTypeInternal() {}
  union {
    MovePath _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MovePathDefaultTypeInternal _MovePath_default_instance_;
constexpr MotionCommand::MotionCommand(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct MotionCommandDefaultTypeInternal {
  constexpr MotionCommandDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MotionCommandDefaultTypeInternal() {}
  union {
    MotionCommand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MotionCommandDefaultTypeInternal _MotionCommand_default_instance_;
constexpr DraggingCommand::DraggingCommand(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : flag_(0)

  , dir_(0)

  , max_speed_(0)
  , max_acceleration_(0){}
struct DraggingCommandDefaultTypeInternal {
  constexpr DraggingCommandDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DraggingCommandDefaultTypeInternal() {}
  union {
    DraggingCommand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DraggingCommandDefaultTypeInternal _DraggingCommand_default_instance_;
constexpr RobotCommand::RobotCommand(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct RobotCommandDefaultTypeInternal {
  constexpr RobotCommandDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RobotCommandDefaultTypeInternal() {}
  union {
    RobotCommand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RobotCommandDefaultTypeInternal _RobotCommand_default_instance_;
constexpr RobotCommandRequest::RobotCommandRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_(nullptr)
  , command_(nullptr){}
struct RobotCommandRequestDefaultTypeInternal {
  constexpr RobotCommandRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RobotCommandRequestDefaultTypeInternal() {}
  union {
    RobotCommandRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RobotCommandRequestDefaultTypeInternal _RobotCommandRequest_default_instance_;
constexpr RobotCommandResponse::RobotCommandResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_(nullptr){}
struct RobotCommandResponseDefaultTypeInternal {
  constexpr RobotCommandResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RobotCommandResponseDefaultTypeInternal() {}
  union {
    RobotCommandResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RobotCommandResponseDefaultTypeInternal _RobotCommandResponse_default_instance_;
}  // namespace rocos
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_robot_5fcommand_2eproto[31];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_robot_5fcommand_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_robot_5fcommand_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_robot_5fcommand_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rocos::SingleAxisEnabled, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rocos::SingleAxisEnabled, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rocos::SingleAxisDisabled, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rocos::SingleAxisDisabled, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rocos::SingleAxisMode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rocos::SingleAxisMode, id_),
  PROTOBUF_FIELD_OFFSET(::rocos::SingleAxisMode, value_),
  PROTOBUF_FIELD_OFFSET(::rocos::SingleAxisMove, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rocos::SingleAxisMove, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rocos::SingleAxisMove, id_),
  PROTOBUF_FIELD_OFFSET(::rocos::SingleAxisMove, pos_),
  PROTOBUF_FIELD_OFFSET(::rocos::SingleAxisMove, max_vel_),
  PROTOBUF_FIELD_OFFSET(::rocos::SingleAxisMove, max_acc_),
  PROTOBUF_FIELD_OFFSET(::rocos::SingleAxisMove, max_jerk_),
  PROTOBUF_FIELD_OFFSET(::rocos::SingleAxisMove, least_time_),
  PROTOBUF_FIELD_OFFSET(::rocos::SingleAxisMove, raw_data_),
  ~0u,
  ~0u,
  0,
  1,
  3,
  4,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rocos::SingleAxisStop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rocos::SingleAxisStop, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rocos::SingleAxisCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::rocos::SingleAxisCommand, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::rocos::SingleAxisCommand, command_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rocos::MultiAxisEnabled, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rocos::MultiAxisDisabled, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rocos::MultiAxisMode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rocos::MultiAxisMode, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rocos::MultiAxisSync, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rocos::MultiAxisSync, value_),
  PROTOBUF_FIELD_OFFSET(::rocos::MultiAxisMove, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rocos::MultiAxisMove, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rocos::MultiAxisMove, target_pos_),
  PROTOBUF_FIELD_OFFSET(::rocos::MultiAxisMove, max_vel_),
  PROTOBUF_FIELD_OFFSET(::rocos::MultiAxisMove, max_acc_),
  PROTOBUF_FIELD_OFFSET(::rocos::MultiAxisMove, max_jerk_),
  PROTOBUF_FIELD_OFFSET(::rocos::MultiAxisMove, least_time_),
  PROTOBUF_FIELD_OFFSET(::rocos::MultiAxisMove, raw_data_),
  PROTOBUF_FIELD_OFFSET(::rocos::MultiAxisMove, sync_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rocos::MultiAxisStop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rocos::MultiAxisCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::rocos::MultiAxisCommand, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::rocos::MultiAxisCommand, command_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rocos::Enabled, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rocos::Enabled, target_pos_),
  PROTOBUF_FIELD_OFFSET(::rocos::Enabled, target_vel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rocos::Disabled, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rocos::ZeroOffset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rocos::ZeroOffset, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rocos::CntPerUnit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rocos::CntPerUnit, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rocos::MoveJ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rocos::MoveJ, q_),
  PROTOBUF_FIELD_OFFSET(::rocos::MoveJ, speed_),
  PROTOBUF_FIELD_OFFSET(::rocos::MoveJ, acceleration_),
  PROTOBUF_FIELD_OFFSET(::rocos::MoveJ, time_),
  PROTOBUF_FIELD_OFFSET(::rocos::MoveJ, radius_),
  PROTOBUF_FIELD_OFFSET(::rocos::MoveJ, asynchronous_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rocos::MoveJ_IK, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rocos::MoveJ_IK, pose_),
  PROTOBUF_FIELD_OFFSET(::rocos::MoveJ_IK, speed_),
  PROTOBUF_FIELD_OFFSET(::rocos::MoveJ_IK, acceleration_),
  PROTOBUF_FIELD_OFFSET(::rocos::MoveJ_IK, time_),
  PROTOBUF_FIELD_OFFSET(::rocos::MoveJ_IK, radius_),
  PROTOBUF_FIELD_OFFSET(::rocos::MoveJ_IK, asynchronous_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rocos::MoveL, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rocos::MoveL, pose_),
  PROTOBUF_FIELD_OFFSET(::rocos::MoveL, speed_),
  PROTOBUF_FIELD_OFFSET(::rocos::MoveL, acceleration_),
  PROTOBUF_FIELD_OFFSET(::rocos::MoveL, time_),
  PROTOBUF_FIELD_OFFSET(::rocos::MoveL, radius_),
  PROTOBUF_FIELD_OFFSET(::rocos::MoveL, asynchronous_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rocos::MoveL_FK, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rocos::MoveL_FK, q_),
  PROTOBUF_FIELD_OFFSET(::rocos::MoveL_FK, speed_),
  PROTOBUF_FIELD_OFFSET(::rocos::MoveL_FK, acceleration_),
  PROTOBUF_FIELD_OFFSET(::rocos::MoveL_FK, time_),
  PROTOBUF_FIELD_OFFSET(::rocos::MoveL_FK, radius_),
  PROTOBUF_FIELD_OFFSET(::rocos::MoveL_FK, asynchronous_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rocos::MoveC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rocos::MoveC, pose_via_),
  PROTOBUF_FIELD_OFFSET(::rocos::MoveC, pose_to_),
  PROTOBUF_FIELD_OFFSET(::rocos::MoveC, speed_),
  PROTOBUF_FIELD_OFFSET(::rocos::MoveC, acceleration_),
  PROTOBUF_FIELD_OFFSET(::rocos::MoveC, time_),
  PROTOBUF_FIELD_OFFSET(::rocos::MoveC, radius_),
  PROTOBUF_FIELD_OFFSET(::rocos::MoveC, mode_),
  PROTOBUF_FIELD_OFFSET(::rocos::MoveC, asynchronous_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rocos::MoveP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rocos::MoveP, pose_),
  PROTOBUF_FIELD_OFFSET(::rocos::MoveP, speed_),
  PROTOBUF_FIELD_OFFSET(::rocos::MoveP, acceleration_),
  PROTOBUF_FIELD_OFFSET(::rocos::MoveP, time_),
  PROTOBUF_FIELD_OFFSET(::rocos::MoveP, radius_),
  PROTOBUF_FIELD_OFFSET(::rocos::MoveP, asynchronous_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rocos::Path_PathEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::rocos::Path_PathEntry, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rocos::Path_PathEntry, type_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::rocos::Path_PathEntry, param_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rocos::Path, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rocos::Path, waypoints_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rocos::MovePath, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rocos::MovePath, path_),
  PROTOBUF_FIELD_OFFSET(::rocos::MovePath, asynchronous_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rocos::MotionCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::rocos::MotionCommand, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::rocos::MotionCommand, command_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rocos::DraggingCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rocos::DraggingCommand, flag_),
  PROTOBUF_FIELD_OFFSET(::rocos::DraggingCommand, dir_),
  PROTOBUF_FIELD_OFFSET(::rocos::DraggingCommand, max_speed_),
  PROTOBUF_FIELD_OFFSET(::rocos::DraggingCommand, max_acceleration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rocos::RobotCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::rocos::RobotCommand, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::rocos::RobotCommand, command_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rocos::RobotCommandRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rocos::RobotCommandRequest, header_),
  PROTOBUF_FIELD_OFFSET(::rocos::RobotCommandRequest, command_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rocos::RobotCommandResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rocos::RobotCommandResponse, header_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::rocos::SingleAxisEnabled)},
  { 6, -1, sizeof(::rocos::SingleAxisDisabled)},
  { 12, -1, sizeof(::rocos::SingleAxisMode)},
  { 19, 31, sizeof(::rocos::SingleAxisMove)},
  { 38, -1, sizeof(::rocos::SingleAxisStop)},
  { 44, -1, sizeof(::rocos::SingleAxisCommand)},
  { 55, -1, sizeof(::rocos::MultiAxisEnabled)},
  { 60, -1, sizeof(::rocos::MultiAxisDisabled)},
  { 65, -1, sizeof(::rocos::MultiAxisMode)},
  { 71, -1, sizeof(::rocos::MultiAxisSync)},
  { 77, 89, sizeof(::rocos::MultiAxisMove)},
  { 96, -1, sizeof(::rocos::MultiAxisStop)},
  { 101, -1, sizeof(::rocos::MultiAxisCommand)},
  { 113, -1, sizeof(::rocos::Enabled)},
  { 120, -1, sizeof(::rocos::Disabled)},
  { 125, -1, sizeof(::rocos::ZeroOffset)},
  { 131, -1, sizeof(::rocos::CntPerUnit)},
  { 137, -1, sizeof(::rocos::MoveJ)},
  { 148, -1, sizeof(::rocos::MoveJ_IK)},
  { 159, -1, sizeof(::rocos::MoveL)},
  { 170, -1, sizeof(::rocos::MoveL_FK)},
  { 181, -1, sizeof(::rocos::MoveC)},
  { 194, -1, sizeof(::rocos::MoveP)},
  { 205, -1, sizeof(::rocos::Path_PathEntry)},
  { 214, -1, sizeof(::rocos::Path)},
  { 220, -1, sizeof(::rocos::MovePath)},
  { 227, -1, sizeof(::rocos::MotionCommand)},
  { 240, -1, sizeof(::rocos::DraggingCommand)},
  { 249, -1, sizeof(::rocos::RobotCommand)},
  { 262, -1, sizeof(::rocos::RobotCommandRequest)},
  { 269, -1, sizeof(::rocos::RobotCommandResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rocos::_SingleAxisEnabled_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rocos::_SingleAxisDisabled_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rocos::_SingleAxisMode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rocos::_SingleAxisMove_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rocos::_SingleAxisStop_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rocos::_SingleAxisCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rocos::_MultiAxisEnabled_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rocos::_MultiAxisDisabled_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rocos::_MultiAxisMode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rocos::_MultiAxisSync_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rocos::_MultiAxisMove_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rocos::_MultiAxisStop_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rocos::_MultiAxisCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rocos::_Enabled_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rocos::_Disabled_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rocos::_ZeroOffset_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rocos::_CntPerUnit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rocos::_MoveJ_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rocos::_MoveJ_IK_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rocos::_MoveL_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rocos::_MoveL_FK_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rocos::_MoveC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rocos::_MoveP_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rocos::_Path_PathEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rocos::_Path_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rocos::_MovePath_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rocos::_MotionCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rocos::_DraggingCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rocos::_RobotCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rocos::_RobotCommandRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rocos::_RobotCommandResponse_default_instance_),
};

const char descriptor_table_protodef_robot_5fcommand_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023robot_command.proto\022\005rocos\032\014header.pro"
  "to\032\016geometry.proto\032\036google/protobuf/wrap"
  "pers.proto\"\037\n\021SingleAxisEnabled\022\n\n\002id\030\001 "
  "\001(\005\" \n\022SingleAxisDisabled\022\n\n\002id\030\001 \001(\005\"8\n"
  "\016SingleAxisMode\022\n\n\002id\030\001 \001(\005\022\032\n\005value\030\002 \001"
  "(\0162\013.rocos.Mode\"\335\001\n\016SingleAxisMove\022\n\n\002id"
  "\030\001 \001(\005\022\013\n\003pos\030\002 \001(\001\022\024\n\007max_vel\030\003 \001(\001H\000\210\001"
  "\001\022\024\n\007max_acc\030\004 \001(\001H\001\210\001\001\022\025\n\010max_jerk\030\005 \001("
  "\001H\002\210\001\001\022\027\n\nleast_time\030\006 \001(\001H\003\210\001\001\022\025\n\010raw_d"
  "ata\030\007 \001(\010H\004\210\001\001B\n\n\010_max_velB\n\n\010_max_accB\013"
  "\n\t_max_jerkB\r\n\013_least_timeB\013\n\t_raw_data\""
  "\034\n\016SingleAxisStop\022\n\n\002id\030\001 \001(\005\"\357\001\n\021Single"
  "AxisCommand\022+\n\007enabled\030\001 \001(\0132\030.rocos.Sin"
  "gleAxisEnabledH\000\022-\n\010disabled\030\002 \001(\0132\031.roc"
  "os.SingleAxisDisabledH\000\022%\n\004mode\030\003 \001(\0132\025."
  "rocos.SingleAxisModeH\000\022%\n\004move\030\004 \001(\0132\025.r"
  "ocos.SingleAxisMoveH\000\022%\n\004stop\030\005 \001(\0132\025.ro"
  "cos.SingleAxisStopH\000B\t\n\007command\"\022\n\020Multi"
  "AxisEnabled\"\023\n\021MultiAxisDisabled\"+\n\rMult"
  "iAxisMode\022\032\n\005value\030\001 \003(\0162\013.rocos.Mode\"6\n"
  "\rMultiAxisSync\022%\n\005value\030\001 \001(\0162\026.rocos.Sy"
  "nchronization\"\327\001\n\rMultiAxisMove\022\022\n\ntarge"
  "t_pos\030\001 \003(\001\022\017\n\007max_vel\030\003 \003(\001\022\017\n\007max_acc\030"
  "\004 \003(\001\022\020\n\010max_jerk\030\005 \003(\001\022\027\n\nleast_time\030\006 "
  "\001(\001H\000\210\001\001\022\025\n\010raw_data\030\007 \001(\010H\001\210\001\001\022)\n\004sync\030"
  "\010 \001(\0162\026.rocos.SynchronizationH\002\210\001\001B\r\n\013_l"
  "east_timeB\013\n\t_raw_dataB\007\n\005_sync\"\017\n\rMulti"
  "AxisStop\"\217\002\n\020MultiAxisCommand\022*\n\007enabled"
  "\030\001 \001(\0132\027.rocos.MultiAxisEnabledH\000\022,\n\010dis"
  "abled\030\002 \001(\0132\030.rocos.MultiAxisDisabledH\000\022"
  "$\n\004mode\030\003 \001(\0132\024.rocos.MultiAxisModeH\000\022$\n"
  "\004sync\030\004 \001(\0132\024.rocos.MultiAxisSyncH\000\022$\n\004m"
  "ove\030\005 \001(\0132\024.rocos.MultiAxisMoveH\000\022$\n\004sto"
  "p\030\006 \001(\0132\024.rocos.MultiAxisStopH\000B\t\n\007comma"
  "nd\"1\n\007Enabled\022\022\n\ntarget_pos\030\001 \003(\001\022\022\n\ntar"
  "get_vel\030\002 \003(\001\"\n\n\010Disabled\"8\n\nZeroOffset\022"
  "*\n\005value\030\001 \003(\0132\033.google.protobuf.Int32Va"
  "lue\"9\n\nCntPerUnit\022+\n\005value\030\001 \003(\0132\034.googl"
  "e.protobuf.DoubleValue\"~\n\005MoveJ\022\034\n\001q\030\001 \001"
  "(\0132\021.rocos.JointArray\022\r\n\005speed\030\002 \001(\001\022\024\n\014"
  "acceleration\030\003 \001(\001\022\014\n\004time\030\004 \001(\001\022\016\n\006radi"
  "us\030\005 \001(\001\022\024\n\014asynchronous\030\006 \001(\010\"\201\001\n\010MoveJ"
  "_IK\022\034\n\004pose\030\001 \001(\0132\016.rocos.SE3Pose\022\r\n\005spe"
  "ed\030\002 \001(\001\022\024\n\014acceleration\030\003 \001(\001\022\014\n\004time\030\004"
  " \001(\001\022\016\n\006radius\030\005 \001(\001\022\024\n\014asynchronous\030\006 \001"
  "(\010\"~\n\005MoveL\022\034\n\004pose\030\001 \001(\0132\016.rocos.SE3Pos"
  "e\022\r\n\005speed\030\002 \001(\001\022\024\n\014acceleration\030\003 \001(\001\022\014"
  "\n\004time\030\004 \001(\001\022\016\n\006radius\030\005 \001(\001\022\024\n\014asynchro"
  "nous\030\006 \001(\010\"\201\001\n\010MoveL_FK\022\034\n\001q\030\001 \001(\0132\021.roc"
  "os.JointArray\022\r\n\005speed\030\002 \001(\001\022\024\n\014accelera"
  "tion\030\003 \001(\001\022\014\n\004time\030\004 \001(\001\022\016\n\006radius\030\005 \001(\001"
  "\022\024\n\014asynchronous\030\006 \001(\010\"\200\002\n\005MoveC\022 \n\010pose"
  "_via\030\001 \001(\0132\016.rocos.SE3Pose\022\037\n\007pose_to\030\002 "
  "\001(\0132\016.rocos.SE3Pose\022\r\n\005speed\030\003 \001(\001\022\024\n\014ac"
  "celeration\030\004 \001(\001\022\014\n\004time\030\005 \001(\001\022\016\n\006radius"
  "\030\006 \001(\001\022*\n\004mode\030\007 \001(\0162\034.rocos.MoveC.Orien"
  "tationMode\022\024\n\014asynchronous\030\010 \001(\010\"/\n\017Orie"
  "ntationMode\022\021\n\rUNCONSTRAINED\020\000\022\t\n\005FIXED\020"
  "\001\"~\n\005MoveP\022\034\n\004pose\030\001 \001(\0132\016.rocos.SE3Pose"
  "\022\r\n\005speed\030\002 \001(\001\022\024\n\014acceleration\030\003 \001(\001\022\014\n"
  "\004time\030\004 \001(\001\022\016\n\006radius\030\005 \001(\001\022\024\n\014asynchron"
  "ous\030\006 \001(\010\"\361\001\n\004Path\022(\n\twaypoints\030\001 \003(\0132\025."
  "rocos.Path.PathEntry\032\276\001\n\tPathEntry\022,\n\004ty"
  "pe\030\001 \001(\0162\036.rocos.Path.PathEntry.MoveType"
  "\022\036\n\001q\030\002 \001(\0132\021.rocos.JointArrayH\000\022\036\n\004pose"
  "\030\003 \001(\0132\016.rocos.SE3PoseH\000\":\n\010MoveType\022\n\n\006"
  "MOVE_J\020\000\022\n\n\006MOVE_L\020\001\022\n\n\006MOVE_P\020\002\022\n\n\006MOVE"
  "_C\020\003B\007\n\005param\";\n\010MovePath\022\031\n\004path\030\001 \001(\0132"
  "\013.rocos.Path\022\024\n\014asynchronous\030\002 \001(\010\"\214\002\n\rM"
  "otionCommand\022\036\n\006move_j\030\001 \001(\0132\014.rocos.Mov"
  "eJH\000\022$\n\tmove_j_ik\030\002 \001(\0132\017.rocos.MoveJ_IK"
  "H\000\022\036\n\006move_l\030\003 \001(\0132\014.rocos.MoveLH\000\022$\n\tmo"
  "ve_l_fk\030\004 \001(\0132\017.rocos.MoveL_FKH\000\022\036\n\006move"
  "_c\030\005 \001(\0132\014.rocos.MoveCH\000\022\036\n\006move_p\030\006 \001(\013"
  "2\014.rocos.MovePH\000\022$\n\tmove_path\030\007 \001(\0132\017.ro"
  "cos.MovePathH\000B\t\n\007command\"\210\001\n\017DraggingCo"
  "mmand\022!\n\004flag\030\001 \001(\0162\023.rocos.DraggingFlag"
  "\022%\n\003dir\030\002 \001(\0162\030.rocos.DraggingDirection\022"
  "\021\n\tmax_speed\030\003 \001(\001\022\030\n\020max_acceleration\030\004"
  " \001(\001\"\325\002\n\014RobotCommand\022!\n\007enabled\030\001 \001(\0132\016"
  ".rocos.EnabledH\000\022#\n\010disabled\030\002 \001(\0132\017.roc"
  "os.DisabledH\000\022\036\n\006move_j\030\003 \001(\0132\014.rocos.Mo"
  "veJH\000\0227\n\023single_axis_command\030\004 \001(\0132\030.roc"
  "os.SingleAxisCommandH\000\0225\n\022multi_axis_com"
  "mand\030\005 \001(\0132\027.rocos.MultiAxisCommandH\000\022.\n"
  "\016motion_command\030\006 \001(\0132\024.rocos.MotionComm"
  "andH\000\0222\n\020dragging_command\030\007 \001(\0132\026.rocos."
  "DraggingCommandH\000B\t\n\007command\"a\n\023RobotCom"
  "mandRequest\022$\n\006header\030\001 \001(\0132\024.rocos.Requ"
  "estHeader\022$\n\007command\030\002 \001(\0132\023.rocos.Robot"
  "Command\"=\n\024RobotCommandResponse\022%\n\006heade"
  "r\030\001 \001(\0132\025.rocos.ResponseHeader*\?\n\017Synchr"
  "onization\022\r\n\tSYNC_NONE\020\000\022\r\n\tSYNC_TIME\020\001\022"
  "\016\n\nSYNC_PHASE\020\002*0\n\004Mode\022\014\n\010MODE_CSP\020\000\022\014\n"
  "\010MODE_CSV\020\001\022\014\n\010MODE_CST\020\002*\264\003\n\014DraggingFl"
  "ag\022\006\n\002J0\020\000\022\006\n\002J1\020\001\022\006\n\002J2\020\002\022\006\n\002J3\020\003\022\006\n\002J4"
  "\020\004\022\006\n\002J5\020\005\022\006\n\002J6\020\006\022\n\n\006TOOL_X\020d\022\n\n\006TOOL_Y"
  "\020e\022\n\n\006TOOL_Z\020f\022\r\n\tTOOL_ROLL\020g\022\016\n\nTOOL_PI"
  "TCH\020h\022\014\n\010TOOL_YAW\020i\022\r\n\010FLANGE_X\020\310\001\022\r\n\010FL"
  "ANGE_Y\020\311\001\022\r\n\010FLANGE_Z\020\312\001\022\020\n\013FLANGE_ROLL\020"
  "\313\001\022\021\n\014FLANGE_PITCH\020\314\001\022\017\n\nFLANGE_YAW\020\315\001\022\r"
  "\n\010OBJECT_X\020\254\002\022\r\n\010OBJECT_Y\020\255\002\022\r\n\010OBJECT_Z"
  "\020\256\002\022\020\n\013OBJECT_ROLL\020\257\002\022\021\n\014OBJECT_PITCH\020\260\002"
  "\022\017\n\nOBJECT_YAW\020\261\002\022\013\n\006BASE_X\020\220\003\022\013\n\006BASE_Y"
  "\020\221\003\022\013\n\006BASE_Z\020\222\003\022\016\n\tBASE_ROLL\020\223\003\022\017\n\nBASE"
  "_PITCH\020\224\003\022\r\n\010BASE_YAW\020\225\003*B\n\021DraggingDire"
  "ction\022\010\n\004NONE\020\000\022\014\n\010POSITIVE\020\001\022\025\n\010NEGATIV"
  "E\020\377\377\377\377\377\377\377\377\377\001B\021B\017RobotStateProtob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_robot_5fcommand_2eproto_deps[3] = {
  &::descriptor_table_geometry_2eproto,
  &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
  &::descriptor_table_header_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_robot_5fcommand_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_robot_5fcommand_2eproto = {
  false, false, 4319, descriptor_table_protodef_robot_5fcommand_2eproto, "robot_command.proto", 
  &descriptor_table_robot_5fcommand_2eproto_once, descriptor_table_robot_5fcommand_2eproto_deps, 3, 31,
  schemas, file_default_instances, TableStruct_robot_5fcommand_2eproto::offsets,
  file_level_metadata_robot_5fcommand_2eproto, file_level_enum_descriptors_robot_5fcommand_2eproto, file_level_service_descriptors_robot_5fcommand_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_robot_5fcommand_2eproto_getter() {
  return &descriptor_table_robot_5fcommand_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_robot_5fcommand_2eproto(&descriptor_table_robot_5fcommand_2eproto);
namespace rocos {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MoveC_OrientationMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_robot_5fcommand_2eproto);
  return file_level_enum_descriptors_robot_5fcommand_2eproto[0];
}
bool MoveC_OrientationMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MoveC_OrientationMode MoveC::UNCONSTRAINED;
constexpr MoveC_OrientationMode MoveC::FIXED;
constexpr MoveC_OrientationMode MoveC::OrientationMode_MIN;
constexpr MoveC_OrientationMode MoveC::OrientationMode_MAX;
constexpr int MoveC::OrientationMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Path_PathEntry_MoveType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_robot_5fcommand_2eproto);
  return file_level_enum_descriptors_robot_5fcommand_2eproto[1];
}
bool Path_PathEntry_MoveType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Path_PathEntry_MoveType Path_PathEntry::MOVE_J;
constexpr Path_PathEntry_MoveType Path_PathEntry::MOVE_L;
constexpr Path_PathEntry_MoveType Path_PathEntry::MOVE_P;
constexpr Path_PathEntry_MoveType Path_PathEntry::MOVE_C;
constexpr Path_PathEntry_MoveType Path_PathEntry::MoveType_MIN;
constexpr Path_PathEntry_MoveType Path_PathEntry::MoveType_MAX;
constexpr int Path_PathEntry::MoveType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Synchronization_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_robot_5fcommand_2eproto);
  return file_level_enum_descriptors_robot_5fcommand_2eproto[2];
}
bool Synchronization_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Mode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_robot_5fcommand_2eproto);
  return file_level_enum_descriptors_robot_5fcommand_2eproto[3];
}
bool Mode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DraggingFlag_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_robot_5fcommand_2eproto);
  return file_level_enum_descriptors_robot_5fcommand_2eproto[4];
}
bool DraggingFlag_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 200:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 300:
    case 301:
    case 302:
    case 303:
    case 304:
    case 305:
    case 400:
    case 401:
    case 402:
    case 403:
    case 404:
    case 405:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DraggingDirection_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_robot_5fcommand_2eproto);
  return file_level_enum_descriptors_robot_5fcommand_2eproto[5];
}
bool DraggingDirection_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class SingleAxisEnabled::_Internal {
 public:
};

SingleAxisEnabled::SingleAxisEnabled(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rocos.SingleAxisEnabled)
}
SingleAxisEnabled::SingleAxisEnabled(const SingleAxisEnabled& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:rocos.SingleAxisEnabled)
}

inline void SingleAxisEnabled::SharedCtor() {
id_ = 0;
}

SingleAxisEnabled::~SingleAxisEnabled() {
  // @@protoc_insertion_point(destructor:rocos.SingleAxisEnabled)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SingleAxisEnabled::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SingleAxisEnabled::ArenaDtor(void* object) {
  SingleAxisEnabled* _this = reinterpret_cast< SingleAxisEnabled* >(object);
  (void)_this;
}
void SingleAxisEnabled::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SingleAxisEnabled::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SingleAxisEnabled::Clear() {
// @@protoc_insertion_point(message_clear_start:rocos.SingleAxisEnabled)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SingleAxisEnabled::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SingleAxisEnabled::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocos.SingleAxisEnabled)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocos.SingleAxisEnabled)
  return target;
}

size_t SingleAxisEnabled::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocos.SingleAxisEnabled)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SingleAxisEnabled::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SingleAxisEnabled::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SingleAxisEnabled::GetClassData() const { return &_class_data_; }

void SingleAxisEnabled::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SingleAxisEnabled *>(to)->MergeFrom(
      static_cast<const SingleAxisEnabled &>(from));
}


void SingleAxisEnabled::MergeFrom(const SingleAxisEnabled& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rocos.SingleAxisEnabled)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SingleAxisEnabled::CopyFrom(const SingleAxisEnabled& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocos.SingleAxisEnabled)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleAxisEnabled::IsInitialized() const {
  return true;
}

void SingleAxisEnabled::InternalSwap(SingleAxisEnabled* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleAxisEnabled::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_robot_5fcommand_2eproto_getter, &descriptor_table_robot_5fcommand_2eproto_once,
      file_level_metadata_robot_5fcommand_2eproto[0]);
}

// ===================================================================

class SingleAxisDisabled::_Internal {
 public:
};

SingleAxisDisabled::SingleAxisDisabled(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rocos.SingleAxisDisabled)
}
SingleAxisDisabled::SingleAxisDisabled(const SingleAxisDisabled& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:rocos.SingleAxisDisabled)
}

inline void SingleAxisDisabled::SharedCtor() {
id_ = 0;
}

SingleAxisDisabled::~SingleAxisDisabled() {
  // @@protoc_insertion_point(destructor:rocos.SingleAxisDisabled)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SingleAxisDisabled::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SingleAxisDisabled::ArenaDtor(void* object) {
  SingleAxisDisabled* _this = reinterpret_cast< SingleAxisDisabled* >(object);
  (void)_this;
}
void SingleAxisDisabled::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SingleAxisDisabled::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SingleAxisDisabled::Clear() {
// @@protoc_insertion_point(message_clear_start:rocos.SingleAxisDisabled)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SingleAxisDisabled::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SingleAxisDisabled::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocos.SingleAxisDisabled)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocos.SingleAxisDisabled)
  return target;
}

size_t SingleAxisDisabled::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocos.SingleAxisDisabled)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SingleAxisDisabled::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SingleAxisDisabled::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SingleAxisDisabled::GetClassData() const { return &_class_data_; }

void SingleAxisDisabled::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SingleAxisDisabled *>(to)->MergeFrom(
      static_cast<const SingleAxisDisabled &>(from));
}


void SingleAxisDisabled::MergeFrom(const SingleAxisDisabled& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rocos.SingleAxisDisabled)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SingleAxisDisabled::CopyFrom(const SingleAxisDisabled& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocos.SingleAxisDisabled)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleAxisDisabled::IsInitialized() const {
  return true;
}

void SingleAxisDisabled::InternalSwap(SingleAxisDisabled* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleAxisDisabled::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_robot_5fcommand_2eproto_getter, &descriptor_table_robot_5fcommand_2eproto_once,
      file_level_metadata_robot_5fcommand_2eproto[1]);
}

// ===================================================================

class SingleAxisMode::_Internal {
 public:
};

SingleAxisMode::SingleAxisMode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rocos.SingleAxisMode)
}
SingleAxisMode::SingleAxisMode(const SingleAxisMode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&id_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:rocos.SingleAxisMode)
}

inline void SingleAxisMode::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&id_)) + sizeof(value_));
}

SingleAxisMode::~SingleAxisMode() {
  // @@protoc_insertion_point(destructor:rocos.SingleAxisMode)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SingleAxisMode::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SingleAxisMode::ArenaDtor(void* object) {
  SingleAxisMode* _this = reinterpret_cast< SingleAxisMode* >(object);
  (void)_this;
}
void SingleAxisMode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SingleAxisMode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SingleAxisMode::Clear() {
// @@protoc_insertion_point(message_clear_start:rocos.SingleAxisMode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&id_)) + sizeof(value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SingleAxisMode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .rocos.Mode value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_value(static_cast<::rocos::Mode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SingleAxisMode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocos.SingleAxisMode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // .rocos.Mode value = 2;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocos.SingleAxisMode)
  return target;
}

size_t SingleAxisMode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocos.SingleAxisMode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // .rocos.Mode value = 2;
  if (this->_internal_value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SingleAxisMode::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SingleAxisMode::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SingleAxisMode::GetClassData() const { return &_class_data_; }

void SingleAxisMode::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SingleAxisMode *>(to)->MergeFrom(
      static_cast<const SingleAxisMode &>(from));
}


void SingleAxisMode::MergeFrom(const SingleAxisMode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rocos.SingleAxisMode)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_value() != 0) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SingleAxisMode::CopyFrom(const SingleAxisMode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocos.SingleAxisMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleAxisMode::IsInitialized() const {
  return true;
}

void SingleAxisMode::InternalSwap(SingleAxisMode* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SingleAxisMode, value_)
      + sizeof(SingleAxisMode::value_)
      - PROTOBUF_FIELD_OFFSET(SingleAxisMode, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleAxisMode::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_robot_5fcommand_2eproto_getter, &descriptor_table_robot_5fcommand_2eproto_once,
      file_level_metadata_robot_5fcommand_2eproto[2]);
}

// ===================================================================

class SingleAxisMove::_Internal {
 public:
  using HasBits = decltype(std::declval<SingleAxisMove>()._has_bits_);
  static void set_has_max_vel(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max_acc(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_jerk(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_least_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_raw_data(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

SingleAxisMove::SingleAxisMove(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rocos.SingleAxisMove)
}
SingleAxisMove::SingleAxisMove(const SingleAxisMove& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&pos_, &from.pos_,
    static_cast<size_t>(reinterpret_cast<char*>(&least_time_) -
    reinterpret_cast<char*>(&pos_)) + sizeof(least_time_));
  // @@protoc_insertion_point(copy_constructor:rocos.SingleAxisMove)
}

inline void SingleAxisMove::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pos_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&least_time_) -
    reinterpret_cast<char*>(&pos_)) + sizeof(least_time_));
}

SingleAxisMove::~SingleAxisMove() {
  // @@protoc_insertion_point(destructor:rocos.SingleAxisMove)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SingleAxisMove::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SingleAxisMove::ArenaDtor(void* object) {
  SingleAxisMove* _this = reinterpret_cast< SingleAxisMove* >(object);
  (void)_this;
}
void SingleAxisMove::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SingleAxisMove::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SingleAxisMove::Clear() {
// @@protoc_insertion_point(message_clear_start:rocos.SingleAxisMove)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pos_ = 0;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&max_vel_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_acc_) -
        reinterpret_cast<char*>(&max_vel_)) + sizeof(max_acc_));
  }
  id_ = 0;
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&raw_data_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&least_time_) -
        reinterpret_cast<char*>(&raw_data_)) + sizeof(least_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SingleAxisMove::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          pos_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double max_vel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_max_vel(&has_bits);
          max_vel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double max_acc = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_max_acc(&has_bits);
          max_acc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double max_jerk = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_max_jerk(&has_bits);
          max_jerk_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double least_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_least_time(&has_bits);
          least_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool raw_data = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_raw_data(&has_bits);
          raw_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SingleAxisMove::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocos.SingleAxisMove)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // double pos = 2;
  if (!(this->_internal_pos() <= 0 && this->_internal_pos() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_pos(), target);
  }

  // optional double max_vel = 3;
  if (_internal_has_max_vel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_max_vel(), target);
  }

  // optional double max_acc = 4;
  if (_internal_has_max_acc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_max_acc(), target);
  }

  // optional double max_jerk = 5;
  if (_internal_has_max_jerk()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_max_jerk(), target);
  }

  // optional double least_time = 6;
  if (_internal_has_least_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_least_time(), target);
  }

  // optional bool raw_data = 7;
  if (_internal_has_raw_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_raw_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocos.SingleAxisMove)
  return target;
}

size_t SingleAxisMove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocos.SingleAxisMove)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double pos = 2;
  if (!(this->_internal_pos() <= 0 && this->_internal_pos() >= 0)) {
    total_size += 1 + 8;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double max_vel = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double max_acc = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (cached_has_bits & 0x0000001cu) {
    // optional bool raw_data = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional double max_jerk = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double least_time = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SingleAxisMove::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SingleAxisMove::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SingleAxisMove::GetClassData() const { return &_class_data_; }

void SingleAxisMove::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SingleAxisMove *>(to)->MergeFrom(
      static_cast<const SingleAxisMove &>(from));
}


void SingleAxisMove::MergeFrom(const SingleAxisMove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rocos.SingleAxisMove)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from._internal_pos() <= 0 && from._internal_pos() >= 0)) {
    _internal_set_pos(from._internal_pos());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      max_vel_ = from.max_vel_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_acc_ = from.max_acc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (cached_has_bits & 0x0000001cu) {
    if (cached_has_bits & 0x00000004u) {
      raw_data_ = from.raw_data_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_jerk_ = from.max_jerk_;
    }
    if (cached_has_bits & 0x00000010u) {
      least_time_ = from.least_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SingleAxisMove::CopyFrom(const SingleAxisMove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocos.SingleAxisMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleAxisMove::IsInitialized() const {
  return true;
}

void SingleAxisMove::InternalSwap(SingleAxisMove* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SingleAxisMove, least_time_)
      + sizeof(SingleAxisMove::least_time_)
      - PROTOBUF_FIELD_OFFSET(SingleAxisMove, pos_)>(
          reinterpret_cast<char*>(&pos_),
          reinterpret_cast<char*>(&other->pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleAxisMove::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_robot_5fcommand_2eproto_getter, &descriptor_table_robot_5fcommand_2eproto_once,
      file_level_metadata_robot_5fcommand_2eproto[3]);
}

// ===================================================================

class SingleAxisStop::_Internal {
 public:
};

SingleAxisStop::SingleAxisStop(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rocos.SingleAxisStop)
}
SingleAxisStop::SingleAxisStop(const SingleAxisStop& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:rocos.SingleAxisStop)
}

inline void SingleAxisStop::SharedCtor() {
id_ = 0;
}

SingleAxisStop::~SingleAxisStop() {
  // @@protoc_insertion_point(destructor:rocos.SingleAxisStop)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SingleAxisStop::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SingleAxisStop::ArenaDtor(void* object) {
  SingleAxisStop* _this = reinterpret_cast< SingleAxisStop* >(object);
  (void)_this;
}
void SingleAxisStop::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SingleAxisStop::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SingleAxisStop::Clear() {
// @@protoc_insertion_point(message_clear_start:rocos.SingleAxisStop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SingleAxisStop::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SingleAxisStop::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocos.SingleAxisStop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocos.SingleAxisStop)
  return target;
}

size_t SingleAxisStop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocos.SingleAxisStop)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SingleAxisStop::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SingleAxisStop::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SingleAxisStop::GetClassData() const { return &_class_data_; }

void SingleAxisStop::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SingleAxisStop *>(to)->MergeFrom(
      static_cast<const SingleAxisStop &>(from));
}


void SingleAxisStop::MergeFrom(const SingleAxisStop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rocos.SingleAxisStop)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SingleAxisStop::CopyFrom(const SingleAxisStop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocos.SingleAxisStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleAxisStop::IsInitialized() const {
  return true;
}

void SingleAxisStop::InternalSwap(SingleAxisStop* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleAxisStop::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_robot_5fcommand_2eproto_getter, &descriptor_table_robot_5fcommand_2eproto_once,
      file_level_metadata_robot_5fcommand_2eproto[4]);
}

// ===================================================================

class SingleAxisCommand::_Internal {
 public:
  static const ::rocos::SingleAxisEnabled& enabled(const SingleAxisCommand* msg);
  static const ::rocos::SingleAxisDisabled& disabled(const SingleAxisCommand* msg);
  static const ::rocos::SingleAxisMode& mode(const SingleAxisCommand* msg);
  static const ::rocos::SingleAxisMove& move(const SingleAxisCommand* msg);
  static const ::rocos::SingleAxisStop& stop(const SingleAxisCommand* msg);
};

const ::rocos::SingleAxisEnabled&
SingleAxisCommand::_Internal::enabled(const SingleAxisCommand* msg) {
  return *msg->command_.enabled_;
}
const ::rocos::SingleAxisDisabled&
SingleAxisCommand::_Internal::disabled(const SingleAxisCommand* msg) {
  return *msg->command_.disabled_;
}
const ::rocos::SingleAxisMode&
SingleAxisCommand::_Internal::mode(const SingleAxisCommand* msg) {
  return *msg->command_.mode_;
}
const ::rocos::SingleAxisMove&
SingleAxisCommand::_Internal::move(const SingleAxisCommand* msg) {
  return *msg->command_.move_;
}
const ::rocos::SingleAxisStop&
SingleAxisCommand::_Internal::stop(const SingleAxisCommand* msg) {
  return *msg->command_.stop_;
}
void SingleAxisCommand::set_allocated_enabled(::rocos::SingleAxisEnabled* enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_command();
  if (enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::rocos::SingleAxisEnabled>::GetOwningArena(enabled);
    if (message_arena != submessage_arena) {
      enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, enabled, submessage_arena);
    }
    set_has_enabled();
    command_.enabled_ = enabled;
  }
  // @@protoc_insertion_point(field_set_allocated:rocos.SingleAxisCommand.enabled)
}
void SingleAxisCommand::set_allocated_disabled(::rocos::SingleAxisDisabled* disabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_command();
  if (disabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::rocos::SingleAxisDisabled>::GetOwningArena(disabled);
    if (message_arena != submessage_arena) {
      disabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, disabled, submessage_arena);
    }
    set_has_disabled();
    command_.disabled_ = disabled;
  }
  // @@protoc_insertion_point(field_set_allocated:rocos.SingleAxisCommand.disabled)
}
void SingleAxisCommand::set_allocated_mode(::rocos::SingleAxisMode* mode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_command();
  if (mode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::rocos::SingleAxisMode>::GetOwningArena(mode);
    if (message_arena != submessage_arena) {
      mode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mode, submessage_arena);
    }
    set_has_mode();
    command_.mode_ = mode;
  }
  // @@protoc_insertion_point(field_set_allocated:rocos.SingleAxisCommand.mode)
}
void SingleAxisCommand::set_allocated_move(::rocos::SingleAxisMove* move) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_command();
  if (move) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::rocos::SingleAxisMove>::GetOwningArena(move);
    if (message_arena != submessage_arena) {
      move = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, move, submessage_arena);
    }
    set_has_move();
    command_.move_ = move;
  }
  // @@protoc_insertion_point(field_set_allocated:rocos.SingleAxisCommand.move)
}
void SingleAxisCommand::set_allocated_stop(::rocos::SingleAxisStop* stop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_command();
  if (stop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::rocos::SingleAxisStop>::GetOwningArena(stop);
    if (message_arena != submessage_arena) {
      stop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stop, submessage_arena);
    }
    set_has_stop();
    command_.stop_ = stop;
  }
  // @@protoc_insertion_point(field_set_allocated:rocos.SingleAxisCommand.stop)
}
SingleAxisCommand::SingleAxisCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rocos.SingleAxisCommand)
}
SingleAxisCommand::SingleAxisCommand(const SingleAxisCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_command();
  switch (from.command_case()) {
    case kEnabled: {
      _internal_mutable_enabled()->::rocos::SingleAxisEnabled::MergeFrom(from._internal_enabled());
      break;
    }
    case kDisabled: {
      _internal_mutable_disabled()->::rocos::SingleAxisDisabled::MergeFrom(from._internal_disabled());
      break;
    }
    case kMode: {
      _internal_mutable_mode()->::rocos::SingleAxisMode::MergeFrom(from._internal_mode());
      break;
    }
    case kMove: {
      _internal_mutable_move()->::rocos::SingleAxisMove::MergeFrom(from._internal_move());
      break;
    }
    case kStop: {
      _internal_mutable_stop()->::rocos::SingleAxisStop::MergeFrom(from._internal_stop());
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:rocos.SingleAxisCommand)
}

inline void SingleAxisCommand::SharedCtor() {
clear_has_command();
}

SingleAxisCommand::~SingleAxisCommand() {
  // @@protoc_insertion_point(destructor:rocos.SingleAxisCommand)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SingleAxisCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_command()) {
    clear_command();
  }
}

void SingleAxisCommand::ArenaDtor(void* object) {
  SingleAxisCommand* _this = reinterpret_cast< SingleAxisCommand* >(object);
  (void)_this;
}
void SingleAxisCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SingleAxisCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SingleAxisCommand::clear_command() {
// @@protoc_insertion_point(one_of_clear_start:rocos.SingleAxisCommand)
  switch (command_case()) {
    case kEnabled: {
      if (GetArenaForAllocation() == nullptr) {
        delete command_.enabled_;
      }
      break;
    }
    case kDisabled: {
      if (GetArenaForAllocation() == nullptr) {
        delete command_.disabled_;
      }
      break;
    }
    case kMode: {
      if (GetArenaForAllocation() == nullptr) {
        delete command_.mode_;
      }
      break;
    }
    case kMove: {
      if (GetArenaForAllocation() == nullptr) {
        delete command_.move_;
      }
      break;
    }
    case kStop: {
      if (GetArenaForAllocation() == nullptr) {
        delete command_.stop_;
      }
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = COMMAND_NOT_SET;
}


void SingleAxisCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:rocos.SingleAxisCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_command();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SingleAxisCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .rocos.SingleAxisEnabled enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .rocos.SingleAxisDisabled disabled = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_disabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .rocos.SingleAxisMode mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_mode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .rocos.SingleAxisMove move = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_move(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .rocos.SingleAxisStop stop = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_stop(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SingleAxisCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocos.SingleAxisCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rocos.SingleAxisEnabled enabled = 1;
  if (_internal_has_enabled()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::enabled(this), target, stream);
  }

  // .rocos.SingleAxisDisabled disabled = 2;
  if (_internal_has_disabled()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::disabled(this), target, stream);
  }

  // .rocos.SingleAxisMode mode = 3;
  if (_internal_has_mode()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::mode(this), target, stream);
  }

  // .rocos.SingleAxisMove move = 4;
  if (_internal_has_move()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::move(this), target, stream);
  }

  // .rocos.SingleAxisStop stop = 5;
  if (_internal_has_stop()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::stop(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocos.SingleAxisCommand)
  return target;
}

size_t SingleAxisCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocos.SingleAxisCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (command_case()) {
    // .rocos.SingleAxisEnabled enabled = 1;
    case kEnabled: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.enabled_);
      break;
    }
    // .rocos.SingleAxisDisabled disabled = 2;
    case kDisabled: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.disabled_);
      break;
    }
    // .rocos.SingleAxisMode mode = 3;
    case kMode: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.mode_);
      break;
    }
    // .rocos.SingleAxisMove move = 4;
    case kMove: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.move_);
      break;
    }
    // .rocos.SingleAxisStop stop = 5;
    case kStop: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.stop_);
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SingleAxisCommand::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SingleAxisCommand::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SingleAxisCommand::GetClassData() const { return &_class_data_; }

void SingleAxisCommand::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SingleAxisCommand *>(to)->MergeFrom(
      static_cast<const SingleAxisCommand &>(from));
}


void SingleAxisCommand::MergeFrom(const SingleAxisCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rocos.SingleAxisCommand)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.command_case()) {
    case kEnabled: {
      _internal_mutable_enabled()->::rocos::SingleAxisEnabled::MergeFrom(from._internal_enabled());
      break;
    }
    case kDisabled: {
      _internal_mutable_disabled()->::rocos::SingleAxisDisabled::MergeFrom(from._internal_disabled());
      break;
    }
    case kMode: {
      _internal_mutable_mode()->::rocos::SingleAxisMode::MergeFrom(from._internal_mode());
      break;
    }
    case kMove: {
      _internal_mutable_move()->::rocos::SingleAxisMove::MergeFrom(from._internal_move());
      break;
    }
    case kStop: {
      _internal_mutable_stop()->::rocos::SingleAxisStop::MergeFrom(from._internal_stop());
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SingleAxisCommand::CopyFrom(const SingleAxisCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocos.SingleAxisCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleAxisCommand::IsInitialized() const {
  return true;
}

void SingleAxisCommand::InternalSwap(SingleAxisCommand* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(command_, other->command_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleAxisCommand::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_robot_5fcommand_2eproto_getter, &descriptor_table_robot_5fcommand_2eproto_once,
      file_level_metadata_robot_5fcommand_2eproto[5]);
}

// ===================================================================

class MultiAxisEnabled::_Internal {
 public:
};

MultiAxisEnabled::MultiAxisEnabled(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rocos.MultiAxisEnabled)
}
MultiAxisEnabled::MultiAxisEnabled(const MultiAxisEnabled& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:rocos.MultiAxisEnabled)
}

inline void MultiAxisEnabled::SharedCtor() {
}

MultiAxisEnabled::~MultiAxisEnabled() {
  // @@protoc_insertion_point(destructor:rocos.MultiAxisEnabled)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MultiAxisEnabled::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MultiAxisEnabled::ArenaDtor(void* object) {
  MultiAxisEnabled* _this = reinterpret_cast< MultiAxisEnabled* >(object);
  (void)_this;
}
void MultiAxisEnabled::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MultiAxisEnabled::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MultiAxisEnabled::Clear() {
// @@protoc_insertion_point(message_clear_start:rocos.MultiAxisEnabled)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiAxisEnabled::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiAxisEnabled::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocos.MultiAxisEnabled)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocos.MultiAxisEnabled)
  return target;
}

size_t MultiAxisEnabled::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocos.MultiAxisEnabled)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiAxisEnabled::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MultiAxisEnabled::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiAxisEnabled::GetClassData() const { return &_class_data_; }

void MultiAxisEnabled::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<MultiAxisEnabled *>(to)->MergeFrom(
      static_cast<const MultiAxisEnabled &>(from));
}


void MultiAxisEnabled::MergeFrom(const MultiAxisEnabled& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rocos.MultiAxisEnabled)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiAxisEnabled::CopyFrom(const MultiAxisEnabled& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocos.MultiAxisEnabled)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiAxisEnabled::IsInitialized() const {
  return true;
}

void MultiAxisEnabled::InternalSwap(MultiAxisEnabled* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiAxisEnabled::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_robot_5fcommand_2eproto_getter, &descriptor_table_robot_5fcommand_2eproto_once,
      file_level_metadata_robot_5fcommand_2eproto[6]);
}

// ===================================================================

class MultiAxisDisabled::_Internal {
 public:
};

MultiAxisDisabled::MultiAxisDisabled(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rocos.MultiAxisDisabled)
}
MultiAxisDisabled::MultiAxisDisabled(const MultiAxisDisabled& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:rocos.MultiAxisDisabled)
}

inline void MultiAxisDisabled::SharedCtor() {
}

MultiAxisDisabled::~MultiAxisDisabled() {
  // @@protoc_insertion_point(destructor:rocos.MultiAxisDisabled)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MultiAxisDisabled::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MultiAxisDisabled::ArenaDtor(void* object) {
  MultiAxisDisabled* _this = reinterpret_cast< MultiAxisDisabled* >(object);
  (void)_this;
}
void MultiAxisDisabled::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MultiAxisDisabled::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MultiAxisDisabled::Clear() {
// @@protoc_insertion_point(message_clear_start:rocos.MultiAxisDisabled)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiAxisDisabled::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiAxisDisabled::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocos.MultiAxisDisabled)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocos.MultiAxisDisabled)
  return target;
}

size_t MultiAxisDisabled::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocos.MultiAxisDisabled)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiAxisDisabled::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MultiAxisDisabled::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiAxisDisabled::GetClassData() const { return &_class_data_; }

void MultiAxisDisabled::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<MultiAxisDisabled *>(to)->MergeFrom(
      static_cast<const MultiAxisDisabled &>(from));
}


void MultiAxisDisabled::MergeFrom(const MultiAxisDisabled& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rocos.MultiAxisDisabled)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiAxisDisabled::CopyFrom(const MultiAxisDisabled& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocos.MultiAxisDisabled)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiAxisDisabled::IsInitialized() const {
  return true;
}

void MultiAxisDisabled::InternalSwap(MultiAxisDisabled* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiAxisDisabled::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_robot_5fcommand_2eproto_getter, &descriptor_table_robot_5fcommand_2eproto_once,
      file_level_metadata_robot_5fcommand_2eproto[7]);
}

// ===================================================================

class MultiAxisMode::_Internal {
 public:
};

MultiAxisMode::MultiAxisMode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  value_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rocos.MultiAxisMode)
}
MultiAxisMode::MultiAxisMode(const MultiAxisMode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      value_(from.value_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:rocos.MultiAxisMode)
}

inline void MultiAxisMode::SharedCtor() {
}

MultiAxisMode::~MultiAxisMode() {
  // @@protoc_insertion_point(destructor:rocos.MultiAxisMode)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MultiAxisMode::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MultiAxisMode::ArenaDtor(void* object) {
  MultiAxisMode* _this = reinterpret_cast< MultiAxisMode* >(object);
  (void)_this;
}
void MultiAxisMode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MultiAxisMode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MultiAxisMode::Clear() {
// @@protoc_insertion_point(message_clear_start:rocos.MultiAxisMode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiAxisMode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .rocos.Mode value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_value(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_value(static_cast<::rocos::Mode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiAxisMode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocos.MultiAxisMode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .rocos.Mode value = 1;
  {
    int byte_size = _value_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          1, value_, byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocos.MultiAxisMode)
  return target;
}

size_t MultiAxisMode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocos.MultiAxisMode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .rocos.Mode value = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_value_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_value(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _value_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiAxisMode::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MultiAxisMode::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiAxisMode::GetClassData() const { return &_class_data_; }

void MultiAxisMode::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<MultiAxisMode *>(to)->MergeFrom(
      static_cast<const MultiAxisMode &>(from));
}


void MultiAxisMode::MergeFrom(const MultiAxisMode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rocos.MultiAxisMode)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiAxisMode::CopyFrom(const MultiAxisMode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocos.MultiAxisMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiAxisMode::IsInitialized() const {
  return true;
}

void MultiAxisMode::InternalSwap(MultiAxisMode* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  value_.InternalSwap(&other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiAxisMode::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_robot_5fcommand_2eproto_getter, &descriptor_table_robot_5fcommand_2eproto_once,
      file_level_metadata_robot_5fcommand_2eproto[8]);
}

// ===================================================================

class MultiAxisSync::_Internal {
 public:
};

MultiAxisSync::MultiAxisSync(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rocos.MultiAxisSync)
}
MultiAxisSync::MultiAxisSync(const MultiAxisSync& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:rocos.MultiAxisSync)
}

inline void MultiAxisSync::SharedCtor() {
value_ = 0;
}

MultiAxisSync::~MultiAxisSync() {
  // @@protoc_insertion_point(destructor:rocos.MultiAxisSync)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MultiAxisSync::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MultiAxisSync::ArenaDtor(void* object) {
  MultiAxisSync* _this = reinterpret_cast< MultiAxisSync* >(object);
  (void)_this;
}
void MultiAxisSync::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MultiAxisSync::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MultiAxisSync::Clear() {
// @@protoc_insertion_point(message_clear_start:rocos.MultiAxisSync)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiAxisSync::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .rocos.Synchronization value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_value(static_cast<::rocos::Synchronization>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiAxisSync::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocos.MultiAxisSync)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rocos.Synchronization value = 1;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocos.MultiAxisSync)
  return target;
}

size_t MultiAxisSync::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocos.MultiAxisSync)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .rocos.Synchronization value = 1;
  if (this->_internal_value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiAxisSync::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MultiAxisSync::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiAxisSync::GetClassData() const { return &_class_data_; }

void MultiAxisSync::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<MultiAxisSync *>(to)->MergeFrom(
      static_cast<const MultiAxisSync &>(from));
}


void MultiAxisSync::MergeFrom(const MultiAxisSync& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rocos.MultiAxisSync)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiAxisSync::CopyFrom(const MultiAxisSync& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocos.MultiAxisSync)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiAxisSync::IsInitialized() const {
  return true;
}

void MultiAxisSync::InternalSwap(MultiAxisSync* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiAxisSync::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_robot_5fcommand_2eproto_getter, &descriptor_table_robot_5fcommand_2eproto_once,
      file_level_metadata_robot_5fcommand_2eproto[9]);
}

// ===================================================================

class MultiAxisMove::_Internal {
 public:
  using HasBits = decltype(std::declval<MultiAxisMove>()._has_bits_);
  static void set_has_least_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_raw_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sync(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MultiAxisMove::MultiAxisMove(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  target_pos_(arena),
  max_vel_(arena),
  max_acc_(arena),
  max_jerk_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rocos.MultiAxisMove)
}
MultiAxisMove::MultiAxisMove(const MultiAxisMove& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      target_pos_(from.target_pos_),
      max_vel_(from.max_vel_),
      max_acc_(from.max_acc_),
      max_jerk_(from.max_jerk_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&least_time_, &from.least_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&sync_) -
    reinterpret_cast<char*>(&least_time_)) + sizeof(sync_));
  // @@protoc_insertion_point(copy_constructor:rocos.MultiAxisMove)
}

inline void MultiAxisMove::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&least_time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sync_) -
    reinterpret_cast<char*>(&least_time_)) + sizeof(sync_));
}

MultiAxisMove::~MultiAxisMove() {
  // @@protoc_insertion_point(destructor:rocos.MultiAxisMove)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MultiAxisMove::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MultiAxisMove::ArenaDtor(void* object) {
  MultiAxisMove* _this = reinterpret_cast< MultiAxisMove* >(object);
  (void)_this;
}
void MultiAxisMove::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MultiAxisMove::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MultiAxisMove::Clear() {
// @@protoc_insertion_point(message_clear_start:rocos.MultiAxisMove)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  target_pos_.Clear();
  max_vel_.Clear();
  max_acc_.Clear();
  max_jerk_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&least_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sync_) -
        reinterpret_cast<char*>(&least_time_)) + sizeof(sync_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiAxisMove::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated double target_pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_target_pos(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9) {
          _internal_add_target_pos(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated double max_vel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_max_vel(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25) {
          _internal_add_max_vel(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated double max_acc = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_max_acc(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33) {
          _internal_add_max_acc(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated double max_jerk = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_max_jerk(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41) {
          _internal_add_max_jerk(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double least_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_least_time(&has_bits);
          least_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool raw_data = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_raw_data(&has_bits);
          raw_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .rocos.Synchronization sync = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_sync(static_cast<::rocos::Synchronization>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiAxisMove::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocos.MultiAxisMove)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double target_pos = 1;
  if (this->_internal_target_pos_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_target_pos(), target);
  }

  // repeated double max_vel = 3;
  if (this->_internal_max_vel_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_max_vel(), target);
  }

  // repeated double max_acc = 4;
  if (this->_internal_max_acc_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_max_acc(), target);
  }

  // repeated double max_jerk = 5;
  if (this->_internal_max_jerk_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_max_jerk(), target);
  }

  // optional double least_time = 6;
  if (_internal_has_least_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_least_time(), target);
  }

  // optional bool raw_data = 7;
  if (_internal_has_raw_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_raw_data(), target);
  }

  // optional .rocos.Synchronization sync = 8;
  if (_internal_has_sync()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_sync(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocos.MultiAxisMove)
  return target;
}

size_t MultiAxisMove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocos.MultiAxisMove)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double target_pos = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_target_pos_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // repeated double max_vel = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_max_vel_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // repeated double max_acc = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_max_acc_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // repeated double max_jerk = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_max_jerk_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional double least_time = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional bool raw_data = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional .rocos.Synchronization sync = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_sync());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiAxisMove::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MultiAxisMove::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiAxisMove::GetClassData() const { return &_class_data_; }

void MultiAxisMove::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<MultiAxisMove *>(to)->MergeFrom(
      static_cast<const MultiAxisMove &>(from));
}


void MultiAxisMove::MergeFrom(const MultiAxisMove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rocos.MultiAxisMove)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  target_pos_.MergeFrom(from.target_pos_);
  max_vel_.MergeFrom(from.max_vel_);
  max_acc_.MergeFrom(from.max_acc_);
  max_jerk_.MergeFrom(from.max_jerk_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      least_time_ = from.least_time_;
    }
    if (cached_has_bits & 0x00000002u) {
      raw_data_ = from.raw_data_;
    }
    if (cached_has_bits & 0x00000004u) {
      sync_ = from.sync_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiAxisMove::CopyFrom(const MultiAxisMove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocos.MultiAxisMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiAxisMove::IsInitialized() const {
  return true;
}

void MultiAxisMove::InternalSwap(MultiAxisMove* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  target_pos_.InternalSwap(&other->target_pos_);
  max_vel_.InternalSwap(&other->max_vel_);
  max_acc_.InternalSwap(&other->max_acc_);
  max_jerk_.InternalSwap(&other->max_jerk_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MultiAxisMove, sync_)
      + sizeof(MultiAxisMove::sync_)
      - PROTOBUF_FIELD_OFFSET(MultiAxisMove, least_time_)>(
          reinterpret_cast<char*>(&least_time_),
          reinterpret_cast<char*>(&other->least_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiAxisMove::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_robot_5fcommand_2eproto_getter, &descriptor_table_robot_5fcommand_2eproto_once,
      file_level_metadata_robot_5fcommand_2eproto[10]);
}

// ===================================================================

class MultiAxisStop::_Internal {
 public:
};

MultiAxisStop::MultiAxisStop(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rocos.MultiAxisStop)
}
MultiAxisStop::MultiAxisStop(const MultiAxisStop& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:rocos.MultiAxisStop)
}

inline void MultiAxisStop::SharedCtor() {
}

MultiAxisStop::~MultiAxisStop() {
  // @@protoc_insertion_point(destructor:rocos.MultiAxisStop)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MultiAxisStop::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MultiAxisStop::ArenaDtor(void* object) {
  MultiAxisStop* _this = reinterpret_cast< MultiAxisStop* >(object);
  (void)_this;
}
void MultiAxisStop::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MultiAxisStop::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MultiAxisStop::Clear() {
// @@protoc_insertion_point(message_clear_start:rocos.MultiAxisStop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiAxisStop::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiAxisStop::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocos.MultiAxisStop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocos.MultiAxisStop)
  return target;
}

size_t MultiAxisStop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocos.MultiAxisStop)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiAxisStop::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MultiAxisStop::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiAxisStop::GetClassData() const { return &_class_data_; }

void MultiAxisStop::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<MultiAxisStop *>(to)->MergeFrom(
      static_cast<const MultiAxisStop &>(from));
}


void MultiAxisStop::MergeFrom(const MultiAxisStop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rocos.MultiAxisStop)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiAxisStop::CopyFrom(const MultiAxisStop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocos.MultiAxisStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiAxisStop::IsInitialized() const {
  return true;
}

void MultiAxisStop::InternalSwap(MultiAxisStop* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiAxisStop::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_robot_5fcommand_2eproto_getter, &descriptor_table_robot_5fcommand_2eproto_once,
      file_level_metadata_robot_5fcommand_2eproto[11]);
}

// ===================================================================

class MultiAxisCommand::_Internal {
 public:
  static const ::rocos::MultiAxisEnabled& enabled(const MultiAxisCommand* msg);
  static const ::rocos::MultiAxisDisabled& disabled(const MultiAxisCommand* msg);
  static const ::rocos::MultiAxisMode& mode(const MultiAxisCommand* msg);
  static const ::rocos::MultiAxisSync& sync(const MultiAxisCommand* msg);
  static const ::rocos::MultiAxisMove& move(const MultiAxisCommand* msg);
  static const ::rocos::MultiAxisStop& stop(const MultiAxisCommand* msg);
};

const ::rocos::MultiAxisEnabled&
MultiAxisCommand::_Internal::enabled(const MultiAxisCommand* msg) {
  return *msg->command_.enabled_;
}
const ::rocos::MultiAxisDisabled&
MultiAxisCommand::_Internal::disabled(const MultiAxisCommand* msg) {
  return *msg->command_.disabled_;
}
const ::rocos::MultiAxisMode&
MultiAxisCommand::_Internal::mode(const MultiAxisCommand* msg) {
  return *msg->command_.mode_;
}
const ::rocos::MultiAxisSync&
MultiAxisCommand::_Internal::sync(const MultiAxisCommand* msg) {
  return *msg->command_.sync_;
}
const ::rocos::MultiAxisMove&
MultiAxisCommand::_Internal::move(const MultiAxisCommand* msg) {
  return *msg->command_.move_;
}
const ::rocos::MultiAxisStop&
MultiAxisCommand::_Internal::stop(const MultiAxisCommand* msg) {
  return *msg->command_.stop_;
}
void MultiAxisCommand::set_allocated_enabled(::rocos::MultiAxisEnabled* enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_command();
  if (enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::rocos::MultiAxisEnabled>::GetOwningArena(enabled);
    if (message_arena != submessage_arena) {
      enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, enabled, submessage_arena);
    }
    set_has_enabled();
    command_.enabled_ = enabled;
  }
  // @@protoc_insertion_point(field_set_allocated:rocos.MultiAxisCommand.enabled)
}
void MultiAxisCommand::set_allocated_disabled(::rocos::MultiAxisDisabled* disabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_command();
  if (disabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::rocos::MultiAxisDisabled>::GetOwningArena(disabled);
    if (message_arena != submessage_arena) {
      disabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, disabled, submessage_arena);
    }
    set_has_disabled();
    command_.disabled_ = disabled;
  }
  // @@protoc_insertion_point(field_set_allocated:rocos.MultiAxisCommand.disabled)
}
void MultiAxisCommand::set_allocated_mode(::rocos::MultiAxisMode* mode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_command();
  if (mode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::rocos::MultiAxisMode>::GetOwningArena(mode);
    if (message_arena != submessage_arena) {
      mode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mode, submessage_arena);
    }
    set_has_mode();
    command_.mode_ = mode;
  }
  // @@protoc_insertion_point(field_set_allocated:rocos.MultiAxisCommand.mode)
}
void MultiAxisCommand::set_allocated_sync(::rocos::MultiAxisSync* sync) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_command();
  if (sync) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::rocos::MultiAxisSync>::GetOwningArena(sync);
    if (message_arena != submessage_arena) {
      sync = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sync, submessage_arena);
    }
    set_has_sync();
    command_.sync_ = sync;
  }
  // @@protoc_insertion_point(field_set_allocated:rocos.MultiAxisCommand.sync)
}
void MultiAxisCommand::set_allocated_move(::rocos::MultiAxisMove* move) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_command();
  if (move) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::rocos::MultiAxisMove>::GetOwningArena(move);
    if (message_arena != submessage_arena) {
      move = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, move, submessage_arena);
    }
    set_has_move();
    command_.move_ = move;
  }
  // @@protoc_insertion_point(field_set_allocated:rocos.MultiAxisCommand.move)
}
void MultiAxisCommand::set_allocated_stop(::rocos::MultiAxisStop* stop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_command();
  if (stop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::rocos::MultiAxisStop>::GetOwningArena(stop);
    if (message_arena != submessage_arena) {
      stop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stop, submessage_arena);
    }
    set_has_stop();
    command_.stop_ = stop;
  }
  // @@protoc_insertion_point(field_set_allocated:rocos.MultiAxisCommand.stop)
}
MultiAxisCommand::MultiAxisCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rocos.MultiAxisCommand)
}
MultiAxisCommand::MultiAxisCommand(const MultiAxisCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_command();
  switch (from.command_case()) {
    case kEnabled: {
      _internal_mutable_enabled()->::rocos::MultiAxisEnabled::MergeFrom(from._internal_enabled());
      break;
    }
    case kDisabled: {
      _internal_mutable_disabled()->::rocos::MultiAxisDisabled::MergeFrom(from._internal_disabled());
      break;
    }
    case kMode: {
      _internal_mutable_mode()->::rocos::MultiAxisMode::MergeFrom(from._internal_mode());
      break;
    }
    case kSync: {
      _internal_mutable_sync()->::rocos::MultiAxisSync::MergeFrom(from._internal_sync());
      break;
    }
    case kMove: {
      _internal_mutable_move()->::rocos::MultiAxisMove::MergeFrom(from._internal_move());
      break;
    }
    case kStop: {
      _internal_mutable_stop()->::rocos::MultiAxisStop::MergeFrom(from._internal_stop());
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:rocos.MultiAxisCommand)
}

inline void MultiAxisCommand::SharedCtor() {
clear_has_command();
}

MultiAxisCommand::~MultiAxisCommand() {
  // @@protoc_insertion_point(destructor:rocos.MultiAxisCommand)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MultiAxisCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_command()) {
    clear_command();
  }
}

void MultiAxisCommand::ArenaDtor(void* object) {
  MultiAxisCommand* _this = reinterpret_cast< MultiAxisCommand* >(object);
  (void)_this;
}
void MultiAxisCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MultiAxisCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MultiAxisCommand::clear_command() {
// @@protoc_insertion_point(one_of_clear_start:rocos.MultiAxisCommand)
  switch (command_case()) {
    case kEnabled: {
      if (GetArenaForAllocation() == nullptr) {
        delete command_.enabled_;
      }
      break;
    }
    case kDisabled: {
      if (GetArenaForAllocation() == nullptr) {
        delete command_.disabled_;
      }
      break;
    }
    case kMode: {
      if (GetArenaForAllocation() == nullptr) {
        delete command_.mode_;
      }
      break;
    }
    case kSync: {
      if (GetArenaForAllocation() == nullptr) {
        delete command_.sync_;
      }
      break;
    }
    case kMove: {
      if (GetArenaForAllocation() == nullptr) {
        delete command_.move_;
      }
      break;
    }
    case kStop: {
      if (GetArenaForAllocation() == nullptr) {
        delete command_.stop_;
      }
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = COMMAND_NOT_SET;
}


void MultiAxisCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:rocos.MultiAxisCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_command();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiAxisCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .rocos.MultiAxisEnabled enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .rocos.MultiAxisDisabled disabled = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_disabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .rocos.MultiAxisMode mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_mode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .rocos.MultiAxisSync sync = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_sync(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .rocos.MultiAxisMove move = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_move(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .rocos.MultiAxisStop stop = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_stop(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiAxisCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocos.MultiAxisCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rocos.MultiAxisEnabled enabled = 1;
  if (_internal_has_enabled()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::enabled(this), target, stream);
  }

  // .rocos.MultiAxisDisabled disabled = 2;
  if (_internal_has_disabled()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::disabled(this), target, stream);
  }

  // .rocos.MultiAxisMode mode = 3;
  if (_internal_has_mode()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::mode(this), target, stream);
  }

  // .rocos.MultiAxisSync sync = 4;
  if (_internal_has_sync()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::sync(this), target, stream);
  }

  // .rocos.MultiAxisMove move = 5;
  if (_internal_has_move()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::move(this), target, stream);
  }

  // .rocos.MultiAxisStop stop = 6;
  if (_internal_has_stop()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::stop(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocos.MultiAxisCommand)
  return target;
}

size_t MultiAxisCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocos.MultiAxisCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (command_case()) {
    // .rocos.MultiAxisEnabled enabled = 1;
    case kEnabled: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.enabled_);
      break;
    }
    // .rocos.MultiAxisDisabled disabled = 2;
    case kDisabled: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.disabled_);
      break;
    }
    // .rocos.MultiAxisMode mode = 3;
    case kMode: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.mode_);
      break;
    }
    // .rocos.MultiAxisSync sync = 4;
    case kSync: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.sync_);
      break;
    }
    // .rocos.MultiAxisMove move = 5;
    case kMove: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.move_);
      break;
    }
    // .rocos.MultiAxisStop stop = 6;
    case kStop: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.stop_);
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiAxisCommand::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MultiAxisCommand::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiAxisCommand::GetClassData() const { return &_class_data_; }

void MultiAxisCommand::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<MultiAxisCommand *>(to)->MergeFrom(
      static_cast<const MultiAxisCommand &>(from));
}


void MultiAxisCommand::MergeFrom(const MultiAxisCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rocos.MultiAxisCommand)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.command_case()) {
    case kEnabled: {
      _internal_mutable_enabled()->::rocos::MultiAxisEnabled::MergeFrom(from._internal_enabled());
      break;
    }
    case kDisabled: {
      _internal_mutable_disabled()->::rocos::MultiAxisDisabled::MergeFrom(from._internal_disabled());
      break;
    }
    case kMode: {
      _internal_mutable_mode()->::rocos::MultiAxisMode::MergeFrom(from._internal_mode());
      break;
    }
    case kSync: {
      _internal_mutable_sync()->::rocos::MultiAxisSync::MergeFrom(from._internal_sync());
      break;
    }
    case kMove: {
      _internal_mutable_move()->::rocos::MultiAxisMove::MergeFrom(from._internal_move());
      break;
    }
    case kStop: {
      _internal_mutable_stop()->::rocos::MultiAxisStop::MergeFrom(from._internal_stop());
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiAxisCommand::CopyFrom(const MultiAxisCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocos.MultiAxisCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiAxisCommand::IsInitialized() const {
  return true;
}

void MultiAxisCommand::InternalSwap(MultiAxisCommand* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(command_, other->command_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiAxisCommand::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_robot_5fcommand_2eproto_getter, &descriptor_table_robot_5fcommand_2eproto_once,
      file_level_metadata_robot_5fcommand_2eproto[12]);
}

// ===================================================================

class Enabled::_Internal {
 public:
};

Enabled::Enabled(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  target_pos_(arena),
  target_vel_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rocos.Enabled)
}
Enabled::Enabled(const Enabled& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      target_pos_(from.target_pos_),
      target_vel_(from.target_vel_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:rocos.Enabled)
}

inline void Enabled::SharedCtor() {
}

Enabled::~Enabled() {
  // @@protoc_insertion_point(destructor:rocos.Enabled)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Enabled::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Enabled::ArenaDtor(void* object) {
  Enabled* _this = reinterpret_cast< Enabled* >(object);
  (void)_this;
}
void Enabled::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Enabled::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Enabled::Clear() {
// @@protoc_insertion_point(message_clear_start:rocos.Enabled)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  target_pos_.Clear();
  target_vel_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Enabled::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated double target_pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_target_pos(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9) {
          _internal_add_target_pos(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated double target_vel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_target_vel(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17) {
          _internal_add_target_vel(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Enabled::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocos.Enabled)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double target_pos = 1;
  if (this->_internal_target_pos_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_target_pos(), target);
  }

  // repeated double target_vel = 2;
  if (this->_internal_target_vel_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_target_vel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocos.Enabled)
  return target;
}

size_t Enabled::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocos.Enabled)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double target_pos = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_target_pos_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // repeated double target_vel = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_target_vel_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Enabled::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Enabled::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Enabled::GetClassData() const { return &_class_data_; }

void Enabled::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Enabled *>(to)->MergeFrom(
      static_cast<const Enabled &>(from));
}


void Enabled::MergeFrom(const Enabled& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rocos.Enabled)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  target_pos_.MergeFrom(from.target_pos_);
  target_vel_.MergeFrom(from.target_vel_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Enabled::CopyFrom(const Enabled& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocos.Enabled)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Enabled::IsInitialized() const {
  return true;
}

void Enabled::InternalSwap(Enabled* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  target_pos_.InternalSwap(&other->target_pos_);
  target_vel_.InternalSwap(&other->target_vel_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Enabled::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_robot_5fcommand_2eproto_getter, &descriptor_table_robot_5fcommand_2eproto_once,
      file_level_metadata_robot_5fcommand_2eproto[13]);
}

// ===================================================================

class Disabled::_Internal {
 public:
};

Disabled::Disabled(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rocos.Disabled)
}
Disabled::Disabled(const Disabled& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:rocos.Disabled)
}

inline void Disabled::SharedCtor() {
}

Disabled::~Disabled() {
  // @@protoc_insertion_point(destructor:rocos.Disabled)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Disabled::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Disabled::ArenaDtor(void* object) {
  Disabled* _this = reinterpret_cast< Disabled* >(object);
  (void)_this;
}
void Disabled::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Disabled::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Disabled::Clear() {
// @@protoc_insertion_point(message_clear_start:rocos.Disabled)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Disabled::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Disabled::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocos.Disabled)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocos.Disabled)
  return target;
}

size_t Disabled::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocos.Disabled)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Disabled::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Disabled::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Disabled::GetClassData() const { return &_class_data_; }

void Disabled::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Disabled *>(to)->MergeFrom(
      static_cast<const Disabled &>(from));
}


void Disabled::MergeFrom(const Disabled& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rocos.Disabled)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Disabled::CopyFrom(const Disabled& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocos.Disabled)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Disabled::IsInitialized() const {
  return true;
}

void Disabled::InternalSwap(Disabled* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Disabled::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_robot_5fcommand_2eproto_getter, &descriptor_table_robot_5fcommand_2eproto_once,
      file_level_metadata_robot_5fcommand_2eproto[14]);
}

// ===================================================================

class ZeroOffset::_Internal {
 public:
};

void ZeroOffset::clear_value() {
  value_.Clear();
}
ZeroOffset::ZeroOffset(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  value_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rocos.ZeroOffset)
}
ZeroOffset::ZeroOffset(const ZeroOffset& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      value_(from.value_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:rocos.ZeroOffset)
}

inline void ZeroOffset::SharedCtor() {
}

ZeroOffset::~ZeroOffset() {
  // @@protoc_insertion_point(destructor:rocos.ZeroOffset)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ZeroOffset::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ZeroOffset::ArenaDtor(void* object) {
  ZeroOffset* _this = reinterpret_cast< ZeroOffset* >(object);
  (void)_this;
}
void ZeroOffset::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ZeroOffset::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ZeroOffset::Clear() {
// @@protoc_insertion_point(message_clear_start:rocos.ZeroOffset)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ZeroOffset::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .google.protobuf.Int32Value value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_value(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ZeroOffset::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocos.ZeroOffset)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.protobuf.Int32Value value = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_value_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_value(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocos.ZeroOffset)
  return target;
}

size_t ZeroOffset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocos.ZeroOffset)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.protobuf.Int32Value value = 1;
  total_size += 1UL * this->_internal_value_size();
  for (const auto& msg : this->value_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ZeroOffset::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ZeroOffset::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ZeroOffset::GetClassData() const { return &_class_data_; }

void ZeroOffset::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ZeroOffset *>(to)->MergeFrom(
      static_cast<const ZeroOffset &>(from));
}


void ZeroOffset::MergeFrom(const ZeroOffset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rocos.ZeroOffset)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ZeroOffset::CopyFrom(const ZeroOffset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocos.ZeroOffset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZeroOffset::IsInitialized() const {
  return true;
}

void ZeroOffset::InternalSwap(ZeroOffset* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  value_.InternalSwap(&other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ZeroOffset::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_robot_5fcommand_2eproto_getter, &descriptor_table_robot_5fcommand_2eproto_once,
      file_level_metadata_robot_5fcommand_2eproto[15]);
}

// ===================================================================

class CntPerUnit::_Internal {
 public:
};

void CntPerUnit::clear_value() {
  value_.Clear();
}
CntPerUnit::CntPerUnit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  value_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rocos.CntPerUnit)
}
CntPerUnit::CntPerUnit(const CntPerUnit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      value_(from.value_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:rocos.CntPerUnit)
}

inline void CntPerUnit::SharedCtor() {
}

CntPerUnit::~CntPerUnit() {
  // @@protoc_insertion_point(destructor:rocos.CntPerUnit)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CntPerUnit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CntPerUnit::ArenaDtor(void* object) {
  CntPerUnit* _this = reinterpret_cast< CntPerUnit* >(object);
  (void)_this;
}
void CntPerUnit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CntPerUnit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CntPerUnit::Clear() {
// @@protoc_insertion_point(message_clear_start:rocos.CntPerUnit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CntPerUnit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .google.protobuf.DoubleValue value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_value(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CntPerUnit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocos.CntPerUnit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.protobuf.DoubleValue value = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_value_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_value(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocos.CntPerUnit)
  return target;
}

size_t CntPerUnit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocos.CntPerUnit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.protobuf.DoubleValue value = 1;
  total_size += 1UL * this->_internal_value_size();
  for (const auto& msg : this->value_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CntPerUnit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CntPerUnit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CntPerUnit::GetClassData() const { return &_class_data_; }

void CntPerUnit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CntPerUnit *>(to)->MergeFrom(
      static_cast<const CntPerUnit &>(from));
}


void CntPerUnit::MergeFrom(const CntPerUnit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rocos.CntPerUnit)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CntPerUnit::CopyFrom(const CntPerUnit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocos.CntPerUnit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CntPerUnit::IsInitialized() const {
  return true;
}

void CntPerUnit::InternalSwap(CntPerUnit* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  value_.InternalSwap(&other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CntPerUnit::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_robot_5fcommand_2eproto_getter, &descriptor_table_robot_5fcommand_2eproto_once,
      file_level_metadata_robot_5fcommand_2eproto[16]);
}

// ===================================================================

class MoveJ::_Internal {
 public:
  static const ::rocos::JointArray& q(const MoveJ* msg);
};

const ::rocos::JointArray&
MoveJ::_Internal::q(const MoveJ* msg) {
  return *msg->q_;
}
void MoveJ::clear_q() {
  if (GetArenaForAllocation() == nullptr && q_ != nullptr) {
    delete q_;
  }
  q_ = nullptr;
}
MoveJ::MoveJ(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rocos.MoveJ)
}
MoveJ::MoveJ(const MoveJ& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_q()) {
    q_ = new ::rocos::JointArray(*from.q_);
  } else {
    q_ = nullptr;
  }
  ::memcpy(&speed_, &from.speed_,
    static_cast<size_t>(reinterpret_cast<char*>(&asynchronous_) -
    reinterpret_cast<char*>(&speed_)) + sizeof(asynchronous_));
  // @@protoc_insertion_point(copy_constructor:rocos.MoveJ)
}

inline void MoveJ::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&q_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&asynchronous_) -
    reinterpret_cast<char*>(&q_)) + sizeof(asynchronous_));
}

MoveJ::~MoveJ() {
  // @@protoc_insertion_point(destructor:rocos.MoveJ)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MoveJ::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete q_;
}

void MoveJ::ArenaDtor(void* object) {
  MoveJ* _this = reinterpret_cast< MoveJ* >(object);
  (void)_this;
}
void MoveJ::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MoveJ::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MoveJ::Clear() {
// @@protoc_insertion_point(message_clear_start:rocos.MoveJ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && q_ != nullptr) {
    delete q_;
  }
  q_ = nullptr;
  ::memset(&speed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&asynchronous_) -
      reinterpret_cast<char*>(&speed_)) + sizeof(asynchronous_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MoveJ::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .rocos.JointArray q = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_q(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double speed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double acceleration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double radius = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool asynchronous = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          asynchronous_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoveJ::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocos.MoveJ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rocos.JointArray q = 1;
  if (this->_internal_has_q()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::q(this), target, stream);
  }

  // double speed = 2;
  if (!(this->_internal_speed() <= 0 && this->_internal_speed() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_speed(), target);
  }

  // double acceleration = 3;
  if (!(this->_internal_acceleration() <= 0 && this->_internal_acceleration() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_acceleration(), target);
  }

  // double time = 4;
  if (!(this->_internal_time() <= 0 && this->_internal_time() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_time(), target);
  }

  // double radius = 5;
  if (!(this->_internal_radius() <= 0 && this->_internal_radius() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_radius(), target);
  }

  // bool asynchronous = 6;
  if (this->_internal_asynchronous() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_asynchronous(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocos.MoveJ)
  return target;
}

size_t MoveJ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocos.MoveJ)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .rocos.JointArray q = 1;
  if (this->_internal_has_q()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *q_);
  }

  // double speed = 2;
  if (!(this->_internal_speed() <= 0 && this->_internal_speed() >= 0)) {
    total_size += 1 + 8;
  }

  // double acceleration = 3;
  if (!(this->_internal_acceleration() <= 0 && this->_internal_acceleration() >= 0)) {
    total_size += 1 + 8;
  }

  // double time = 4;
  if (!(this->_internal_time() <= 0 && this->_internal_time() >= 0)) {
    total_size += 1 + 8;
  }

  // double radius = 5;
  if (!(this->_internal_radius() <= 0 && this->_internal_radius() >= 0)) {
    total_size += 1 + 8;
  }

  // bool asynchronous = 6;
  if (this->_internal_asynchronous() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MoveJ::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MoveJ::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MoveJ::GetClassData() const { return &_class_data_; }

void MoveJ::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<MoveJ *>(to)->MergeFrom(
      static_cast<const MoveJ &>(from));
}


void MoveJ::MergeFrom(const MoveJ& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rocos.MoveJ)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_q()) {
    _internal_mutable_q()->::rocos::JointArray::MergeFrom(from._internal_q());
  }
  if (!(from._internal_speed() <= 0 && from._internal_speed() >= 0)) {
    _internal_set_speed(from._internal_speed());
  }
  if (!(from._internal_acceleration() <= 0 && from._internal_acceleration() >= 0)) {
    _internal_set_acceleration(from._internal_acceleration());
  }
  if (!(from._internal_time() <= 0 && from._internal_time() >= 0)) {
    _internal_set_time(from._internal_time());
  }
  if (!(from._internal_radius() <= 0 && from._internal_radius() >= 0)) {
    _internal_set_radius(from._internal_radius());
  }
  if (from._internal_asynchronous() != 0) {
    _internal_set_asynchronous(from._internal_asynchronous());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MoveJ::CopyFrom(const MoveJ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocos.MoveJ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveJ::IsInitialized() const {
  return true;
}

void MoveJ::InternalSwap(MoveJ* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MoveJ, asynchronous_)
      + sizeof(MoveJ::asynchronous_)
      - PROTOBUF_FIELD_OFFSET(MoveJ, q_)>(
          reinterpret_cast<char*>(&q_),
          reinterpret_cast<char*>(&other->q_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveJ::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_robot_5fcommand_2eproto_getter, &descriptor_table_robot_5fcommand_2eproto_once,
      file_level_metadata_robot_5fcommand_2eproto[17]);
}

// ===================================================================

class MoveJ_IK::_Internal {
 public:
  static const ::rocos::SE3Pose& pose(const MoveJ_IK* msg);
};

const ::rocos::SE3Pose&
MoveJ_IK::_Internal::pose(const MoveJ_IK* msg) {
  return *msg->pose_;
}
void MoveJ_IK::clear_pose() {
  if (GetArenaForAllocation() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
}
MoveJ_IK::MoveJ_IK(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rocos.MoveJ_IK)
}
MoveJ_IK::MoveJ_IK(const MoveJ_IK& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pose()) {
    pose_ = new ::rocos::SE3Pose(*from.pose_);
  } else {
    pose_ = nullptr;
  }
  ::memcpy(&speed_, &from.speed_,
    static_cast<size_t>(reinterpret_cast<char*>(&asynchronous_) -
    reinterpret_cast<char*>(&speed_)) + sizeof(asynchronous_));
  // @@protoc_insertion_point(copy_constructor:rocos.MoveJ_IK)
}

inline void MoveJ_IK::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pose_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&asynchronous_) -
    reinterpret_cast<char*>(&pose_)) + sizeof(asynchronous_));
}

MoveJ_IK::~MoveJ_IK() {
  // @@protoc_insertion_point(destructor:rocos.MoveJ_IK)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MoveJ_IK::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete pose_;
}

void MoveJ_IK::ArenaDtor(void* object) {
  MoveJ_IK* _this = reinterpret_cast< MoveJ_IK* >(object);
  (void)_this;
}
void MoveJ_IK::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MoveJ_IK::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MoveJ_IK::Clear() {
// @@protoc_insertion_point(message_clear_start:rocos.MoveJ_IK)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
  ::memset(&speed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&asynchronous_) -
      reinterpret_cast<char*>(&speed_)) + sizeof(asynchronous_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MoveJ_IK::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .rocos.SE3Pose pose = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double speed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double acceleration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double radius = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool asynchronous = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          asynchronous_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoveJ_IK::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocos.MoveJ_IK)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rocos.SE3Pose pose = 1;
  if (this->_internal_has_pose()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pose(this), target, stream);
  }

  // double speed = 2;
  if (!(this->_internal_speed() <= 0 && this->_internal_speed() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_speed(), target);
  }

  // double acceleration = 3;
  if (!(this->_internal_acceleration() <= 0 && this->_internal_acceleration() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_acceleration(), target);
  }

  // double time = 4;
  if (!(this->_internal_time() <= 0 && this->_internal_time() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_time(), target);
  }

  // double radius = 5;
  if (!(this->_internal_radius() <= 0 && this->_internal_radius() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_radius(), target);
  }

  // bool asynchronous = 6;
  if (this->_internal_asynchronous() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_asynchronous(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocos.MoveJ_IK)
  return target;
}

size_t MoveJ_IK::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocos.MoveJ_IK)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .rocos.SE3Pose pose = 1;
  if (this->_internal_has_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pose_);
  }

  // double speed = 2;
  if (!(this->_internal_speed() <= 0 && this->_internal_speed() >= 0)) {
    total_size += 1 + 8;
  }

  // double acceleration = 3;
  if (!(this->_internal_acceleration() <= 0 && this->_internal_acceleration() >= 0)) {
    total_size += 1 + 8;
  }

  // double time = 4;
  if (!(this->_internal_time() <= 0 && this->_internal_time() >= 0)) {
    total_size += 1 + 8;
  }

  // double radius = 5;
  if (!(this->_internal_radius() <= 0 && this->_internal_radius() >= 0)) {
    total_size += 1 + 8;
  }

  // bool asynchronous = 6;
  if (this->_internal_asynchronous() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MoveJ_IK::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MoveJ_IK::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MoveJ_IK::GetClassData() const { return &_class_data_; }

void MoveJ_IK::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<MoveJ_IK *>(to)->MergeFrom(
      static_cast<const MoveJ_IK &>(from));
}


void MoveJ_IK::MergeFrom(const MoveJ_IK& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rocos.MoveJ_IK)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pose()) {
    _internal_mutable_pose()->::rocos::SE3Pose::MergeFrom(from._internal_pose());
  }
  if (!(from._internal_speed() <= 0 && from._internal_speed() >= 0)) {
    _internal_set_speed(from._internal_speed());
  }
  if (!(from._internal_acceleration() <= 0 && from._internal_acceleration() >= 0)) {
    _internal_set_acceleration(from._internal_acceleration());
  }
  if (!(from._internal_time() <= 0 && from._internal_time() >= 0)) {
    _internal_set_time(from._internal_time());
  }
  if (!(from._internal_radius() <= 0 && from._internal_radius() >= 0)) {
    _internal_set_radius(from._internal_radius());
  }
  if (from._internal_asynchronous() != 0) {
    _internal_set_asynchronous(from._internal_asynchronous());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MoveJ_IK::CopyFrom(const MoveJ_IK& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocos.MoveJ_IK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveJ_IK::IsInitialized() const {
  return true;
}

void MoveJ_IK::InternalSwap(MoveJ_IK* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MoveJ_IK, asynchronous_)
      + sizeof(MoveJ_IK::asynchronous_)
      - PROTOBUF_FIELD_OFFSET(MoveJ_IK, pose_)>(
          reinterpret_cast<char*>(&pose_),
          reinterpret_cast<char*>(&other->pose_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveJ_IK::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_robot_5fcommand_2eproto_getter, &descriptor_table_robot_5fcommand_2eproto_once,
      file_level_metadata_robot_5fcommand_2eproto[18]);
}

// ===================================================================

class MoveL::_Internal {
 public:
  static const ::rocos::SE3Pose& pose(const MoveL* msg);
};

const ::rocos::SE3Pose&
MoveL::_Internal::pose(const MoveL* msg) {
  return *msg->pose_;
}
void MoveL::clear_pose() {
  if (GetArenaForAllocation() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
}
MoveL::MoveL(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rocos.MoveL)
}
MoveL::MoveL(const MoveL& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pose()) {
    pose_ = new ::rocos::SE3Pose(*from.pose_);
  } else {
    pose_ = nullptr;
  }
  ::memcpy(&speed_, &from.speed_,
    static_cast<size_t>(reinterpret_cast<char*>(&asynchronous_) -
    reinterpret_cast<char*>(&speed_)) + sizeof(asynchronous_));
  // @@protoc_insertion_point(copy_constructor:rocos.MoveL)
}

inline void MoveL::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pose_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&asynchronous_) -
    reinterpret_cast<char*>(&pose_)) + sizeof(asynchronous_));
}

MoveL::~MoveL() {
  // @@protoc_insertion_point(destructor:rocos.MoveL)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MoveL::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete pose_;
}

void MoveL::ArenaDtor(void* object) {
  MoveL* _this = reinterpret_cast< MoveL* >(object);
  (void)_this;
}
void MoveL::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MoveL::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MoveL::Clear() {
// @@protoc_insertion_point(message_clear_start:rocos.MoveL)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
  ::memset(&speed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&asynchronous_) -
      reinterpret_cast<char*>(&speed_)) + sizeof(asynchronous_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MoveL::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .rocos.SE3Pose pose = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double speed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double acceleration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double radius = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool asynchronous = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          asynchronous_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoveL::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocos.MoveL)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rocos.SE3Pose pose = 1;
  if (this->_internal_has_pose()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pose(this), target, stream);
  }

  // double speed = 2;
  if (!(this->_internal_speed() <= 0 && this->_internal_speed() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_speed(), target);
  }

  // double acceleration = 3;
  if (!(this->_internal_acceleration() <= 0 && this->_internal_acceleration() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_acceleration(), target);
  }

  // double time = 4;
  if (!(this->_internal_time() <= 0 && this->_internal_time() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_time(), target);
  }

  // double radius = 5;
  if (!(this->_internal_radius() <= 0 && this->_internal_radius() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_radius(), target);
  }

  // bool asynchronous = 6;
  if (this->_internal_asynchronous() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_asynchronous(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocos.MoveL)
  return target;
}

size_t MoveL::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocos.MoveL)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .rocos.SE3Pose pose = 1;
  if (this->_internal_has_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pose_);
  }

  // double speed = 2;
  if (!(this->_internal_speed() <= 0 && this->_internal_speed() >= 0)) {
    total_size += 1 + 8;
  }

  // double acceleration = 3;
  if (!(this->_internal_acceleration() <= 0 && this->_internal_acceleration() >= 0)) {
    total_size += 1 + 8;
  }

  // double time = 4;
  if (!(this->_internal_time() <= 0 && this->_internal_time() >= 0)) {
    total_size += 1 + 8;
  }

  // double radius = 5;
  if (!(this->_internal_radius() <= 0 && this->_internal_radius() >= 0)) {
    total_size += 1 + 8;
  }

  // bool asynchronous = 6;
  if (this->_internal_asynchronous() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MoveL::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MoveL::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MoveL::GetClassData() const { return &_class_data_; }

void MoveL::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<MoveL *>(to)->MergeFrom(
      static_cast<const MoveL &>(from));
}


void MoveL::MergeFrom(const MoveL& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rocos.MoveL)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pose()) {
    _internal_mutable_pose()->::rocos::SE3Pose::MergeFrom(from._internal_pose());
  }
  if (!(from._internal_speed() <= 0 && from._internal_speed() >= 0)) {
    _internal_set_speed(from._internal_speed());
  }
  if (!(from._internal_acceleration() <= 0 && from._internal_acceleration() >= 0)) {
    _internal_set_acceleration(from._internal_acceleration());
  }
  if (!(from._internal_time() <= 0 && from._internal_time() >= 0)) {
    _internal_set_time(from._internal_time());
  }
  if (!(from._internal_radius() <= 0 && from._internal_radius() >= 0)) {
    _internal_set_radius(from._internal_radius());
  }
  if (from._internal_asynchronous() != 0) {
    _internal_set_asynchronous(from._internal_asynchronous());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MoveL::CopyFrom(const MoveL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocos.MoveL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveL::IsInitialized() const {
  return true;
}

void MoveL::InternalSwap(MoveL* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MoveL, asynchronous_)
      + sizeof(MoveL::asynchronous_)
      - PROTOBUF_FIELD_OFFSET(MoveL, pose_)>(
          reinterpret_cast<char*>(&pose_),
          reinterpret_cast<char*>(&other->pose_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveL::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_robot_5fcommand_2eproto_getter, &descriptor_table_robot_5fcommand_2eproto_once,
      file_level_metadata_robot_5fcommand_2eproto[19]);
}

// ===================================================================

class MoveL_FK::_Internal {
 public:
  static const ::rocos::JointArray& q(const MoveL_FK* msg);
};

const ::rocos::JointArray&
MoveL_FK::_Internal::q(const MoveL_FK* msg) {
  return *msg->q_;
}
void MoveL_FK::clear_q() {
  if (GetArenaForAllocation() == nullptr && q_ != nullptr) {
    delete q_;
  }
  q_ = nullptr;
}
MoveL_FK::MoveL_FK(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rocos.MoveL_FK)
}
MoveL_FK::MoveL_FK(const MoveL_FK& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_q()) {
    q_ = new ::rocos::JointArray(*from.q_);
  } else {
    q_ = nullptr;
  }
  ::memcpy(&speed_, &from.speed_,
    static_cast<size_t>(reinterpret_cast<char*>(&asynchronous_) -
    reinterpret_cast<char*>(&speed_)) + sizeof(asynchronous_));
  // @@protoc_insertion_point(copy_constructor:rocos.MoveL_FK)
}

inline void MoveL_FK::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&q_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&asynchronous_) -
    reinterpret_cast<char*>(&q_)) + sizeof(asynchronous_));
}

MoveL_FK::~MoveL_FK() {
  // @@protoc_insertion_point(destructor:rocos.MoveL_FK)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MoveL_FK::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete q_;
}

void MoveL_FK::ArenaDtor(void* object) {
  MoveL_FK* _this = reinterpret_cast< MoveL_FK* >(object);
  (void)_this;
}
void MoveL_FK::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MoveL_FK::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MoveL_FK::Clear() {
// @@protoc_insertion_point(message_clear_start:rocos.MoveL_FK)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && q_ != nullptr) {
    delete q_;
  }
  q_ = nullptr;
  ::memset(&speed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&asynchronous_) -
      reinterpret_cast<char*>(&speed_)) + sizeof(asynchronous_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MoveL_FK::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .rocos.JointArray q = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_q(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double speed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double acceleration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double radius = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool asynchronous = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          asynchronous_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoveL_FK::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocos.MoveL_FK)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rocos.JointArray q = 1;
  if (this->_internal_has_q()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::q(this), target, stream);
  }

  // double speed = 2;
  if (!(this->_internal_speed() <= 0 && this->_internal_speed() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_speed(), target);
  }

  // double acceleration = 3;
  if (!(this->_internal_acceleration() <= 0 && this->_internal_acceleration() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_acceleration(), target);
  }

  // double time = 4;
  if (!(this->_internal_time() <= 0 && this->_internal_time() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_time(), target);
  }

  // double radius = 5;
  if (!(this->_internal_radius() <= 0 && this->_internal_radius() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_radius(), target);
  }

  // bool asynchronous = 6;
  if (this->_internal_asynchronous() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_asynchronous(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocos.MoveL_FK)
  return target;
}

size_t MoveL_FK::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocos.MoveL_FK)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .rocos.JointArray q = 1;
  if (this->_internal_has_q()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *q_);
  }

  // double speed = 2;
  if (!(this->_internal_speed() <= 0 && this->_internal_speed() >= 0)) {
    total_size += 1 + 8;
  }

  // double acceleration = 3;
  if (!(this->_internal_acceleration() <= 0 && this->_internal_acceleration() >= 0)) {
    total_size += 1 + 8;
  }

  // double time = 4;
  if (!(this->_internal_time() <= 0 && this->_internal_time() >= 0)) {
    total_size += 1 + 8;
  }

  // double radius = 5;
  if (!(this->_internal_radius() <= 0 && this->_internal_radius() >= 0)) {
    total_size += 1 + 8;
  }

  // bool asynchronous = 6;
  if (this->_internal_asynchronous() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MoveL_FK::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MoveL_FK::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MoveL_FK::GetClassData() const { return &_class_data_; }

void MoveL_FK::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<MoveL_FK *>(to)->MergeFrom(
      static_cast<const MoveL_FK &>(from));
}


void MoveL_FK::MergeFrom(const MoveL_FK& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rocos.MoveL_FK)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_q()) {
    _internal_mutable_q()->::rocos::JointArray::MergeFrom(from._internal_q());
  }
  if (!(from._internal_speed() <= 0 && from._internal_speed() >= 0)) {
    _internal_set_speed(from._internal_speed());
  }
  if (!(from._internal_acceleration() <= 0 && from._internal_acceleration() >= 0)) {
    _internal_set_acceleration(from._internal_acceleration());
  }
  if (!(from._internal_time() <= 0 && from._internal_time() >= 0)) {
    _internal_set_time(from._internal_time());
  }
  if (!(from._internal_radius() <= 0 && from._internal_radius() >= 0)) {
    _internal_set_radius(from._internal_radius());
  }
  if (from._internal_asynchronous() != 0) {
    _internal_set_asynchronous(from._internal_asynchronous());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MoveL_FK::CopyFrom(const MoveL_FK& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocos.MoveL_FK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveL_FK::IsInitialized() const {
  return true;
}

void MoveL_FK::InternalSwap(MoveL_FK* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MoveL_FK, asynchronous_)
      + sizeof(MoveL_FK::asynchronous_)
      - PROTOBUF_FIELD_OFFSET(MoveL_FK, q_)>(
          reinterpret_cast<char*>(&q_),
          reinterpret_cast<char*>(&other->q_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveL_FK::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_robot_5fcommand_2eproto_getter, &descriptor_table_robot_5fcommand_2eproto_once,
      file_level_metadata_robot_5fcommand_2eproto[20]);
}

// ===================================================================

class MoveC::_Internal {
 public:
  static const ::rocos::SE3Pose& pose_via(const MoveC* msg);
  static const ::rocos::SE3Pose& pose_to(const MoveC* msg);
};

const ::rocos::SE3Pose&
MoveC::_Internal::pose_via(const MoveC* msg) {
  return *msg->pose_via_;
}
const ::rocos::SE3Pose&
MoveC::_Internal::pose_to(const MoveC* msg) {
  return *msg->pose_to_;
}
void MoveC::clear_pose_via() {
  if (GetArenaForAllocation() == nullptr && pose_via_ != nullptr) {
    delete pose_via_;
  }
  pose_via_ = nullptr;
}
void MoveC::clear_pose_to() {
  if (GetArenaForAllocation() == nullptr && pose_to_ != nullptr) {
    delete pose_to_;
  }
  pose_to_ = nullptr;
}
MoveC::MoveC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rocos.MoveC)
}
MoveC::MoveC(const MoveC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pose_via()) {
    pose_via_ = new ::rocos::SE3Pose(*from.pose_via_);
  } else {
    pose_via_ = nullptr;
  }
  if (from._internal_has_pose_to()) {
    pose_to_ = new ::rocos::SE3Pose(*from.pose_to_);
  } else {
    pose_to_ = nullptr;
  }
  ::memcpy(&speed_, &from.speed_,
    static_cast<size_t>(reinterpret_cast<char*>(&asynchronous_) -
    reinterpret_cast<char*>(&speed_)) + sizeof(asynchronous_));
  // @@protoc_insertion_point(copy_constructor:rocos.MoveC)
}

inline void MoveC::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pose_via_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&asynchronous_) -
    reinterpret_cast<char*>(&pose_via_)) + sizeof(asynchronous_));
}

MoveC::~MoveC() {
  // @@protoc_insertion_point(destructor:rocos.MoveC)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MoveC::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete pose_via_;
  if (this != internal_default_instance()) delete pose_to_;
}

void MoveC::ArenaDtor(void* object) {
  MoveC* _this = reinterpret_cast< MoveC* >(object);
  (void)_this;
}
void MoveC::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MoveC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MoveC::Clear() {
// @@protoc_insertion_point(message_clear_start:rocos.MoveC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && pose_via_ != nullptr) {
    delete pose_via_;
  }
  pose_via_ = nullptr;
  if (GetArenaForAllocation() == nullptr && pose_to_ != nullptr) {
    delete pose_to_;
  }
  pose_to_ = nullptr;
  ::memset(&speed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&asynchronous_) -
      reinterpret_cast<char*>(&speed_)) + sizeof(asynchronous_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MoveC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .rocos.SE3Pose pose_via = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose_via(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .rocos.SE3Pose pose_to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose_to(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double speed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double acceleration = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double radius = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .rocos.MoveC.OrientationMode mode = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mode(static_cast<::rocos::MoveC_OrientationMode>(val));
        } else goto handle_unusual;
        continue;
      // bool asynchronous = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          asynchronous_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoveC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocos.MoveC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rocos.SE3Pose pose_via = 1;
  if (this->_internal_has_pose_via()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pose_via(this), target, stream);
  }

  // .rocos.SE3Pose pose_to = 2;
  if (this->_internal_has_pose_to()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::pose_to(this), target, stream);
  }

  // double speed = 3;
  if (!(this->_internal_speed() <= 0 && this->_internal_speed() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_speed(), target);
  }

  // double acceleration = 4;
  if (!(this->_internal_acceleration() <= 0 && this->_internal_acceleration() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_acceleration(), target);
  }

  // double time = 5;
  if (!(this->_internal_time() <= 0 && this->_internal_time() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_time(), target);
  }

  // double radius = 6;
  if (!(this->_internal_radius() <= 0 && this->_internal_radius() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_radius(), target);
  }

  // .rocos.MoveC.OrientationMode mode = 7;
  if (this->_internal_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_mode(), target);
  }

  // bool asynchronous = 8;
  if (this->_internal_asynchronous() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_asynchronous(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocos.MoveC)
  return target;
}

size_t MoveC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocos.MoveC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .rocos.SE3Pose pose_via = 1;
  if (this->_internal_has_pose_via()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pose_via_);
  }

  // .rocos.SE3Pose pose_to = 2;
  if (this->_internal_has_pose_to()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pose_to_);
  }

  // double speed = 3;
  if (!(this->_internal_speed() <= 0 && this->_internal_speed() >= 0)) {
    total_size += 1 + 8;
  }

  // double acceleration = 4;
  if (!(this->_internal_acceleration() <= 0 && this->_internal_acceleration() >= 0)) {
    total_size += 1 + 8;
  }

  // double time = 5;
  if (!(this->_internal_time() <= 0 && this->_internal_time() >= 0)) {
    total_size += 1 + 8;
  }

  // double radius = 6;
  if (!(this->_internal_radius() <= 0 && this->_internal_radius() >= 0)) {
    total_size += 1 + 8;
  }

  // .rocos.MoveC.OrientationMode mode = 7;
  if (this->_internal_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mode());
  }

  // bool asynchronous = 8;
  if (this->_internal_asynchronous() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MoveC::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MoveC::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MoveC::GetClassData() const { return &_class_data_; }

void MoveC::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<MoveC *>(to)->MergeFrom(
      static_cast<const MoveC &>(from));
}


void MoveC::MergeFrom(const MoveC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rocos.MoveC)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pose_via()) {
    _internal_mutable_pose_via()->::rocos::SE3Pose::MergeFrom(from._internal_pose_via());
  }
  if (from._internal_has_pose_to()) {
    _internal_mutable_pose_to()->::rocos::SE3Pose::MergeFrom(from._internal_pose_to());
  }
  if (!(from._internal_speed() <= 0 && from._internal_speed() >= 0)) {
    _internal_set_speed(from._internal_speed());
  }
  if (!(from._internal_acceleration() <= 0 && from._internal_acceleration() >= 0)) {
    _internal_set_acceleration(from._internal_acceleration());
  }
  if (!(from._internal_time() <= 0 && from._internal_time() >= 0)) {
    _internal_set_time(from._internal_time());
  }
  if (!(from._internal_radius() <= 0 && from._internal_radius() >= 0)) {
    _internal_set_radius(from._internal_radius());
  }
  if (from._internal_mode() != 0) {
    _internal_set_mode(from._internal_mode());
  }
  if (from._internal_asynchronous() != 0) {
    _internal_set_asynchronous(from._internal_asynchronous());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MoveC::CopyFrom(const MoveC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocos.MoveC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveC::IsInitialized() const {
  return true;
}

void MoveC::InternalSwap(MoveC* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MoveC, asynchronous_)
      + sizeof(MoveC::asynchronous_)
      - PROTOBUF_FIELD_OFFSET(MoveC, pose_via_)>(
          reinterpret_cast<char*>(&pose_via_),
          reinterpret_cast<char*>(&other->pose_via_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveC::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_robot_5fcommand_2eproto_getter, &descriptor_table_robot_5fcommand_2eproto_once,
      file_level_metadata_robot_5fcommand_2eproto[21]);
}

// ===================================================================

class MoveP::_Internal {
 public:
  static const ::rocos::SE3Pose& pose(const MoveP* msg);
};

const ::rocos::SE3Pose&
MoveP::_Internal::pose(const MoveP* msg) {
  return *msg->pose_;
}
void MoveP::clear_pose() {
  if (GetArenaForAllocation() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
}
MoveP::MoveP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rocos.MoveP)
}
MoveP::MoveP(const MoveP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pose()) {
    pose_ = new ::rocos::SE3Pose(*from.pose_);
  } else {
    pose_ = nullptr;
  }
  ::memcpy(&speed_, &from.speed_,
    static_cast<size_t>(reinterpret_cast<char*>(&asynchronous_) -
    reinterpret_cast<char*>(&speed_)) + sizeof(asynchronous_));
  // @@protoc_insertion_point(copy_constructor:rocos.MoveP)
}

inline void MoveP::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pose_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&asynchronous_) -
    reinterpret_cast<char*>(&pose_)) + sizeof(asynchronous_));
}

MoveP::~MoveP() {
  // @@protoc_insertion_point(destructor:rocos.MoveP)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MoveP::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete pose_;
}

void MoveP::ArenaDtor(void* object) {
  MoveP* _this = reinterpret_cast< MoveP* >(object);
  (void)_this;
}
void MoveP::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MoveP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MoveP::Clear() {
// @@protoc_insertion_point(message_clear_start:rocos.MoveP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
  ::memset(&speed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&asynchronous_) -
      reinterpret_cast<char*>(&speed_)) + sizeof(asynchronous_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MoveP::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .rocos.SE3Pose pose = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double speed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double acceleration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double radius = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool asynchronous = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          asynchronous_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoveP::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocos.MoveP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rocos.SE3Pose pose = 1;
  if (this->_internal_has_pose()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pose(this), target, stream);
  }

  // double speed = 2;
  if (!(this->_internal_speed() <= 0 && this->_internal_speed() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_speed(), target);
  }

  // double acceleration = 3;
  if (!(this->_internal_acceleration() <= 0 && this->_internal_acceleration() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_acceleration(), target);
  }

  // double time = 4;
  if (!(this->_internal_time() <= 0 && this->_internal_time() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_time(), target);
  }

  // double radius = 5;
  if (!(this->_internal_radius() <= 0 && this->_internal_radius() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_radius(), target);
  }

  // bool asynchronous = 6;
  if (this->_internal_asynchronous() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_asynchronous(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocos.MoveP)
  return target;
}

size_t MoveP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocos.MoveP)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .rocos.SE3Pose pose = 1;
  if (this->_internal_has_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pose_);
  }

  // double speed = 2;
  if (!(this->_internal_speed() <= 0 && this->_internal_speed() >= 0)) {
    total_size += 1 + 8;
  }

  // double acceleration = 3;
  if (!(this->_internal_acceleration() <= 0 && this->_internal_acceleration() >= 0)) {
    total_size += 1 + 8;
  }

  // double time = 4;
  if (!(this->_internal_time() <= 0 && this->_internal_time() >= 0)) {
    total_size += 1 + 8;
  }

  // double radius = 5;
  if (!(this->_internal_radius() <= 0 && this->_internal_radius() >= 0)) {
    total_size += 1 + 8;
  }

  // bool asynchronous = 6;
  if (this->_internal_asynchronous() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MoveP::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MoveP::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MoveP::GetClassData() const { return &_class_data_; }

void MoveP::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<MoveP *>(to)->MergeFrom(
      static_cast<const MoveP &>(from));
}


void MoveP::MergeFrom(const MoveP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rocos.MoveP)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pose()) {
    _internal_mutable_pose()->::rocos::SE3Pose::MergeFrom(from._internal_pose());
  }
  if (!(from._internal_speed() <= 0 && from._internal_speed() >= 0)) {
    _internal_set_speed(from._internal_speed());
  }
  if (!(from._internal_acceleration() <= 0 && from._internal_acceleration() >= 0)) {
    _internal_set_acceleration(from._internal_acceleration());
  }
  if (!(from._internal_time() <= 0 && from._internal_time() >= 0)) {
    _internal_set_time(from._internal_time());
  }
  if (!(from._internal_radius() <= 0 && from._internal_radius() >= 0)) {
    _internal_set_radius(from._internal_radius());
  }
  if (from._internal_asynchronous() != 0) {
    _internal_set_asynchronous(from._internal_asynchronous());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MoveP::CopyFrom(const MoveP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocos.MoveP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveP::IsInitialized() const {
  return true;
}

void MoveP::InternalSwap(MoveP* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MoveP, asynchronous_)
      + sizeof(MoveP::asynchronous_)
      - PROTOBUF_FIELD_OFFSET(MoveP, pose_)>(
          reinterpret_cast<char*>(&pose_),
          reinterpret_cast<char*>(&other->pose_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveP::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_robot_5fcommand_2eproto_getter, &descriptor_table_robot_5fcommand_2eproto_once,
      file_level_metadata_robot_5fcommand_2eproto[22]);
}

// ===================================================================

class Path_PathEntry::_Internal {
 public:
  static const ::rocos::JointArray& q(const Path_PathEntry* msg);
  static const ::rocos::SE3Pose& pose(const Path_PathEntry* msg);
};

const ::rocos::JointArray&
Path_PathEntry::_Internal::q(const Path_PathEntry* msg) {
  return *msg->param_.q_;
}
const ::rocos::SE3Pose&
Path_PathEntry::_Internal::pose(const Path_PathEntry* msg) {
  return *msg->param_.pose_;
}
void Path_PathEntry::set_allocated_q(::rocos::JointArray* q) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_param();
  if (q) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(q));
    if (message_arena != submessage_arena) {
      q = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, q, submessage_arena);
    }
    set_has_q();
    param_.q_ = q;
  }
  // @@protoc_insertion_point(field_set_allocated:rocos.Path.PathEntry.q)
}
void Path_PathEntry::clear_q() {
  if (_internal_has_q()) {
    if (GetArenaForAllocation() == nullptr) {
      delete param_.q_;
    }
    clear_has_param();
  }
}
void Path_PathEntry::set_allocated_pose(::rocos::SE3Pose* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_param();
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose));
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    set_has_pose();
    param_.pose_ = pose;
  }
  // @@protoc_insertion_point(field_set_allocated:rocos.Path.PathEntry.pose)
}
void Path_PathEntry::clear_pose() {
  if (_internal_has_pose()) {
    if (GetArenaForAllocation() == nullptr) {
      delete param_.pose_;
    }
    clear_has_param();
  }
}
Path_PathEntry::Path_PathEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rocos.Path.PathEntry)
}
Path_PathEntry::Path_PathEntry(const Path_PathEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_ = from.type_;
  clear_has_param();
  switch (from.param_case()) {
    case kQ: {
      _internal_mutable_q()->::rocos::JointArray::MergeFrom(from._internal_q());
      break;
    }
    case kPose: {
      _internal_mutable_pose()->::rocos::SE3Pose::MergeFrom(from._internal_pose());
      break;
    }
    case PARAM_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:rocos.Path.PathEntry)
}

inline void Path_PathEntry::SharedCtor() {
type_ = 0;
clear_has_param();
}

Path_PathEntry::~Path_PathEntry() {
  // @@protoc_insertion_point(destructor:rocos.Path.PathEntry)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Path_PathEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_param()) {
    clear_param();
  }
}

void Path_PathEntry::ArenaDtor(void* object) {
  Path_PathEntry* _this = reinterpret_cast< Path_PathEntry* >(object);
  (void)_this;
}
void Path_PathEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Path_PathEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Path_PathEntry::clear_param() {
// @@protoc_insertion_point(one_of_clear_start:rocos.Path.PathEntry)
  switch (param_case()) {
    case kQ: {
      if (GetArenaForAllocation() == nullptr) {
        delete param_.q_;
      }
      break;
    }
    case kPose: {
      if (GetArenaForAllocation() == nullptr) {
        delete param_.pose_;
      }
      break;
    }
    case PARAM_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PARAM_NOT_SET;
}


void Path_PathEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:rocos.Path.PathEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0;
  clear_param();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Path_PathEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .rocos.Path.PathEntry.MoveType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::rocos::Path_PathEntry_MoveType>(val));
        } else goto handle_unusual;
        continue;
      // .rocos.JointArray q = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_q(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .rocos.SE3Pose pose = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Path_PathEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocos.Path.PathEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rocos.Path.PathEntry.MoveType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .rocos.JointArray q = 2;
  if (_internal_has_q()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::q(this), target, stream);
  }

  // .rocos.SE3Pose pose = 3;
  if (_internal_has_pose()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::pose(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocos.Path.PathEntry)
  return target;
}

size_t Path_PathEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocos.Path.PathEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .rocos.Path.PathEntry.MoveType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  switch (param_case()) {
    // .rocos.JointArray q = 2;
    case kQ: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *param_.q_);
      break;
    }
    // .rocos.SE3Pose pose = 3;
    case kPose: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *param_.pose_);
      break;
    }
    case PARAM_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Path_PathEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Path_PathEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Path_PathEntry::GetClassData() const { return &_class_data_; }

void Path_PathEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Path_PathEntry *>(to)->MergeFrom(
      static_cast<const Path_PathEntry &>(from));
}


void Path_PathEntry::MergeFrom(const Path_PathEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rocos.Path.PathEntry)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  switch (from.param_case()) {
    case kQ: {
      _internal_mutable_q()->::rocos::JointArray::MergeFrom(from._internal_q());
      break;
    }
    case kPose: {
      _internal_mutable_pose()->::rocos::SE3Pose::MergeFrom(from._internal_pose());
      break;
    }
    case PARAM_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Path_PathEntry::CopyFrom(const Path_PathEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocos.Path.PathEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Path_PathEntry::IsInitialized() const {
  return true;
}

void Path_PathEntry::InternalSwap(Path_PathEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(type_, other->type_);
  swap(param_, other->param_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Path_PathEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_robot_5fcommand_2eproto_getter, &descriptor_table_robot_5fcommand_2eproto_once,
      file_level_metadata_robot_5fcommand_2eproto[23]);
}

// ===================================================================

class Path::_Internal {
 public:
};

Path::Path(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  waypoints_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rocos.Path)
}
Path::Path(const Path& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      waypoints_(from.waypoints_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:rocos.Path)
}

inline void Path::SharedCtor() {
}

Path::~Path() {
  // @@protoc_insertion_point(destructor:rocos.Path)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Path::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Path::ArenaDtor(void* object) {
  Path* _this = reinterpret_cast< Path* >(object);
  (void)_this;
}
void Path::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Path::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Path::Clear() {
// @@protoc_insertion_point(message_clear_start:rocos.Path)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  waypoints_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Path::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .rocos.Path.PathEntry waypoints = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_waypoints(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Path::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocos.Path)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .rocos.Path.PathEntry waypoints = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_waypoints_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_waypoints(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocos.Path)
  return target;
}

size_t Path::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocos.Path)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .rocos.Path.PathEntry waypoints = 1;
  total_size += 1UL * this->_internal_waypoints_size();
  for (const auto& msg : this->waypoints_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Path::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Path::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Path::GetClassData() const { return &_class_data_; }

void Path::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Path *>(to)->MergeFrom(
      static_cast<const Path &>(from));
}


void Path::MergeFrom(const Path& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rocos.Path)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  waypoints_.MergeFrom(from.waypoints_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Path::CopyFrom(const Path& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocos.Path)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Path::IsInitialized() const {
  return true;
}

void Path::InternalSwap(Path* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  waypoints_.InternalSwap(&other->waypoints_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Path::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_robot_5fcommand_2eproto_getter, &descriptor_table_robot_5fcommand_2eproto_once,
      file_level_metadata_robot_5fcommand_2eproto[24]);
}

// ===================================================================

class MovePath::_Internal {
 public:
  static const ::rocos::Path& path(const MovePath* msg);
};

const ::rocos::Path&
MovePath::_Internal::path(const MovePath* msg) {
  return *msg->path_;
}
MovePath::MovePath(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rocos.MovePath)
}
MovePath::MovePath(const MovePath& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_path()) {
    path_ = new ::rocos::Path(*from.path_);
  } else {
    path_ = nullptr;
  }
  asynchronous_ = from.asynchronous_;
  // @@protoc_insertion_point(copy_constructor:rocos.MovePath)
}

inline void MovePath::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&path_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&asynchronous_) -
    reinterpret_cast<char*>(&path_)) + sizeof(asynchronous_));
}

MovePath::~MovePath() {
  // @@protoc_insertion_point(destructor:rocos.MovePath)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MovePath::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete path_;
}

void MovePath::ArenaDtor(void* object) {
  MovePath* _this = reinterpret_cast< MovePath* >(object);
  (void)_this;
}
void MovePath::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MovePath::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MovePath::Clear() {
// @@protoc_insertion_point(message_clear_start:rocos.MovePath)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && path_ != nullptr) {
    delete path_;
  }
  path_ = nullptr;
  asynchronous_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MovePath::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .rocos.Path path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_path(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool asynchronous = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          asynchronous_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MovePath::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocos.MovePath)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rocos.Path path = 1;
  if (this->_internal_has_path()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::path(this), target, stream);
  }

  // bool asynchronous = 2;
  if (this->_internal_asynchronous() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_asynchronous(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocos.MovePath)
  return target;
}

size_t MovePath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocos.MovePath)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .rocos.Path path = 1;
  if (this->_internal_has_path()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *path_);
  }

  // bool asynchronous = 2;
  if (this->_internal_asynchronous() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MovePath::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MovePath::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MovePath::GetClassData() const { return &_class_data_; }

void MovePath::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<MovePath *>(to)->MergeFrom(
      static_cast<const MovePath &>(from));
}


void MovePath::MergeFrom(const MovePath& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rocos.MovePath)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_path()) {
    _internal_mutable_path()->::rocos::Path::MergeFrom(from._internal_path());
  }
  if (from._internal_asynchronous() != 0) {
    _internal_set_asynchronous(from._internal_asynchronous());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MovePath::CopyFrom(const MovePath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocos.MovePath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MovePath::IsInitialized() const {
  return true;
}

void MovePath::InternalSwap(MovePath* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MovePath, asynchronous_)
      + sizeof(MovePath::asynchronous_)
      - PROTOBUF_FIELD_OFFSET(MovePath, path_)>(
          reinterpret_cast<char*>(&path_),
          reinterpret_cast<char*>(&other->path_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MovePath::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_robot_5fcommand_2eproto_getter, &descriptor_table_robot_5fcommand_2eproto_once,
      file_level_metadata_robot_5fcommand_2eproto[25]);
}

// ===================================================================

class MotionCommand::_Internal {
 public:
  static const ::rocos::MoveJ& move_j(const MotionCommand* msg);
  static const ::rocos::MoveJ_IK& move_j_ik(const MotionCommand* msg);
  static const ::rocos::MoveL& move_l(const MotionCommand* msg);
  static const ::rocos::MoveL_FK& move_l_fk(const MotionCommand* msg);
  static const ::rocos::MoveC& move_c(const MotionCommand* msg);
  static const ::rocos::MoveP& move_p(const MotionCommand* msg);
  static const ::rocos::MovePath& move_path(const MotionCommand* msg);
};

const ::rocos::MoveJ&
MotionCommand::_Internal::move_j(const MotionCommand* msg) {
  return *msg->command_.move_j_;
}
const ::rocos::MoveJ_IK&
MotionCommand::_Internal::move_j_ik(const MotionCommand* msg) {
  return *msg->command_.move_j_ik_;
}
const ::rocos::MoveL&
MotionCommand::_Internal::move_l(const MotionCommand* msg) {
  return *msg->command_.move_l_;
}
const ::rocos::MoveL_FK&
MotionCommand::_Internal::move_l_fk(const MotionCommand* msg) {
  return *msg->command_.move_l_fk_;
}
const ::rocos::MoveC&
MotionCommand::_Internal::move_c(const MotionCommand* msg) {
  return *msg->command_.move_c_;
}
const ::rocos::MoveP&
MotionCommand::_Internal::move_p(const MotionCommand* msg) {
  return *msg->command_.move_p_;
}
const ::rocos::MovePath&
MotionCommand::_Internal::move_path(const MotionCommand* msg) {
  return *msg->command_.move_path_;
}
void MotionCommand::set_allocated_move_j(::rocos::MoveJ* move_j) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_command();
  if (move_j) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::rocos::MoveJ>::GetOwningArena(move_j);
    if (message_arena != submessage_arena) {
      move_j = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, move_j, submessage_arena);
    }
    set_has_move_j();
    command_.move_j_ = move_j;
  }
  // @@protoc_insertion_point(field_set_allocated:rocos.MotionCommand.move_j)
}
void MotionCommand::set_allocated_move_j_ik(::rocos::MoveJ_IK* move_j_ik) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_command();
  if (move_j_ik) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::rocos::MoveJ_IK>::GetOwningArena(move_j_ik);
    if (message_arena != submessage_arena) {
      move_j_ik = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, move_j_ik, submessage_arena);
    }
    set_has_move_j_ik();
    command_.move_j_ik_ = move_j_ik;
  }
  // @@protoc_insertion_point(field_set_allocated:rocos.MotionCommand.move_j_ik)
}
void MotionCommand::set_allocated_move_l(::rocos::MoveL* move_l) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_command();
  if (move_l) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::rocos::MoveL>::GetOwningArena(move_l);
    if (message_arena != submessage_arena) {
      move_l = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, move_l, submessage_arena);
    }
    set_has_move_l();
    command_.move_l_ = move_l;
  }
  // @@protoc_insertion_point(field_set_allocated:rocos.MotionCommand.move_l)
}
void MotionCommand::set_allocated_move_l_fk(::rocos::MoveL_FK* move_l_fk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_command();
  if (move_l_fk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::rocos::MoveL_FK>::GetOwningArena(move_l_fk);
    if (message_arena != submessage_arena) {
      move_l_fk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, move_l_fk, submessage_arena);
    }
    set_has_move_l_fk();
    command_.move_l_fk_ = move_l_fk;
  }
  // @@protoc_insertion_point(field_set_allocated:rocos.MotionCommand.move_l_fk)
}
void MotionCommand::set_allocated_move_c(::rocos::MoveC* move_c) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_command();
  if (move_c) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::rocos::MoveC>::GetOwningArena(move_c);
    if (message_arena != submessage_arena) {
      move_c = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, move_c, submessage_arena);
    }
    set_has_move_c();
    command_.move_c_ = move_c;
  }
  // @@protoc_insertion_point(field_set_allocated:rocos.MotionCommand.move_c)
}
void MotionCommand::set_allocated_move_p(::rocos::MoveP* move_p) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_command();
  if (move_p) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::rocos::MoveP>::GetOwningArena(move_p);
    if (message_arena != submessage_arena) {
      move_p = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, move_p, submessage_arena);
    }
    set_has_move_p();
    command_.move_p_ = move_p;
  }
  // @@protoc_insertion_point(field_set_allocated:rocos.MotionCommand.move_p)
}
void MotionCommand::set_allocated_move_path(::rocos::MovePath* move_path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_command();
  if (move_path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::rocos::MovePath>::GetOwningArena(move_path);
    if (message_arena != submessage_arena) {
      move_path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, move_path, submessage_arena);
    }
    set_has_move_path();
    command_.move_path_ = move_path;
  }
  // @@protoc_insertion_point(field_set_allocated:rocos.MotionCommand.move_path)
}
MotionCommand::MotionCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rocos.MotionCommand)
}
MotionCommand::MotionCommand(const MotionCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_command();
  switch (from.command_case()) {
    case kMoveJ: {
      _internal_mutable_move_j()->::rocos::MoveJ::MergeFrom(from._internal_move_j());
      break;
    }
    case kMoveJIk: {
      _internal_mutable_move_j_ik()->::rocos::MoveJ_IK::MergeFrom(from._internal_move_j_ik());
      break;
    }
    case kMoveL: {
      _internal_mutable_move_l()->::rocos::MoveL::MergeFrom(from._internal_move_l());
      break;
    }
    case kMoveLFk: {
      _internal_mutable_move_l_fk()->::rocos::MoveL_FK::MergeFrom(from._internal_move_l_fk());
      break;
    }
    case kMoveC: {
      _internal_mutable_move_c()->::rocos::MoveC::MergeFrom(from._internal_move_c());
      break;
    }
    case kMoveP: {
      _internal_mutable_move_p()->::rocos::MoveP::MergeFrom(from._internal_move_p());
      break;
    }
    case kMovePath: {
      _internal_mutable_move_path()->::rocos::MovePath::MergeFrom(from._internal_move_path());
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:rocos.MotionCommand)
}

inline void MotionCommand::SharedCtor() {
clear_has_command();
}

MotionCommand::~MotionCommand() {
  // @@protoc_insertion_point(destructor:rocos.MotionCommand)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MotionCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_command()) {
    clear_command();
  }
}

void MotionCommand::ArenaDtor(void* object) {
  MotionCommand* _this = reinterpret_cast< MotionCommand* >(object);
  (void)_this;
}
void MotionCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MotionCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MotionCommand::clear_command() {
// @@protoc_insertion_point(one_of_clear_start:rocos.MotionCommand)
  switch (command_case()) {
    case kMoveJ: {
      if (GetArenaForAllocation() == nullptr) {
        delete command_.move_j_;
      }
      break;
    }
    case kMoveJIk: {
      if (GetArenaForAllocation() == nullptr) {
        delete command_.move_j_ik_;
      }
      break;
    }
    case kMoveL: {
      if (GetArenaForAllocation() == nullptr) {
        delete command_.move_l_;
      }
      break;
    }
    case kMoveLFk: {
      if (GetArenaForAllocation() == nullptr) {
        delete command_.move_l_fk_;
      }
      break;
    }
    case kMoveC: {
      if (GetArenaForAllocation() == nullptr) {
        delete command_.move_c_;
      }
      break;
    }
    case kMoveP: {
      if (GetArenaForAllocation() == nullptr) {
        delete command_.move_p_;
      }
      break;
    }
    case kMovePath: {
      if (GetArenaForAllocation() == nullptr) {
        delete command_.move_path_;
      }
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = COMMAND_NOT_SET;
}


void MotionCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:rocos.MotionCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_command();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MotionCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .rocos.MoveJ move_j = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_move_j(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .rocos.MoveJ_IK move_j_ik = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_move_j_ik(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .rocos.MoveL move_l = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_move_l(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .rocos.MoveL_FK move_l_fk = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_move_l_fk(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .rocos.MoveC move_c = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_move_c(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .rocos.MoveP move_p = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_move_p(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .rocos.MovePath move_path = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_move_path(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MotionCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocos.MotionCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rocos.MoveJ move_j = 1;
  if (_internal_has_move_j()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::move_j(this), target, stream);
  }

  // .rocos.MoveJ_IK move_j_ik = 2;
  if (_internal_has_move_j_ik()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::move_j_ik(this), target, stream);
  }

  // .rocos.MoveL move_l = 3;
  if (_internal_has_move_l()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::move_l(this), target, stream);
  }

  // .rocos.MoveL_FK move_l_fk = 4;
  if (_internal_has_move_l_fk()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::move_l_fk(this), target, stream);
  }

  // .rocos.MoveC move_c = 5;
  if (_internal_has_move_c()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::move_c(this), target, stream);
  }

  // .rocos.MoveP move_p = 6;
  if (_internal_has_move_p()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::move_p(this), target, stream);
  }

  // .rocos.MovePath move_path = 7;
  if (_internal_has_move_path()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::move_path(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocos.MotionCommand)
  return target;
}

size_t MotionCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocos.MotionCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (command_case()) {
    // .rocos.MoveJ move_j = 1;
    case kMoveJ: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.move_j_);
      break;
    }
    // .rocos.MoveJ_IK move_j_ik = 2;
    case kMoveJIk: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.move_j_ik_);
      break;
    }
    // .rocos.MoveL move_l = 3;
    case kMoveL: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.move_l_);
      break;
    }
    // .rocos.MoveL_FK move_l_fk = 4;
    case kMoveLFk: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.move_l_fk_);
      break;
    }
    // .rocos.MoveC move_c = 5;
    case kMoveC: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.move_c_);
      break;
    }
    // .rocos.MoveP move_p = 6;
    case kMoveP: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.move_p_);
      break;
    }
    // .rocos.MovePath move_path = 7;
    case kMovePath: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.move_path_);
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MotionCommand::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MotionCommand::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MotionCommand::GetClassData() const { return &_class_data_; }

void MotionCommand::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<MotionCommand *>(to)->MergeFrom(
      static_cast<const MotionCommand &>(from));
}


void MotionCommand::MergeFrom(const MotionCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rocos.MotionCommand)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.command_case()) {
    case kMoveJ: {
      _internal_mutable_move_j()->::rocos::MoveJ::MergeFrom(from._internal_move_j());
      break;
    }
    case kMoveJIk: {
      _internal_mutable_move_j_ik()->::rocos::MoveJ_IK::MergeFrom(from._internal_move_j_ik());
      break;
    }
    case kMoveL: {
      _internal_mutable_move_l()->::rocos::MoveL::MergeFrom(from._internal_move_l());
      break;
    }
    case kMoveLFk: {
      _internal_mutable_move_l_fk()->::rocos::MoveL_FK::MergeFrom(from._internal_move_l_fk());
      break;
    }
    case kMoveC: {
      _internal_mutable_move_c()->::rocos::MoveC::MergeFrom(from._internal_move_c());
      break;
    }
    case kMoveP: {
      _internal_mutable_move_p()->::rocos::MoveP::MergeFrom(from._internal_move_p());
      break;
    }
    case kMovePath: {
      _internal_mutable_move_path()->::rocos::MovePath::MergeFrom(from._internal_move_path());
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MotionCommand::CopyFrom(const MotionCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocos.MotionCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MotionCommand::IsInitialized() const {
  return true;
}

void MotionCommand::InternalSwap(MotionCommand* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(command_, other->command_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MotionCommand::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_robot_5fcommand_2eproto_getter, &descriptor_table_robot_5fcommand_2eproto_once,
      file_level_metadata_robot_5fcommand_2eproto[26]);
}

// ===================================================================

class DraggingCommand::_Internal {
 public:
};

DraggingCommand::DraggingCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rocos.DraggingCommand)
}
DraggingCommand::DraggingCommand(const DraggingCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&flag_, &from.flag_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_acceleration_) -
    reinterpret_cast<char*>(&flag_)) + sizeof(max_acceleration_));
  // @@protoc_insertion_point(copy_constructor:rocos.DraggingCommand)
}

inline void DraggingCommand::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&flag_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&max_acceleration_) -
    reinterpret_cast<char*>(&flag_)) + sizeof(max_acceleration_));
}

DraggingCommand::~DraggingCommand() {
  // @@protoc_insertion_point(destructor:rocos.DraggingCommand)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DraggingCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DraggingCommand::ArenaDtor(void* object) {
  DraggingCommand* _this = reinterpret_cast< DraggingCommand* >(object);
  (void)_this;
}
void DraggingCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DraggingCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DraggingCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:rocos.DraggingCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&flag_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_acceleration_) -
      reinterpret_cast<char*>(&flag_)) + sizeof(max_acceleration_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DraggingCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .rocos.DraggingFlag flag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_flag(static_cast<::rocos::DraggingFlag>(val));
        } else goto handle_unusual;
        continue;
      // .rocos.DraggingDirection dir = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_dir(static_cast<::rocos::DraggingDirection>(val));
        } else goto handle_unusual;
        continue;
      // double max_speed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          max_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double max_acceleration = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          max_acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DraggingCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocos.DraggingCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rocos.DraggingFlag flag = 1;
  if (this->_internal_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_flag(), target);
  }

  // .rocos.DraggingDirection dir = 2;
  if (this->_internal_dir() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_dir(), target);
  }

  // double max_speed = 3;
  if (!(this->_internal_max_speed() <= 0 && this->_internal_max_speed() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_max_speed(), target);
  }

  // double max_acceleration = 4;
  if (!(this->_internal_max_acceleration() <= 0 && this->_internal_max_acceleration() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_max_acceleration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocos.DraggingCommand)
  return target;
}

size_t DraggingCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocos.DraggingCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .rocos.DraggingFlag flag = 1;
  if (this->_internal_flag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_flag());
  }

  // .rocos.DraggingDirection dir = 2;
  if (this->_internal_dir() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_dir());
  }

  // double max_speed = 3;
  if (!(this->_internal_max_speed() <= 0 && this->_internal_max_speed() >= 0)) {
    total_size += 1 + 8;
  }

  // double max_acceleration = 4;
  if (!(this->_internal_max_acceleration() <= 0 && this->_internal_max_acceleration() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DraggingCommand::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DraggingCommand::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DraggingCommand::GetClassData() const { return &_class_data_; }

void DraggingCommand::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DraggingCommand *>(to)->MergeFrom(
      static_cast<const DraggingCommand &>(from));
}


void DraggingCommand::MergeFrom(const DraggingCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rocos.DraggingCommand)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_flag() != 0) {
    _internal_set_flag(from._internal_flag());
  }
  if (from._internal_dir() != 0) {
    _internal_set_dir(from._internal_dir());
  }
  if (!(from._internal_max_speed() <= 0 && from._internal_max_speed() >= 0)) {
    _internal_set_max_speed(from._internal_max_speed());
  }
  if (!(from._internal_max_acceleration() <= 0 && from._internal_max_acceleration() >= 0)) {
    _internal_set_max_acceleration(from._internal_max_acceleration());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DraggingCommand::CopyFrom(const DraggingCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocos.DraggingCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DraggingCommand::IsInitialized() const {
  return true;
}

void DraggingCommand::InternalSwap(DraggingCommand* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DraggingCommand, max_acceleration_)
      + sizeof(DraggingCommand::max_acceleration_)
      - PROTOBUF_FIELD_OFFSET(DraggingCommand, flag_)>(
          reinterpret_cast<char*>(&flag_),
          reinterpret_cast<char*>(&other->flag_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DraggingCommand::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_robot_5fcommand_2eproto_getter, &descriptor_table_robot_5fcommand_2eproto_once,
      file_level_metadata_robot_5fcommand_2eproto[27]);
}

// ===================================================================

class RobotCommand::_Internal {
 public:
  static const ::rocos::Enabled& enabled(const RobotCommand* msg);
  static const ::rocos::Disabled& disabled(const RobotCommand* msg);
  static const ::rocos::MoveJ& move_j(const RobotCommand* msg);
  static const ::rocos::SingleAxisCommand& single_axis_command(const RobotCommand* msg);
  static const ::rocos::MultiAxisCommand& multi_axis_command(const RobotCommand* msg);
  static const ::rocos::MotionCommand& motion_command(const RobotCommand* msg);
  static const ::rocos::DraggingCommand& dragging_command(const RobotCommand* msg);
};

const ::rocos::Enabled&
RobotCommand::_Internal::enabled(const RobotCommand* msg) {
  return *msg->command_.enabled_;
}
const ::rocos::Disabled&
RobotCommand::_Internal::disabled(const RobotCommand* msg) {
  return *msg->command_.disabled_;
}
const ::rocos::MoveJ&
RobotCommand::_Internal::move_j(const RobotCommand* msg) {
  return *msg->command_.move_j_;
}
const ::rocos::SingleAxisCommand&
RobotCommand::_Internal::single_axis_command(const RobotCommand* msg) {
  return *msg->command_.single_axis_command_;
}
const ::rocos::MultiAxisCommand&
RobotCommand::_Internal::multi_axis_command(const RobotCommand* msg) {
  return *msg->command_.multi_axis_command_;
}
const ::rocos::MotionCommand&
RobotCommand::_Internal::motion_command(const RobotCommand* msg) {
  return *msg->command_.motion_command_;
}
const ::rocos::DraggingCommand&
RobotCommand::_Internal::dragging_command(const RobotCommand* msg) {
  return *msg->command_.dragging_command_;
}
void RobotCommand::set_allocated_enabled(::rocos::Enabled* enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_command();
  if (enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::rocos::Enabled>::GetOwningArena(enabled);
    if (message_arena != submessage_arena) {
      enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, enabled, submessage_arena);
    }
    set_has_enabled();
    command_.enabled_ = enabled;
  }
  // @@protoc_insertion_point(field_set_allocated:rocos.RobotCommand.enabled)
}
void RobotCommand::set_allocated_disabled(::rocos::Disabled* disabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_command();
  if (disabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::rocos::Disabled>::GetOwningArena(disabled);
    if (message_arena != submessage_arena) {
      disabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, disabled, submessage_arena);
    }
    set_has_disabled();
    command_.disabled_ = disabled;
  }
  // @@protoc_insertion_point(field_set_allocated:rocos.RobotCommand.disabled)
}
void RobotCommand::set_allocated_move_j(::rocos::MoveJ* move_j) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_command();
  if (move_j) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::rocos::MoveJ>::GetOwningArena(move_j);
    if (message_arena != submessage_arena) {
      move_j = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, move_j, submessage_arena);
    }
    set_has_move_j();
    command_.move_j_ = move_j;
  }
  // @@protoc_insertion_point(field_set_allocated:rocos.RobotCommand.move_j)
}
void RobotCommand::set_allocated_single_axis_command(::rocos::SingleAxisCommand* single_axis_command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_command();
  if (single_axis_command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::rocos::SingleAxisCommand>::GetOwningArena(single_axis_command);
    if (message_arena != submessage_arena) {
      single_axis_command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, single_axis_command, submessage_arena);
    }
    set_has_single_axis_command();
    command_.single_axis_command_ = single_axis_command;
  }
  // @@protoc_insertion_point(field_set_allocated:rocos.RobotCommand.single_axis_command)
}
void RobotCommand::set_allocated_multi_axis_command(::rocos::MultiAxisCommand* multi_axis_command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_command();
  if (multi_axis_command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::rocos::MultiAxisCommand>::GetOwningArena(multi_axis_command);
    if (message_arena != submessage_arena) {
      multi_axis_command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, multi_axis_command, submessage_arena);
    }
    set_has_multi_axis_command();
    command_.multi_axis_command_ = multi_axis_command;
  }
  // @@protoc_insertion_point(field_set_allocated:rocos.RobotCommand.multi_axis_command)
}
void RobotCommand::set_allocated_motion_command(::rocos::MotionCommand* motion_command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_command();
  if (motion_command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::rocos::MotionCommand>::GetOwningArena(motion_command);
    if (message_arena != submessage_arena) {
      motion_command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, motion_command, submessage_arena);
    }
    set_has_motion_command();
    command_.motion_command_ = motion_command;
  }
  // @@protoc_insertion_point(field_set_allocated:rocos.RobotCommand.motion_command)
}
void RobotCommand::set_allocated_dragging_command(::rocos::DraggingCommand* dragging_command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_command();
  if (dragging_command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::rocos::DraggingCommand>::GetOwningArena(dragging_command);
    if (message_arena != submessage_arena) {
      dragging_command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dragging_command, submessage_arena);
    }
    set_has_dragging_command();
    command_.dragging_command_ = dragging_command;
  }
  // @@protoc_insertion_point(field_set_allocated:rocos.RobotCommand.dragging_command)
}
RobotCommand::RobotCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rocos.RobotCommand)
}
RobotCommand::RobotCommand(const RobotCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_command();
  switch (from.command_case()) {
    case kEnabled: {
      _internal_mutable_enabled()->::rocos::Enabled::MergeFrom(from._internal_enabled());
      break;
    }
    case kDisabled: {
      _internal_mutable_disabled()->::rocos::Disabled::MergeFrom(from._internal_disabled());
      break;
    }
    case kMoveJ: {
      _internal_mutable_move_j()->::rocos::MoveJ::MergeFrom(from._internal_move_j());
      break;
    }
    case kSingleAxisCommand: {
      _internal_mutable_single_axis_command()->::rocos::SingleAxisCommand::MergeFrom(from._internal_single_axis_command());
      break;
    }
    case kMultiAxisCommand: {
      _internal_mutable_multi_axis_command()->::rocos::MultiAxisCommand::MergeFrom(from._internal_multi_axis_command());
      break;
    }
    case kMotionCommand: {
      _internal_mutable_motion_command()->::rocos::MotionCommand::MergeFrom(from._internal_motion_command());
      break;
    }
    case kDraggingCommand: {
      _internal_mutable_dragging_command()->::rocos::DraggingCommand::MergeFrom(from._internal_dragging_command());
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:rocos.RobotCommand)
}

inline void RobotCommand::SharedCtor() {
clear_has_command();
}

RobotCommand::~RobotCommand() {
  // @@protoc_insertion_point(destructor:rocos.RobotCommand)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RobotCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_command()) {
    clear_command();
  }
}

void RobotCommand::ArenaDtor(void* object) {
  RobotCommand* _this = reinterpret_cast< RobotCommand* >(object);
  (void)_this;
}
void RobotCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RobotCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RobotCommand::clear_command() {
// @@protoc_insertion_point(one_of_clear_start:rocos.RobotCommand)
  switch (command_case()) {
    case kEnabled: {
      if (GetArenaForAllocation() == nullptr) {
        delete command_.enabled_;
      }
      break;
    }
    case kDisabled: {
      if (GetArenaForAllocation() == nullptr) {
        delete command_.disabled_;
      }
      break;
    }
    case kMoveJ: {
      if (GetArenaForAllocation() == nullptr) {
        delete command_.move_j_;
      }
      break;
    }
    case kSingleAxisCommand: {
      if (GetArenaForAllocation() == nullptr) {
        delete command_.single_axis_command_;
      }
      break;
    }
    case kMultiAxisCommand: {
      if (GetArenaForAllocation() == nullptr) {
        delete command_.multi_axis_command_;
      }
      break;
    }
    case kMotionCommand: {
      if (GetArenaForAllocation() == nullptr) {
        delete command_.motion_command_;
      }
      break;
    }
    case kDraggingCommand: {
      if (GetArenaForAllocation() == nullptr) {
        delete command_.dragging_command_;
      }
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = COMMAND_NOT_SET;
}


void RobotCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:rocos.RobotCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_command();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RobotCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .rocos.Enabled enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .rocos.Disabled disabled = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_disabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .rocos.MoveJ move_j = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_move_j(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .rocos.SingleAxisCommand single_axis_command = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_single_axis_command(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .rocos.MultiAxisCommand multi_axis_command = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_multi_axis_command(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .rocos.MotionCommand motion_command = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_motion_command(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .rocos.DraggingCommand dragging_command = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_dragging_command(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RobotCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocos.RobotCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rocos.Enabled enabled = 1;
  if (_internal_has_enabled()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::enabled(this), target, stream);
  }

  // .rocos.Disabled disabled = 2;
  if (_internal_has_disabled()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::disabled(this), target, stream);
  }

  // .rocos.MoveJ move_j = 3;
  if (_internal_has_move_j()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::move_j(this), target, stream);
  }

  // .rocos.SingleAxisCommand single_axis_command = 4;
  if (_internal_has_single_axis_command()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::single_axis_command(this), target, stream);
  }

  // .rocos.MultiAxisCommand multi_axis_command = 5;
  if (_internal_has_multi_axis_command()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::multi_axis_command(this), target, stream);
  }

  // .rocos.MotionCommand motion_command = 6;
  if (_internal_has_motion_command()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::motion_command(this), target, stream);
  }

  // .rocos.DraggingCommand dragging_command = 7;
  if (_internal_has_dragging_command()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::dragging_command(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocos.RobotCommand)
  return target;
}

size_t RobotCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocos.RobotCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (command_case()) {
    // .rocos.Enabled enabled = 1;
    case kEnabled: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.enabled_);
      break;
    }
    // .rocos.Disabled disabled = 2;
    case kDisabled: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.disabled_);
      break;
    }
    // .rocos.MoveJ move_j = 3;
    case kMoveJ: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.move_j_);
      break;
    }
    // .rocos.SingleAxisCommand single_axis_command = 4;
    case kSingleAxisCommand: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.single_axis_command_);
      break;
    }
    // .rocos.MultiAxisCommand multi_axis_command = 5;
    case kMultiAxisCommand: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.multi_axis_command_);
      break;
    }
    // .rocos.MotionCommand motion_command = 6;
    case kMotionCommand: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.motion_command_);
      break;
    }
    // .rocos.DraggingCommand dragging_command = 7;
    case kDraggingCommand: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.dragging_command_);
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RobotCommand::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RobotCommand::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RobotCommand::GetClassData() const { return &_class_data_; }

void RobotCommand::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<RobotCommand *>(to)->MergeFrom(
      static_cast<const RobotCommand &>(from));
}


void RobotCommand::MergeFrom(const RobotCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rocos.RobotCommand)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.command_case()) {
    case kEnabled: {
      _internal_mutable_enabled()->::rocos::Enabled::MergeFrom(from._internal_enabled());
      break;
    }
    case kDisabled: {
      _internal_mutable_disabled()->::rocos::Disabled::MergeFrom(from._internal_disabled());
      break;
    }
    case kMoveJ: {
      _internal_mutable_move_j()->::rocos::MoveJ::MergeFrom(from._internal_move_j());
      break;
    }
    case kSingleAxisCommand: {
      _internal_mutable_single_axis_command()->::rocos::SingleAxisCommand::MergeFrom(from._internal_single_axis_command());
      break;
    }
    case kMultiAxisCommand: {
      _internal_mutable_multi_axis_command()->::rocos::MultiAxisCommand::MergeFrom(from._internal_multi_axis_command());
      break;
    }
    case kMotionCommand: {
      _internal_mutable_motion_command()->::rocos::MotionCommand::MergeFrom(from._internal_motion_command());
      break;
    }
    case kDraggingCommand: {
      _internal_mutable_dragging_command()->::rocos::DraggingCommand::MergeFrom(from._internal_dragging_command());
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RobotCommand::CopyFrom(const RobotCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocos.RobotCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotCommand::IsInitialized() const {
  return true;
}

void RobotCommand::InternalSwap(RobotCommand* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(command_, other->command_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata RobotCommand::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_robot_5fcommand_2eproto_getter, &descriptor_table_robot_5fcommand_2eproto_once,
      file_level_metadata_robot_5fcommand_2eproto[28]);
}

// ===================================================================

class RobotCommandRequest::_Internal {
 public:
  static const ::rocos::RequestHeader& header(const RobotCommandRequest* msg);
  static const ::rocos::RobotCommand& command(const RobotCommandRequest* msg);
};

const ::rocos::RequestHeader&
RobotCommandRequest::_Internal::header(const RobotCommandRequest* msg) {
  return *msg->header_;
}
const ::rocos::RobotCommand&
RobotCommandRequest::_Internal::command(const RobotCommandRequest* msg) {
  return *msg->command_;
}
void RobotCommandRequest::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
RobotCommandRequest::RobotCommandRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rocos.RobotCommandRequest)
}
RobotCommandRequest::RobotCommandRequest(const RobotCommandRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::rocos::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_command()) {
    command_ = new ::rocos::RobotCommand(*from.command_);
  } else {
    command_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:rocos.RobotCommandRequest)
}

inline void RobotCommandRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&command_) -
    reinterpret_cast<char*>(&header_)) + sizeof(command_));
}

RobotCommandRequest::~RobotCommandRequest() {
  // @@protoc_insertion_point(destructor:rocos.RobotCommandRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RobotCommandRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete command_;
}

void RobotCommandRequest::ArenaDtor(void* object) {
  RobotCommandRequest* _this = reinterpret_cast< RobotCommandRequest* >(object);
  (void)_this;
}
void RobotCommandRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RobotCommandRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RobotCommandRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:rocos.RobotCommandRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArenaForAllocation() == nullptr && command_ != nullptr) {
    delete command_;
  }
  command_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RobotCommandRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .rocos.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .rocos.RobotCommand command = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_command(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RobotCommandRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocos.RobotCommandRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rocos.RequestHeader header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .rocos.RobotCommand command = 2;
  if (this->_internal_has_command()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::command(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocos.RobotCommandRequest)
  return target;
}

size_t RobotCommandRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocos.RobotCommandRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .rocos.RequestHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .rocos.RobotCommand command = 2;
  if (this->_internal_has_command()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *command_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RobotCommandRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RobotCommandRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RobotCommandRequest::GetClassData() const { return &_class_data_; }

void RobotCommandRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<RobotCommandRequest *>(to)->MergeFrom(
      static_cast<const RobotCommandRequest &>(from));
}


void RobotCommandRequest::MergeFrom(const RobotCommandRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rocos.RobotCommandRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _internal_mutable_header()->::rocos::RequestHeader::MergeFrom(from._internal_header());
  }
  if (from._internal_has_command()) {
    _internal_mutable_command()->::rocos::RobotCommand::MergeFrom(from._internal_command());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RobotCommandRequest::CopyFrom(const RobotCommandRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocos.RobotCommandRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotCommandRequest::IsInitialized() const {
  return true;
}

void RobotCommandRequest::InternalSwap(RobotCommandRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RobotCommandRequest, command_)
      + sizeof(RobotCommandRequest::command_)
      - PROTOBUF_FIELD_OFFSET(RobotCommandRequest, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RobotCommandRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_robot_5fcommand_2eproto_getter, &descriptor_table_robot_5fcommand_2eproto_once,
      file_level_metadata_robot_5fcommand_2eproto[29]);
}

// ===================================================================

class RobotCommandResponse::_Internal {
 public:
  static const ::rocos::ResponseHeader& header(const RobotCommandResponse* msg);
};

const ::rocos::ResponseHeader&
RobotCommandResponse::_Internal::header(const RobotCommandResponse* msg) {
  return *msg->header_;
}
void RobotCommandResponse::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
RobotCommandResponse::RobotCommandResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rocos.RobotCommandResponse)
}
RobotCommandResponse::RobotCommandResponse(const RobotCommandResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::rocos::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:rocos.RobotCommandResponse)
}

inline void RobotCommandResponse::SharedCtor() {
header_ = nullptr;
}

RobotCommandResponse::~RobotCommandResponse() {
  // @@protoc_insertion_point(destructor:rocos.RobotCommandResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RobotCommandResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void RobotCommandResponse::ArenaDtor(void* object) {
  RobotCommandResponse* _this = reinterpret_cast< RobotCommandResponse* >(object);
  (void)_this;
}
void RobotCommandResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RobotCommandResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RobotCommandResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:rocos.RobotCommandResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RobotCommandResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .rocos.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RobotCommandResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocos.RobotCommandResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rocos.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocos.RobotCommandResponse)
  return target;
}

size_t RobotCommandResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocos.RobotCommandResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .rocos.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RobotCommandResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RobotCommandResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RobotCommandResponse::GetClassData() const { return &_class_data_; }

void RobotCommandResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<RobotCommandResponse *>(to)->MergeFrom(
      static_cast<const RobotCommandResponse &>(from));
}


void RobotCommandResponse::MergeFrom(const RobotCommandResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rocos.RobotCommandResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _internal_mutable_header()->::rocos::ResponseHeader::MergeFrom(from._internal_header());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RobotCommandResponse::CopyFrom(const RobotCommandResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocos.RobotCommandResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotCommandResponse::IsInitialized() const {
  return true;
}

void RobotCommandResponse::InternalSwap(RobotCommandResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RobotCommandResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_robot_5fcommand_2eproto_getter, &descriptor_table_robot_5fcommand_2eproto_once,
      file_level_metadata_robot_5fcommand_2eproto[30]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace rocos
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::rocos::SingleAxisEnabled* Arena::CreateMaybeMessage< ::rocos::SingleAxisEnabled >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rocos::SingleAxisEnabled >(arena);
}
template<> PROTOBUF_NOINLINE ::rocos::SingleAxisDisabled* Arena::CreateMaybeMessage< ::rocos::SingleAxisDisabled >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rocos::SingleAxisDisabled >(arena);
}
template<> PROTOBUF_NOINLINE ::rocos::SingleAxisMode* Arena::CreateMaybeMessage< ::rocos::SingleAxisMode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rocos::SingleAxisMode >(arena);
}
template<> PROTOBUF_NOINLINE ::rocos::SingleAxisMove* Arena::CreateMaybeMessage< ::rocos::SingleAxisMove >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rocos::SingleAxisMove >(arena);
}
template<> PROTOBUF_NOINLINE ::rocos::SingleAxisStop* Arena::CreateMaybeMessage< ::rocos::SingleAxisStop >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rocos::SingleAxisStop >(arena);
}
template<> PROTOBUF_NOINLINE ::rocos::SingleAxisCommand* Arena::CreateMaybeMessage< ::rocos::SingleAxisCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rocos::SingleAxisCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::rocos::MultiAxisEnabled* Arena::CreateMaybeMessage< ::rocos::MultiAxisEnabled >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rocos::MultiAxisEnabled >(arena);
}
template<> PROTOBUF_NOINLINE ::rocos::MultiAxisDisabled* Arena::CreateMaybeMessage< ::rocos::MultiAxisDisabled >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rocos::MultiAxisDisabled >(arena);
}
template<> PROTOBUF_NOINLINE ::rocos::MultiAxisMode* Arena::CreateMaybeMessage< ::rocos::MultiAxisMode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rocos::MultiAxisMode >(arena);
}
template<> PROTOBUF_NOINLINE ::rocos::MultiAxisSync* Arena::CreateMaybeMessage< ::rocos::MultiAxisSync >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rocos::MultiAxisSync >(arena);
}
template<> PROTOBUF_NOINLINE ::rocos::MultiAxisMove* Arena::CreateMaybeMessage< ::rocos::MultiAxisMove >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rocos::MultiAxisMove >(arena);
}
template<> PROTOBUF_NOINLINE ::rocos::MultiAxisStop* Arena::CreateMaybeMessage< ::rocos::MultiAxisStop >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rocos::MultiAxisStop >(arena);
}
template<> PROTOBUF_NOINLINE ::rocos::MultiAxisCommand* Arena::CreateMaybeMessage< ::rocos::MultiAxisCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rocos::MultiAxisCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::rocos::Enabled* Arena::CreateMaybeMessage< ::rocos::Enabled >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rocos::Enabled >(arena);
}
template<> PROTOBUF_NOINLINE ::rocos::Disabled* Arena::CreateMaybeMessage< ::rocos::Disabled >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rocos::Disabled >(arena);
}
template<> PROTOBUF_NOINLINE ::rocos::ZeroOffset* Arena::CreateMaybeMessage< ::rocos::ZeroOffset >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rocos::ZeroOffset >(arena);
}
template<> PROTOBUF_NOINLINE ::rocos::CntPerUnit* Arena::CreateMaybeMessage< ::rocos::CntPerUnit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rocos::CntPerUnit >(arena);
}
template<> PROTOBUF_NOINLINE ::rocos::MoveJ* Arena::CreateMaybeMessage< ::rocos::MoveJ >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rocos::MoveJ >(arena);
}
template<> PROTOBUF_NOINLINE ::rocos::MoveJ_IK* Arena::CreateMaybeMessage< ::rocos::MoveJ_IK >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rocos::MoveJ_IK >(arena);
}
template<> PROTOBUF_NOINLINE ::rocos::MoveL* Arena::CreateMaybeMessage< ::rocos::MoveL >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rocos::MoveL >(arena);
}
template<> PROTOBUF_NOINLINE ::rocos::MoveL_FK* Arena::CreateMaybeMessage< ::rocos::MoveL_FK >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rocos::MoveL_FK >(arena);
}
template<> PROTOBUF_NOINLINE ::rocos::MoveC* Arena::CreateMaybeMessage< ::rocos::MoveC >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rocos::MoveC >(arena);
}
template<> PROTOBUF_NOINLINE ::rocos::MoveP* Arena::CreateMaybeMessage< ::rocos::MoveP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rocos::MoveP >(arena);
}
template<> PROTOBUF_NOINLINE ::rocos::Path_PathEntry* Arena::CreateMaybeMessage< ::rocos::Path_PathEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rocos::Path_PathEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::rocos::Path* Arena::CreateMaybeMessage< ::rocos::Path >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rocos::Path >(arena);
}
template<> PROTOBUF_NOINLINE ::rocos::MovePath* Arena::CreateMaybeMessage< ::rocos::MovePath >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rocos::MovePath >(arena);
}
template<> PROTOBUF_NOINLINE ::rocos::MotionCommand* Arena::CreateMaybeMessage< ::rocos::MotionCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rocos::MotionCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::rocos::DraggingCommand* Arena::CreateMaybeMessage< ::rocos::DraggingCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rocos::DraggingCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::rocos::RobotCommand* Arena::CreateMaybeMessage< ::rocos::RobotCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rocos::RobotCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::rocos::RobotCommandRequest* Arena::CreateMaybeMessage< ::rocos::RobotCommandRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rocos::RobotCommandRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::rocos::RobotCommandResponse* Arena::CreateMaybeMessage< ::rocos::RobotCommandResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rocos::RobotCommandResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
