// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: robot_info.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_robot_5finfo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_robot_5finfo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "header.pb.h"
#include "geometry.pb.h"
#include <google/protobuf/wrappers.pb.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_robot_5finfo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_robot_5finfo_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_robot_5finfo_2eproto;
namespace rocos {
class JointInfo;
struct JointInfoDefaultTypeInternal;
extern JointInfoDefaultTypeInternal _JointInfo_default_instance_;
class RobotInfo;
struct RobotInfoDefaultTypeInternal;
extern RobotInfoDefaultTypeInternal _RobotInfo_default_instance_;
class RobotInfoRequest;
struct RobotInfoRequestDefaultTypeInternal;
extern RobotInfoRequestDefaultTypeInternal _RobotInfoRequest_default_instance_;
class RobotInfoResponse;
struct RobotInfoResponseDefaultTypeInternal;
extern RobotInfoResponseDefaultTypeInternal _RobotInfoResponse_default_instance_;
}  // namespace rocos
PROTOBUF_NAMESPACE_OPEN
template<> ::rocos::JointInfo* Arena::CreateMaybeMessage<::rocos::JointInfo>(Arena*);
template<> ::rocos::RobotInfo* Arena::CreateMaybeMessage<::rocos::RobotInfo>(Arena*);
template<> ::rocos::RobotInfoRequest* Arena::CreateMaybeMessage<::rocos::RobotInfoRequest>(Arena*);
template<> ::rocos::RobotInfoResponse* Arena::CreateMaybeMessage<::rocos::RobotInfoResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace rocos {

// ===================================================================

class JointInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rocos.JointInfo) */ {
 public:
  inline JointInfo() : JointInfo(nullptr) {}
  ~JointInfo() override;
  explicit constexpr JointInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JointInfo(const JointInfo& from);
  JointInfo(JointInfo&& from) noexcept
    : JointInfo() {
    *this = ::std::move(from);
  }

  inline JointInfo& operator=(const JointInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline JointInfo& operator=(JointInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JointInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const JointInfo* internal_default_instance() {
    return reinterpret_cast<const JointInfo*>(
               &_JointInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(JointInfo& a, JointInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(JointInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JointInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JointInfo* New() const final {
    return new JointInfo();
  }

  JointInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JointInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const JointInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const JointInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JointInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rocos.JointInfo";
  }
  protected:
  explicit JointInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kUserUnitNameFieldNumber = 6,
    kCntPerUnitFieldNumber = 2,
    kTorquePerUnitFieldNumber = 3,
    kRatioFieldNumber = 4,
    kPosZeroOffsetFieldNumber = 5,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string user_unit_name = 6;
  void clear_user_unit_name();
  const std::string& user_unit_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_unit_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_unit_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_user_unit_name();
  void set_allocated_user_unit_name(std::string* user_unit_name);
  private:
  const std::string& _internal_user_unit_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_unit_name(const std::string& value);
  std::string* _internal_mutable_user_unit_name();
  public:

  // double cnt_per_unit = 2;
  void clear_cnt_per_unit();
  double cnt_per_unit() const;
  void set_cnt_per_unit(double value);
  private:
  double _internal_cnt_per_unit() const;
  void _internal_set_cnt_per_unit(double value);
  public:

  // double torque_per_unit = 3;
  void clear_torque_per_unit();
  double torque_per_unit() const;
  void set_torque_per_unit(double value);
  private:
  double _internal_torque_per_unit() const;
  void _internal_set_torque_per_unit(double value);
  public:

  // double ratio = 4;
  void clear_ratio();
  double ratio() const;
  void set_ratio(double value);
  private:
  double _internal_ratio() const;
  void _internal_set_ratio(double value);
  public:

  // int32 pos_zero_offset = 5;
  void clear_pos_zero_offset();
  ::PROTOBUF_NAMESPACE_ID::int32 pos_zero_offset() const;
  void set_pos_zero_offset(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pos_zero_offset() const;
  void _internal_set_pos_zero_offset(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:rocos.JointInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_unit_name_;
  double cnt_per_unit_;
  double torque_per_unit_;
  double ratio_;
  ::PROTOBUF_NAMESPACE_ID::int32 pos_zero_offset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_5finfo_2eproto;
};
// -------------------------------------------------------------------

class RobotInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rocos.RobotInfo) */ {
 public:
  inline RobotInfo() : RobotInfo(nullptr) {}
  ~RobotInfo() override;
  explicit constexpr RobotInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RobotInfo(const RobotInfo& from);
  RobotInfo(RobotInfo&& from) noexcept
    : RobotInfo() {
    *this = ::std::move(from);
  }

  inline RobotInfo& operator=(const RobotInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RobotInfo& operator=(RobotInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RobotInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const RobotInfo* internal_default_instance() {
    return reinterpret_cast<const RobotInfo*>(
               &_RobotInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RobotInfo& a, RobotInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RobotInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RobotInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RobotInfo* New() const final {
    return new RobotInfo();
  }

  RobotInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RobotInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RobotInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RobotInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RobotInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rocos.RobotInfo";
  }
  protected:
  explicit RobotInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJointInfosFieldNumber = 1,
  };
  // repeated .rocos.JointInfo joint_infos = 1;
  int joint_infos_size() const;
  private:
  int _internal_joint_infos_size() const;
  public:
  void clear_joint_infos();
  ::rocos::JointInfo* mutable_joint_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rocos::JointInfo >*
      mutable_joint_infos();
  private:
  const ::rocos::JointInfo& _internal_joint_infos(int index) const;
  ::rocos::JointInfo* _internal_add_joint_infos();
  public:
  const ::rocos::JointInfo& joint_infos(int index) const;
  ::rocos::JointInfo* add_joint_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rocos::JointInfo >&
      joint_infos() const;

  // @@protoc_insertion_point(class_scope:rocos.RobotInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rocos::JointInfo > joint_infos_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_5finfo_2eproto;
};
// -------------------------------------------------------------------

class RobotInfoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rocos.RobotInfoRequest) */ {
 public:
  inline RobotInfoRequest() : RobotInfoRequest(nullptr) {}
  ~RobotInfoRequest() override;
  explicit constexpr RobotInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RobotInfoRequest(const RobotInfoRequest& from);
  RobotInfoRequest(RobotInfoRequest&& from) noexcept
    : RobotInfoRequest() {
    *this = ::std::move(from);
  }

  inline RobotInfoRequest& operator=(const RobotInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RobotInfoRequest& operator=(RobotInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RobotInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RobotInfoRequest* internal_default_instance() {
    return reinterpret_cast<const RobotInfoRequest*>(
               &_RobotInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RobotInfoRequest& a, RobotInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RobotInfoRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RobotInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RobotInfoRequest* New() const final {
    return new RobotInfoRequest();
  }

  RobotInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RobotInfoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RobotInfoRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RobotInfoRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RobotInfoRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rocos.RobotInfoRequest";
  }
  protected:
  explicit RobotInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
  };
  // .rocos.RequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::rocos::RequestHeader& header() const;
  PROTOBUF_MUST_USE_RESULT ::rocos::RequestHeader* release_header();
  ::rocos::RequestHeader* mutable_header();
  void set_allocated_header(::rocos::RequestHeader* header);
  private:
  const ::rocos::RequestHeader& _internal_header() const;
  ::rocos::RequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::rocos::RequestHeader* header);
  ::rocos::RequestHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:rocos.RobotInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::rocos::RequestHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_5finfo_2eproto;
};
// -------------------------------------------------------------------

class RobotInfoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rocos.RobotInfoResponse) */ {
 public:
  inline RobotInfoResponse() : RobotInfoResponse(nullptr) {}
  ~RobotInfoResponse() override;
  explicit constexpr RobotInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RobotInfoResponse(const RobotInfoResponse& from);
  RobotInfoResponse(RobotInfoResponse&& from) noexcept
    : RobotInfoResponse() {
    *this = ::std::move(from);
  }

  inline RobotInfoResponse& operator=(const RobotInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RobotInfoResponse& operator=(RobotInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RobotInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RobotInfoResponse* internal_default_instance() {
    return reinterpret_cast<const RobotInfoResponse*>(
               &_RobotInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RobotInfoResponse& a, RobotInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RobotInfoResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RobotInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RobotInfoResponse* New() const final {
    return new RobotInfoResponse();
  }

  RobotInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RobotInfoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RobotInfoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RobotInfoResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RobotInfoResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rocos.RobotInfoResponse";
  }
  protected:
  explicit RobotInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kRobotInfoFieldNumber = 2,
  };
  // .rocos.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::rocos::ResponseHeader& header() const;
  PROTOBUF_MUST_USE_RESULT ::rocos::ResponseHeader* release_header();
  ::rocos::ResponseHeader* mutable_header();
  void set_allocated_header(::rocos::ResponseHeader* header);
  private:
  const ::rocos::ResponseHeader& _internal_header() const;
  ::rocos::ResponseHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::rocos::ResponseHeader* header);
  ::rocos::ResponseHeader* unsafe_arena_release_header();

  // .rocos.RobotInfo robot_info = 2;
  bool has_robot_info() const;
  private:
  bool _internal_has_robot_info() const;
  public:
  void clear_robot_info();
  const ::rocos::RobotInfo& robot_info() const;
  PROTOBUF_MUST_USE_RESULT ::rocos::RobotInfo* release_robot_info();
  ::rocos::RobotInfo* mutable_robot_info();
  void set_allocated_robot_info(::rocos::RobotInfo* robot_info);
  private:
  const ::rocos::RobotInfo& _internal_robot_info() const;
  ::rocos::RobotInfo* _internal_mutable_robot_info();
  public:
  void unsafe_arena_set_allocated_robot_info(
      ::rocos::RobotInfo* robot_info);
  ::rocos::RobotInfo* unsafe_arena_release_robot_info();

  // @@protoc_insertion_point(class_scope:rocos.RobotInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::rocos::ResponseHeader* header_;
  ::rocos::RobotInfo* robot_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_5finfo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// JointInfo

// string name = 1;
inline void JointInfo::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& JointInfo::name() const {
  // @@protoc_insertion_point(field_get:rocos.JointInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void JointInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rocos.JointInfo.name)
}
inline std::string* JointInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:rocos.JointInfo.name)
  return _s;
}
inline const std::string& JointInfo::_internal_name() const {
  return name_.Get();
}
inline void JointInfo::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* JointInfo::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* JointInfo::release_name() {
  // @@protoc_insertion_point(field_release:rocos.JointInfo.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void JointInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:rocos.JointInfo.name)
}

// double cnt_per_unit = 2;
inline void JointInfo::clear_cnt_per_unit() {
  cnt_per_unit_ = 0;
}
inline double JointInfo::_internal_cnt_per_unit() const {
  return cnt_per_unit_;
}
inline double JointInfo::cnt_per_unit() const {
  // @@protoc_insertion_point(field_get:rocos.JointInfo.cnt_per_unit)
  return _internal_cnt_per_unit();
}
inline void JointInfo::_internal_set_cnt_per_unit(double value) {
  
  cnt_per_unit_ = value;
}
inline void JointInfo::set_cnt_per_unit(double value) {
  _internal_set_cnt_per_unit(value);
  // @@protoc_insertion_point(field_set:rocos.JointInfo.cnt_per_unit)
}

// double torque_per_unit = 3;
inline void JointInfo::clear_torque_per_unit() {
  torque_per_unit_ = 0;
}
inline double JointInfo::_internal_torque_per_unit() const {
  return torque_per_unit_;
}
inline double JointInfo::torque_per_unit() const {
  // @@protoc_insertion_point(field_get:rocos.JointInfo.torque_per_unit)
  return _internal_torque_per_unit();
}
inline void JointInfo::_internal_set_torque_per_unit(double value) {
  
  torque_per_unit_ = value;
}
inline void JointInfo::set_torque_per_unit(double value) {
  _internal_set_torque_per_unit(value);
  // @@protoc_insertion_point(field_set:rocos.JointInfo.torque_per_unit)
}

// double ratio = 4;
inline void JointInfo::clear_ratio() {
  ratio_ = 0;
}
inline double JointInfo::_internal_ratio() const {
  return ratio_;
}
inline double JointInfo::ratio() const {
  // @@protoc_insertion_point(field_get:rocos.JointInfo.ratio)
  return _internal_ratio();
}
inline void JointInfo::_internal_set_ratio(double value) {
  
  ratio_ = value;
}
inline void JointInfo::set_ratio(double value) {
  _internal_set_ratio(value);
  // @@protoc_insertion_point(field_set:rocos.JointInfo.ratio)
}

// int32 pos_zero_offset = 5;
inline void JointInfo::clear_pos_zero_offset() {
  pos_zero_offset_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JointInfo::_internal_pos_zero_offset() const {
  return pos_zero_offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JointInfo::pos_zero_offset() const {
  // @@protoc_insertion_point(field_get:rocos.JointInfo.pos_zero_offset)
  return _internal_pos_zero_offset();
}
inline void JointInfo::_internal_set_pos_zero_offset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pos_zero_offset_ = value;
}
inline void JointInfo::set_pos_zero_offset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pos_zero_offset(value);
  // @@protoc_insertion_point(field_set:rocos.JointInfo.pos_zero_offset)
}

// string user_unit_name = 6;
inline void JointInfo::clear_user_unit_name() {
  user_unit_name_.ClearToEmpty();
}
inline const std::string& JointInfo::user_unit_name() const {
  // @@protoc_insertion_point(field_get:rocos.JointInfo.user_unit_name)
  return _internal_user_unit_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void JointInfo::set_user_unit_name(ArgT0&& arg0, ArgT... args) {
 
 user_unit_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rocos.JointInfo.user_unit_name)
}
inline std::string* JointInfo::mutable_user_unit_name() {
  std::string* _s = _internal_mutable_user_unit_name();
  // @@protoc_insertion_point(field_mutable:rocos.JointInfo.user_unit_name)
  return _s;
}
inline const std::string& JointInfo::_internal_user_unit_name() const {
  return user_unit_name_.Get();
}
inline void JointInfo::_internal_set_user_unit_name(const std::string& value) {
  
  user_unit_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* JointInfo::_internal_mutable_user_unit_name() {
  
  return user_unit_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* JointInfo::release_user_unit_name() {
  // @@protoc_insertion_point(field_release:rocos.JointInfo.user_unit_name)
  return user_unit_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void JointInfo::set_allocated_user_unit_name(std::string* user_unit_name) {
  if (user_unit_name != nullptr) {
    
  } else {
    
  }
  user_unit_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_unit_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:rocos.JointInfo.user_unit_name)
}

// -------------------------------------------------------------------

// RobotInfo

// repeated .rocos.JointInfo joint_infos = 1;
inline int RobotInfo::_internal_joint_infos_size() const {
  return joint_infos_.size();
}
inline int RobotInfo::joint_infos_size() const {
  return _internal_joint_infos_size();
}
inline void RobotInfo::clear_joint_infos() {
  joint_infos_.Clear();
}
inline ::rocos::JointInfo* RobotInfo::mutable_joint_infos(int index) {
  // @@protoc_insertion_point(field_mutable:rocos.RobotInfo.joint_infos)
  return joint_infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rocos::JointInfo >*
RobotInfo::mutable_joint_infos() {
  // @@protoc_insertion_point(field_mutable_list:rocos.RobotInfo.joint_infos)
  return &joint_infos_;
}
inline const ::rocos::JointInfo& RobotInfo::_internal_joint_infos(int index) const {
  return joint_infos_.Get(index);
}
inline const ::rocos::JointInfo& RobotInfo::joint_infos(int index) const {
  // @@protoc_insertion_point(field_get:rocos.RobotInfo.joint_infos)
  return _internal_joint_infos(index);
}
inline ::rocos::JointInfo* RobotInfo::_internal_add_joint_infos() {
  return joint_infos_.Add();
}
inline ::rocos::JointInfo* RobotInfo::add_joint_infos() {
  ::rocos::JointInfo* _add = _internal_add_joint_infos();
  // @@protoc_insertion_point(field_add:rocos.RobotInfo.joint_infos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rocos::JointInfo >&
RobotInfo::joint_infos() const {
  // @@protoc_insertion_point(field_list:rocos.RobotInfo.joint_infos)
  return joint_infos_;
}

// -------------------------------------------------------------------

// RobotInfoRequest

// .rocos.RequestHeader header = 1;
inline bool RobotInfoRequest::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool RobotInfoRequest::has_header() const {
  return _internal_has_header();
}
inline const ::rocos::RequestHeader& RobotInfoRequest::_internal_header() const {
  const ::rocos::RequestHeader* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::rocos::RequestHeader&>(
      ::rocos::_RequestHeader_default_instance_);
}
inline const ::rocos::RequestHeader& RobotInfoRequest::header() const {
  // @@protoc_insertion_point(field_get:rocos.RobotInfoRequest.header)
  return _internal_header();
}
inline void RobotInfoRequest::unsafe_arena_set_allocated_header(
    ::rocos::RequestHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rocos.RobotInfoRequest.header)
}
inline ::rocos::RequestHeader* RobotInfoRequest::release_header() {
  
  ::rocos::RequestHeader* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rocos::RequestHeader* RobotInfoRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:rocos.RobotInfoRequest.header)
  
  ::rocos::RequestHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::rocos::RequestHeader* RobotInfoRequest::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::rocos::RequestHeader>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::rocos::RequestHeader* RobotInfoRequest::mutable_header() {
  ::rocos::RequestHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:rocos.RobotInfoRequest.header)
  return _msg;
}
inline void RobotInfoRequest::set_allocated_header(::rocos::RequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:rocos.RobotInfoRequest.header)
}

// -------------------------------------------------------------------

// RobotInfoResponse

// .rocos.ResponseHeader header = 1;
inline bool RobotInfoResponse::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool RobotInfoResponse::has_header() const {
  return _internal_has_header();
}
inline const ::rocos::ResponseHeader& RobotInfoResponse::_internal_header() const {
  const ::rocos::ResponseHeader* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::rocos::ResponseHeader&>(
      ::rocos::_ResponseHeader_default_instance_);
}
inline const ::rocos::ResponseHeader& RobotInfoResponse::header() const {
  // @@protoc_insertion_point(field_get:rocos.RobotInfoResponse.header)
  return _internal_header();
}
inline void RobotInfoResponse::unsafe_arena_set_allocated_header(
    ::rocos::ResponseHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rocos.RobotInfoResponse.header)
}
inline ::rocos::ResponseHeader* RobotInfoResponse::release_header() {
  
  ::rocos::ResponseHeader* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rocos::ResponseHeader* RobotInfoResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:rocos.RobotInfoResponse.header)
  
  ::rocos::ResponseHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::rocos::ResponseHeader* RobotInfoResponse::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::rocos::ResponseHeader>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::rocos::ResponseHeader* RobotInfoResponse::mutable_header() {
  ::rocos::ResponseHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:rocos.RobotInfoResponse.header)
  return _msg;
}
inline void RobotInfoResponse::set_allocated_header(::rocos::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:rocos.RobotInfoResponse.header)
}

// .rocos.RobotInfo robot_info = 2;
inline bool RobotInfoResponse::_internal_has_robot_info() const {
  return this != internal_default_instance() && robot_info_ != nullptr;
}
inline bool RobotInfoResponse::has_robot_info() const {
  return _internal_has_robot_info();
}
inline void RobotInfoResponse::clear_robot_info() {
  if (GetArenaForAllocation() == nullptr && robot_info_ != nullptr) {
    delete robot_info_;
  }
  robot_info_ = nullptr;
}
inline const ::rocos::RobotInfo& RobotInfoResponse::_internal_robot_info() const {
  const ::rocos::RobotInfo* p = robot_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::rocos::RobotInfo&>(
      ::rocos::_RobotInfo_default_instance_);
}
inline const ::rocos::RobotInfo& RobotInfoResponse::robot_info() const {
  // @@protoc_insertion_point(field_get:rocos.RobotInfoResponse.robot_info)
  return _internal_robot_info();
}
inline void RobotInfoResponse::unsafe_arena_set_allocated_robot_info(
    ::rocos::RobotInfo* robot_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(robot_info_);
  }
  robot_info_ = robot_info;
  if (robot_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rocos.RobotInfoResponse.robot_info)
}
inline ::rocos::RobotInfo* RobotInfoResponse::release_robot_info() {
  
  ::rocos::RobotInfo* temp = robot_info_;
  robot_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rocos::RobotInfo* RobotInfoResponse::unsafe_arena_release_robot_info() {
  // @@protoc_insertion_point(field_release:rocos.RobotInfoResponse.robot_info)
  
  ::rocos::RobotInfo* temp = robot_info_;
  robot_info_ = nullptr;
  return temp;
}
inline ::rocos::RobotInfo* RobotInfoResponse::_internal_mutable_robot_info() {
  
  if (robot_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::rocos::RobotInfo>(GetArenaForAllocation());
    robot_info_ = p;
  }
  return robot_info_;
}
inline ::rocos::RobotInfo* RobotInfoResponse::mutable_robot_info() {
  ::rocos::RobotInfo* _msg = _internal_mutable_robot_info();
  // @@protoc_insertion_point(field_mutable:rocos.RobotInfoResponse.robot_info)
  return _msg;
}
inline void RobotInfoResponse::set_allocated_robot_info(::rocos::RobotInfo* robot_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete robot_info_;
  }
  if (robot_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::rocos::RobotInfo>::GetOwningArena(robot_info);
    if (message_arena != submessage_arena) {
      robot_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, robot_info, submessage_arena);
    }
    
  } else {
    
  }
  robot_info_ = robot_info;
  // @@protoc_insertion_point(field_set_allocated:rocos.RobotInfoResponse.robot_info)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace rocos

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_robot_5finfo_2eproto
