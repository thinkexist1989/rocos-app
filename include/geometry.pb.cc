// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: geometry.proto

#include "geometry.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace rocos {
constexpr Vec2::Vec2(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0){}
struct Vec2DefaultTypeInternal {
  constexpr Vec2DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Vec2DefaultTypeInternal() {}
  union {
    Vec2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Vec2DefaultTypeInternal _Vec2_default_instance_;
constexpr Vec3::Vec3(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0)
  , z_(0){}
struct Vec3DefaultTypeInternal {
  constexpr Vec3DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Vec3DefaultTypeInternal() {}
  union {
    Vec3 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Vec3DefaultTypeInternal _Vec3_default_instance_;
constexpr CylindricalCoordinate::CylindricalCoordinate(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : r_(0)
  , theta_(0)
  , z_(0){}
struct CylindricalCoordinateDefaultTypeInternal {
  constexpr CylindricalCoordinateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CylindricalCoordinateDefaultTypeInternal() {}
  union {
    CylindricalCoordinate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CylindricalCoordinateDefaultTypeInternal _CylindricalCoordinate_default_instance_;
constexpr Quaternion::Quaternion(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0)
  , z_(0)
  , w_(0){}
struct QuaternionDefaultTypeInternal {
  constexpr QuaternionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~QuaternionDefaultTypeInternal() {}
  union {
    Quaternion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT QuaternionDefaultTypeInternal _Quaternion_default_instance_;
constexpr Plane::Plane(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : point_(nullptr)
  , normal_(nullptr){}
struct PlaneDefaultTypeInternal {
  constexpr PlaneDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PlaneDefaultTypeInternal() {}
  union {
    Plane _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PlaneDefaultTypeInternal _Plane_default_instance_;
constexpr Quad::Quad(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pose_(nullptr)
  , size_(0){}
struct QuadDefaultTypeInternal {
  constexpr QuadDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~QuadDefaultTypeInternal() {}
  union {
    Quad _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT QuadDefaultTypeInternal _Quad_default_instance_;
constexpr Ray::Ray(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : origin_(nullptr)
  , direction_(nullptr){}
struct RayDefaultTypeInternal {
  constexpr RayDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RayDefaultTypeInternal() {}
  union {
    Ray _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RayDefaultTypeInternal _Ray_default_instance_;
constexpr SE2Pose::SE2Pose(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : position_(nullptr)
  , angle_(0){}
struct SE2PoseDefaultTypeInternal {
  constexpr SE2PoseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SE2PoseDefaultTypeInternal() {}
  union {
    SE2Pose _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SE2PoseDefaultTypeInternal _SE2Pose_default_instance_;
constexpr SE2Velocity::SE2Velocity(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : linear_(nullptr)
  , angular_(0){}
struct SE2VelocityDefaultTypeInternal {
  constexpr SE2VelocityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SE2VelocityDefaultTypeInternal() {}
  union {
    SE2Velocity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SE2VelocityDefaultTypeInternal _SE2Velocity_default_instance_;
constexpr SE2VelocityLimit::SE2VelocityLimit(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : max_vel_(nullptr)
  , min_vel_(nullptr){}
struct SE2VelocityLimitDefaultTypeInternal {
  constexpr SE2VelocityLimitDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SE2VelocityLimitDefaultTypeInternal() {}
  union {
    SE2VelocityLimit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SE2VelocityLimitDefaultTypeInternal _SE2VelocityLimit_default_instance_;
constexpr SE3Pose::SE3Pose(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : position_(nullptr)
  , rotation_(nullptr){}
struct SE3PoseDefaultTypeInternal {
  constexpr SE3PoseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SE3PoseDefaultTypeInternal() {}
  union {
    SE3Pose _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SE3PoseDefaultTypeInternal _SE3Pose_default_instance_;
constexpr SE3Velocity::SE3Velocity(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : linear_(nullptr)
  , angular_(nullptr){}
struct SE3VelocityDefaultTypeInternal {
  constexpr SE3VelocityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SE3VelocityDefaultTypeInternal() {}
  union {
    SE3Velocity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SE3VelocityDefaultTypeInternal _SE3Velocity_default_instance_;
constexpr Wrench::Wrench(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : force_(nullptr)
  , torque_(nullptr){}
struct WrenchDefaultTypeInternal {
  constexpr WrenchDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WrenchDefaultTypeInternal() {}
  union {
    Wrench _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WrenchDefaultTypeInternal _Wrench_default_instance_;
constexpr FrameTreeSnapshot_ParentEdge::FrameTreeSnapshot_ParentEdge(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : parent_frame_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , parent_tform_child_(nullptr){}
struct FrameTreeSnapshot_ParentEdgeDefaultTypeInternal {
  constexpr FrameTreeSnapshot_ParentEdgeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FrameTreeSnapshot_ParentEdgeDefaultTypeInternal() {}
  union {
    FrameTreeSnapshot_ParentEdge _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FrameTreeSnapshot_ParentEdgeDefaultTypeInternal _FrameTreeSnapshot_ParentEdge_default_instance_;
constexpr FrameTreeSnapshot_ChildToParentEdgeMapEntry_DoNotUse::FrameTreeSnapshot_ChildToParentEdgeMapEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct FrameTreeSnapshot_ChildToParentEdgeMapEntry_DoNotUseDefaultTypeInternal {
  constexpr FrameTreeSnapshot_ChildToParentEdgeMapEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FrameTreeSnapshot_ChildToParentEdgeMapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    FrameTreeSnapshot_ChildToParentEdgeMapEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FrameTreeSnapshot_ChildToParentEdgeMapEntry_DoNotUseDefaultTypeInternal _FrameTreeSnapshot_ChildToParentEdgeMapEntry_DoNotUse_default_instance_;
constexpr FrameTreeSnapshot::FrameTreeSnapshot(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : child_to_parent_edge_map_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}){}
struct FrameTreeSnapshotDefaultTypeInternal {
  constexpr FrameTreeSnapshotDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FrameTreeSnapshotDefaultTypeInternal() {}
  union {
    FrameTreeSnapshot _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FrameTreeSnapshotDefaultTypeInternal _FrameTreeSnapshot_default_instance_;
constexpr Box2::Box2(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : size_(nullptr){}
struct Box2DefaultTypeInternal {
  constexpr Box2DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Box2DefaultTypeInternal() {}
  union {
    Box2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Box2DefaultTypeInternal _Box2_default_instance_;
constexpr Box2WithFrame::Box2WithFrame(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : frame_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , box_(nullptr)
  , frame_name_tform_box_(nullptr){}
struct Box2WithFrameDefaultTypeInternal {
  constexpr Box2WithFrameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Box2WithFrameDefaultTypeInternal() {}
  union {
    Box2WithFrame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Box2WithFrameDefaultTypeInternal _Box2WithFrame_default_instance_;
constexpr Box3::Box3(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : size_(nullptr){}
struct Box3DefaultTypeInternal {
  constexpr Box3DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Box3DefaultTypeInternal() {}
  union {
    Box3 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Box3DefaultTypeInternal _Box3_default_instance_;
constexpr Box3WithFrame::Box3WithFrame(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : frame_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , box_(nullptr)
  , frame_name_tform_box_(nullptr){}
struct Box3WithFrameDefaultTypeInternal {
  constexpr Box3WithFrameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Box3WithFrameDefaultTypeInternal() {}
  union {
    Box3WithFrame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Box3WithFrameDefaultTypeInternal _Box3WithFrame_default_instance_;
constexpr Matrix::Matrix(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : values_()
  , rows_(0)
  , cols_(0){}
struct MatrixDefaultTypeInternal {
  constexpr MatrixDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MatrixDefaultTypeInternal() {}
  union {
    Matrix _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MatrixDefaultTypeInternal _Matrix_default_instance_;
constexpr SE3Covariance::SE3Covariance(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : matrix_(nullptr)
  , yaw_variance_(0)
  , cov_xx_(0)
  , cov_xy_(0)
  , cov_xz_(0)
  , cov_yx_(0)
  , cov_yy_(0)
  , cov_yz_(0)
  , cov_zx_(0)
  , cov_zy_(0)
  , cov_zz_(0){}
struct SE3CovarianceDefaultTypeInternal {
  constexpr SE3CovarianceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SE3CovarianceDefaultTypeInternal() {}
  union {
    SE3Covariance _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SE3CovarianceDefaultTypeInternal _SE3Covariance_default_instance_;
constexpr PolyLine::PolyLine(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : points_(){}
struct PolyLineDefaultTypeInternal {
  constexpr PolyLineDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PolyLineDefaultTypeInternal() {}
  union {
    PolyLine _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PolyLineDefaultTypeInternal _PolyLine_default_instance_;
constexpr Polygon::Polygon(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vertexes_(){}
struct PolygonDefaultTypeInternal {
  constexpr PolygonDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PolygonDefaultTypeInternal() {}
  union {
    Polygon _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PolygonDefaultTypeInternal _Polygon_default_instance_;
constexpr PolygonWithExclusions::PolygonWithExclusions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : exclusions_()
  , inclusion_(nullptr){}
struct PolygonWithExclusionsDefaultTypeInternal {
  constexpr PolygonWithExclusionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PolygonWithExclusionsDefaultTypeInternal() {}
  union {
    PolygonWithExclusions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PolygonWithExclusionsDefaultTypeInternal _PolygonWithExclusions_default_instance_;
constexpr Circle::Circle(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : center_pt_(nullptr)
  , radius_(0){}
struct CircleDefaultTypeInternal {
  constexpr CircleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CircleDefaultTypeInternal() {}
  union {
    Circle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CircleDefaultTypeInternal _Circle_default_instance_;
constexpr Area::Area(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct AreaDefaultTypeInternal {
  constexpr AreaDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AreaDefaultTypeInternal() {}
  union {
    Area _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AreaDefaultTypeInternal _Area_default_instance_;
constexpr Volume::Volume(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct VolumeDefaultTypeInternal {
  constexpr VolumeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VolumeDefaultTypeInternal() {}
  union {
    Volume _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VolumeDefaultTypeInternal _Volume_default_instance_;
constexpr Bounds::Bounds(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lower_(0)
  , upper_(0){}
struct BoundsDefaultTypeInternal {
  constexpr BoundsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BoundsDefaultTypeInternal() {}
  union {
    Bounds _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BoundsDefaultTypeInternal _Bounds_default_instance_;
constexpr Vec2Value::Vec2Value(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(nullptr)
  , y_(nullptr){}
struct Vec2ValueDefaultTypeInternal {
  constexpr Vec2ValueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Vec2ValueDefaultTypeInternal() {}
  union {
    Vec2Value _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Vec2ValueDefaultTypeInternal _Vec2Value_default_instance_;
constexpr Vec3Value::Vec3Value(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(nullptr)
  , y_(nullptr)
  , z_(nullptr){}
struct Vec3ValueDefaultTypeInternal {
  constexpr Vec3ValueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Vec3ValueDefaultTypeInternal() {}
  union {
    Vec3Value _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Vec3ValueDefaultTypeInternal _Vec3Value_default_instance_;
constexpr JointArray::JointArray(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(){}
struct JointArrayDefaultTypeInternal {
  constexpr JointArrayDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~JointArrayDefaultTypeInternal() {}
  union {
    JointArray _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT JointArrayDefaultTypeInternal _JointArray_default_instance_;
}  // namespace rocos
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_geometry_2eproto[32];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_geometry_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_geometry_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_geometry_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rocos::Vec2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rocos::Vec2, x_),
  PROTOBUF_FIELD_OFFSET(::rocos::Vec2, y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rocos::Vec3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rocos::Vec3, x_),
  PROTOBUF_FIELD_OFFSET(::rocos::Vec3, y_),
  PROTOBUF_FIELD_OFFSET(::rocos::Vec3, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rocos::CylindricalCoordinate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rocos::CylindricalCoordinate, r_),
  PROTOBUF_FIELD_OFFSET(::rocos::CylindricalCoordinate, theta_),
  PROTOBUF_FIELD_OFFSET(::rocos::CylindricalCoordinate, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rocos::Quaternion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rocos::Quaternion, x_),
  PROTOBUF_FIELD_OFFSET(::rocos::Quaternion, y_),
  PROTOBUF_FIELD_OFFSET(::rocos::Quaternion, z_),
  PROTOBUF_FIELD_OFFSET(::rocos::Quaternion, w_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rocos::Plane, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rocos::Plane, point_),
  PROTOBUF_FIELD_OFFSET(::rocos::Plane, normal_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rocos::Quad, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rocos::Quad, pose_),
  PROTOBUF_FIELD_OFFSET(::rocos::Quad, size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rocos::Ray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rocos::Ray, origin_),
  PROTOBUF_FIELD_OFFSET(::rocos::Ray, direction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rocos::SE2Pose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rocos::SE2Pose, position_),
  PROTOBUF_FIELD_OFFSET(::rocos::SE2Pose, angle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rocos::SE2Velocity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rocos::SE2Velocity, linear_),
  PROTOBUF_FIELD_OFFSET(::rocos::SE2Velocity, angular_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rocos::SE2VelocityLimit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rocos::SE2VelocityLimit, max_vel_),
  PROTOBUF_FIELD_OFFSET(::rocos::SE2VelocityLimit, min_vel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rocos::SE3Pose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rocos::SE3Pose, position_),
  PROTOBUF_FIELD_OFFSET(::rocos::SE3Pose, rotation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rocos::SE3Velocity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rocos::SE3Velocity, linear_),
  PROTOBUF_FIELD_OFFSET(::rocos::SE3Velocity, angular_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rocos::Wrench, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rocos::Wrench, force_),
  PROTOBUF_FIELD_OFFSET(::rocos::Wrench, torque_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rocos::FrameTreeSnapshot_ParentEdge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rocos::FrameTreeSnapshot_ParentEdge, parent_frame_name_),
  PROTOBUF_FIELD_OFFSET(::rocos::FrameTreeSnapshot_ParentEdge, parent_tform_child_),
  PROTOBUF_FIELD_OFFSET(::rocos::FrameTreeSnapshot_ChildToParentEdgeMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rocos::FrameTreeSnapshot_ChildToParentEdgeMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rocos::FrameTreeSnapshot_ChildToParentEdgeMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::rocos::FrameTreeSnapshot_ChildToParentEdgeMapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rocos::FrameTreeSnapshot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rocos::FrameTreeSnapshot, child_to_parent_edge_map_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rocos::Box2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rocos::Box2, size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rocos::Box2WithFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rocos::Box2WithFrame, box_),
  PROTOBUF_FIELD_OFFSET(::rocos::Box2WithFrame, frame_name_),
  PROTOBUF_FIELD_OFFSET(::rocos::Box2WithFrame, frame_name_tform_box_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rocos::Box3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rocos::Box3, size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rocos::Box3WithFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rocos::Box3WithFrame, box_),
  PROTOBUF_FIELD_OFFSET(::rocos::Box3WithFrame, frame_name_),
  PROTOBUF_FIELD_OFFSET(::rocos::Box3WithFrame, frame_name_tform_box_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rocos::Matrix, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rocos::Matrix, rows_),
  PROTOBUF_FIELD_OFFSET(::rocos::Matrix, cols_),
  PROTOBUF_FIELD_OFFSET(::rocos::Matrix, values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rocos::SE3Covariance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rocos::SE3Covariance, matrix_),
  PROTOBUF_FIELD_OFFSET(::rocos::SE3Covariance, yaw_variance_),
  PROTOBUF_FIELD_OFFSET(::rocos::SE3Covariance, cov_xx_),
  PROTOBUF_FIELD_OFFSET(::rocos::SE3Covariance, cov_xy_),
  PROTOBUF_FIELD_OFFSET(::rocos::SE3Covariance, cov_xz_),
  PROTOBUF_FIELD_OFFSET(::rocos::SE3Covariance, cov_yx_),
  PROTOBUF_FIELD_OFFSET(::rocos::SE3Covariance, cov_yy_),
  PROTOBUF_FIELD_OFFSET(::rocos::SE3Covariance, cov_yz_),
  PROTOBUF_FIELD_OFFSET(::rocos::SE3Covariance, cov_zx_),
  PROTOBUF_FIELD_OFFSET(::rocos::SE3Covariance, cov_zy_),
  PROTOBUF_FIELD_OFFSET(::rocos::SE3Covariance, cov_zz_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rocos::PolyLine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rocos::PolyLine, points_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rocos::Polygon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rocos::Polygon, vertexes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rocos::PolygonWithExclusions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rocos::PolygonWithExclusions, inclusion_),
  PROTOBUF_FIELD_OFFSET(::rocos::PolygonWithExclusions, exclusions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rocos::Circle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rocos::Circle, center_pt_),
  PROTOBUF_FIELD_OFFSET(::rocos::Circle, radius_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rocos::Area, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::rocos::Area, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::rocos::Area, geometry_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rocos::Volume, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::rocos::Volume, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::rocos::Volume, geometry_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rocos::Bounds, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rocos::Bounds, lower_),
  PROTOBUF_FIELD_OFFSET(::rocos::Bounds, upper_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rocos::Vec2Value, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rocos::Vec2Value, x_),
  PROTOBUF_FIELD_OFFSET(::rocos::Vec2Value, y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rocos::Vec3Value, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rocos::Vec3Value, x_),
  PROTOBUF_FIELD_OFFSET(::rocos::Vec3Value, y_),
  PROTOBUF_FIELD_OFFSET(::rocos::Vec3Value, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rocos::JointArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rocos::JointArray, data_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::rocos::Vec2)},
  { 7, -1, sizeof(::rocos::Vec3)},
  { 15, -1, sizeof(::rocos::CylindricalCoordinate)},
  { 23, -1, sizeof(::rocos::Quaternion)},
  { 32, -1, sizeof(::rocos::Plane)},
  { 39, -1, sizeof(::rocos::Quad)},
  { 46, -1, sizeof(::rocos::Ray)},
  { 53, -1, sizeof(::rocos::SE2Pose)},
  { 60, -1, sizeof(::rocos::SE2Velocity)},
  { 67, -1, sizeof(::rocos::SE2VelocityLimit)},
  { 74, -1, sizeof(::rocos::SE3Pose)},
  { 81, -1, sizeof(::rocos::SE3Velocity)},
  { 88, -1, sizeof(::rocos::Wrench)},
  { 95, -1, sizeof(::rocos::FrameTreeSnapshot_ParentEdge)},
  { 102, 109, sizeof(::rocos::FrameTreeSnapshot_ChildToParentEdgeMapEntry_DoNotUse)},
  { 111, -1, sizeof(::rocos::FrameTreeSnapshot)},
  { 117, -1, sizeof(::rocos::Box2)},
  { 123, -1, sizeof(::rocos::Box2WithFrame)},
  { 131, -1, sizeof(::rocos::Box3)},
  { 137, -1, sizeof(::rocos::Box3WithFrame)},
  { 145, -1, sizeof(::rocos::Matrix)},
  { 153, -1, sizeof(::rocos::SE3Covariance)},
  { 169, -1, sizeof(::rocos::PolyLine)},
  { 175, -1, sizeof(::rocos::Polygon)},
  { 181, -1, sizeof(::rocos::PolygonWithExclusions)},
  { 188, -1, sizeof(::rocos::Circle)},
  { 195, -1, sizeof(::rocos::Area)},
  { 203, -1, sizeof(::rocos::Volume)},
  { 210, -1, sizeof(::rocos::Bounds)},
  { 217, -1, sizeof(::rocos::Vec2Value)},
  { 224, -1, sizeof(::rocos::Vec3Value)},
  { 232, -1, sizeof(::rocos::JointArray)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rocos::_Vec2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rocos::_Vec3_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rocos::_CylindricalCoordinate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rocos::_Quaternion_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rocos::_Plane_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rocos::_Quad_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rocos::_Ray_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rocos::_SE2Pose_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rocos::_SE2Velocity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rocos::_SE2VelocityLimit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rocos::_SE3Pose_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rocos::_SE3Velocity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rocos::_Wrench_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rocos::_FrameTreeSnapshot_ParentEdge_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rocos::_FrameTreeSnapshot_ChildToParentEdgeMapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rocos::_FrameTreeSnapshot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rocos::_Box2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rocos::_Box2WithFrame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rocos::_Box3_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rocos::_Box3WithFrame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rocos::_Matrix_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rocos::_SE3Covariance_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rocos::_PolyLine_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rocos::_Polygon_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rocos::_PolygonWithExclusions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rocos::_Circle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rocos::_Area_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rocos::_Volume_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rocos::_Bounds_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rocos::_Vec2Value_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rocos::_Vec3Value_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rocos::_JointArray_default_instance_),
};

const char descriptor_table_protodef_geometry_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016geometry.proto\022\005rocos\032\036google/protobuf"
  "/wrappers.proto\"\034\n\004Vec2\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030"
  "\002 \001(\001\"\'\n\004Vec3\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z"
  "\030\003 \001(\001\"<\n\025CylindricalCoordinate\022\t\n\001r\030\001 \001"
  "(\001\022\r\n\005theta\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\"8\n\nQuaterni"
  "on\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\022\t\n\001w"
  "\030\004 \001(\001\"@\n\005Plane\022\032\n\005point\030\001 \001(\0132\013.rocos.V"
  "ec3\022\033\n\006normal\030\002 \001(\0132\013.rocos.Vec3\"2\n\004Quad"
  "\022\034\n\004pose\030\001 \001(\0132\016.rocos.SE3Pose\022\014\n\004size\030\002"
  " \001(\001\"B\n\003Ray\022\033\n\006origin\030\001 \001(\0132\013.rocos.Vec3"
  "\022\036\n\tdirection\030\002 \001(\0132\013.rocos.Vec3\"7\n\007SE2P"
  "ose\022\035\n\010position\030\001 \001(\0132\013.rocos.Vec2\022\r\n\005an"
  "gle\030\002 \001(\001\";\n\013SE2Velocity\022\033\n\006linear\030\001 \001(\013"
  "2\013.rocos.Vec2\022\017\n\007angular\030\002 \001(\001\"\\\n\020SE2Vel"
  "ocityLimit\022#\n\007max_vel\030\001 \001(\0132\022.rocos.SE2V"
  "elocity\022#\n\007min_vel\030\002 \001(\0132\022.rocos.SE2Velo"
  "city\"M\n\007SE3Pose\022\035\n\010position\030\001 \001(\0132\013.roco"
  "s.Vec3\022#\n\010rotation\030\002 \001(\0132\021.rocos.Quatern"
  "ion\"H\n\013SE3Velocity\022\033\n\006linear\030\001 \001(\0132\013.roc"
  "os.Vec3\022\034\n\007angular\030\002 \001(\0132\013.rocos.Vec3\"A\n"
  "\006Wrench\022\032\n\005force\030\001 \001(\0132\013.rocos.Vec3\022\033\n\006t"
  "orque\030\002 \001(\0132\013.rocos.Vec3\"\240\002\n\021FrameTreeSn"
  "apshot\022T\n\030child_to_parent_edge_map\030\001 \003(\013"
  "22.rocos.FrameTreeSnapshot.ChildToParent"
  "EdgeMapEntry\032S\n\nParentEdge\022\031\n\021parent_fra"
  "me_name\030\001 \001(\t\022*\n\022parent_tform_child\030\002 \001("
  "\0132\016.rocos.SE3Pose\032`\n\031ChildToParentEdgeMa"
  "pEntry\022\013\n\003key\030\001 \001(\t\0222\n\005value\030\002 \001(\0132#.roc"
  "os.FrameTreeSnapshot.ParentEdge:\0028\001\"!\n\004B"
  "ox2\022\031\n\004size\030\001 \001(\0132\013.rocos.Vec2\"k\n\rBox2Wi"
  "thFrame\022\030\n\003box\030\001 \001(\0132\013.rocos.Box2\022\022\n\nfra"
  "me_name\030\002 \001(\t\022,\n\024frame_name_tform_box\030\003 "
  "\001(\0132\016.rocos.SE3Pose\"!\n\004Box3\022\031\n\004size\030\001 \001("
  "\0132\013.rocos.Vec3\"k\n\rBox3WithFrame\022\030\n\003box\030\001"
  " \001(\0132\013.rocos.Box3\022\022\n\nframe_name\030\002 \001(\t\022,\n"
  "\024frame_name_tform_box\030\003 \001(\0132\016.rocos.SE3P"
  "ose\"4\n\006Matrix\022\014\n\004rows\030\001 \001(\005\022\014\n\004cols\030\002 \001("
  "\005\022\016\n\006values\030\003 \003(\001\"\374\001\n\rSE3Covariance\022\035\n\006m"
  "atrix\030\001 \001(\0132\r.rocos.Matrix\022\030\n\014yaw_varian"
  "ce\030\002 \001(\001B\002\030\001\022\022\n\006cov_xx\030\003 \001(\001B\002\030\001\022\022\n\006cov_"
  "xy\030\004 \001(\001B\002\030\001\022\022\n\006cov_xz\030\005 \001(\001B\002\030\001\022\022\n\006cov_"
  "yx\030\006 \001(\001B\002\030\001\022\022\n\006cov_yy\030\007 \001(\001B\002\030\001\022\022\n\006cov_"
  "yz\030\010 \001(\001B\002\030\001\022\022\n\006cov_zx\030\t \001(\001B\002\030\001\022\022\n\006cov_"
  "zy\030\n \001(\001B\002\030\001\022\022\n\006cov_zz\030\013 \001(\001B\002\030\001\"\'\n\010Poly"
  "Line\022\033\n\006points\030\001 \003(\0132\013.rocos.Vec2\"(\n\007Pol"
  "ygon\022\035\n\010vertexes\030\001 \003(\0132\013.rocos.Vec2\"^\n\025P"
  "olygonWithExclusions\022!\n\tinclusion\030\005 \001(\0132"
  "\016.rocos.Polygon\022\"\n\nexclusions\030\006 \003(\0132\016.ro"
  "cos.Polygon\"8\n\006Circle\022\036\n\tcenter_pt\030\001 \001(\013"
  "2\013.rocos.Vec2\022\016\n\006radius\030\002 \001(\001\"V\n\004Area\022!\n"
  "\007polygon\030\001 \001(\0132\016.rocos.PolygonH\000\022\037\n\006circ"
  "le\030\002 \001(\0132\r.rocos.CircleH\000B\n\n\010geometry\"0\n"
  "\006Volume\022\032\n\003box\030\001 \001(\0132\013.rocos.Vec3H\000B\n\n\010g"
  "eometry\"&\n\006Bounds\022\r\n\005lower\030\001 \001(\001\022\r\n\005uppe"
  "r\030\002 \001(\001\"]\n\tVec2Value\022\'\n\001x\030\001 \001(\0132\034.google"
  ".protobuf.DoubleValue\022\'\n\001y\030\002 \001(\0132\034.googl"
  "e.protobuf.DoubleValue\"\206\001\n\tVec3Value\022\'\n\001"
  "x\030\001 \001(\0132\034.google.protobuf.DoubleValue\022\'\n"
  "\001y\030\002 \001(\0132\034.google.protobuf.DoubleValue\022\'"
  "\n\001z\030\003 \001(\0132\034.google.protobuf.DoubleValue\""
  "\032\n\nJointArray\022\014\n\004data\030\001 \003(\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_geometry_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_geometry_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_geometry_2eproto = {
  false, false, 2435, descriptor_table_protodef_geometry_2eproto, "geometry.proto", 
  &descriptor_table_geometry_2eproto_once, descriptor_table_geometry_2eproto_deps, 1, 32,
  schemas, file_default_instances, TableStruct_geometry_2eproto::offsets,
  file_level_metadata_geometry_2eproto, file_level_enum_descriptors_geometry_2eproto, file_level_service_descriptors_geometry_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_geometry_2eproto_getter() {
  return &descriptor_table_geometry_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_geometry_2eproto(&descriptor_table_geometry_2eproto);
namespace rocos {

// ===================================================================

class Vec2::_Internal {
 public:
};

Vec2::Vec2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rocos.Vec2)
}
Vec2::Vec2(const Vec2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:rocos.Vec2)
}

inline void Vec2::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

Vec2::~Vec2() {
  // @@protoc_insertion_point(destructor:rocos.Vec2)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Vec2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vec2::ArenaDtor(void* object) {
  Vec2* _this = reinterpret_cast< Vec2* >(object);
  (void)_this;
}
void Vec2::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Vec2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Vec2::Clear() {
// @@protoc_insertion_point(message_clear_start:rocos.Vec2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vec2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vec2::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocos.Vec2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->_internal_x() <= 0 && this->_internal_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // double y = 2;
  if (!(this->_internal_y() <= 0 && this->_internal_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocos.Vec2)
  return target;
}

size_t Vec2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocos.Vec2)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->_internal_x() <= 0 && this->_internal_x() >= 0)) {
    total_size += 1 + 8;
  }

  // double y = 2;
  if (!(this->_internal_y() <= 0 && this->_internal_y() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vec2::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Vec2::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vec2::GetClassData() const { return &_class_data_; }

void Vec2::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Vec2 *>(to)->MergeFrom(
      static_cast<const Vec2 &>(from));
}


void Vec2::MergeFrom(const Vec2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rocos.Vec2)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from._internal_x() <= 0 && from._internal_x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from._internal_y() <= 0 && from._internal_y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vec2::CopyFrom(const Vec2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocos.Vec2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vec2::IsInitialized() const {
  return true;
}

void Vec2::InternalSwap(Vec2* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vec2, y_)
      + sizeof(Vec2::y_)
      - PROTOBUF_FIELD_OFFSET(Vec2, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vec2::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_geometry_2eproto_getter, &descriptor_table_geometry_2eproto_once,
      file_level_metadata_geometry_2eproto[0]);
}

// ===================================================================

class Vec3::_Internal {
 public:
};

Vec3::Vec3(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rocos.Vec3)
}
Vec3::Vec3(const Vec3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:rocos.Vec3)
}

inline void Vec3::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Vec3::~Vec3() {
  // @@protoc_insertion_point(destructor:rocos.Vec3)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Vec3::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vec3::ArenaDtor(void* object) {
  Vec3* _this = reinterpret_cast< Vec3* >(object);
  (void)_this;
}
void Vec3::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Vec3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Vec3::Clear() {
// @@protoc_insertion_point(message_clear_start:rocos.Vec3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vec3::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vec3::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocos.Vec3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->_internal_x() <= 0 && this->_internal_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // double y = 2;
  if (!(this->_internal_y() <= 0 && this->_internal_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  // double z = 3;
  if (!(this->_internal_z() <= 0 && this->_internal_z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocos.Vec3)
  return target;
}

size_t Vec3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocos.Vec3)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->_internal_x() <= 0 && this->_internal_x() >= 0)) {
    total_size += 1 + 8;
  }

  // double y = 2;
  if (!(this->_internal_y() <= 0 && this->_internal_y() >= 0)) {
    total_size += 1 + 8;
  }

  // double z = 3;
  if (!(this->_internal_z() <= 0 && this->_internal_z() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vec3::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Vec3::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vec3::GetClassData() const { return &_class_data_; }

void Vec3::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Vec3 *>(to)->MergeFrom(
      static_cast<const Vec3 &>(from));
}


void Vec3::MergeFrom(const Vec3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rocos.Vec3)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from._internal_x() <= 0 && from._internal_x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from._internal_y() <= 0 && from._internal_y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from._internal_z() <= 0 && from._internal_z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vec3::CopyFrom(const Vec3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocos.Vec3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vec3::IsInitialized() const {
  return true;
}

void Vec3::InternalSwap(Vec3* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vec3, z_)
      + sizeof(Vec3::z_)
      - PROTOBUF_FIELD_OFFSET(Vec3, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vec3::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_geometry_2eproto_getter, &descriptor_table_geometry_2eproto_once,
      file_level_metadata_geometry_2eproto[1]);
}

// ===================================================================

class CylindricalCoordinate::_Internal {
 public:
};

CylindricalCoordinate::CylindricalCoordinate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rocos.CylindricalCoordinate)
}
CylindricalCoordinate::CylindricalCoordinate(const CylindricalCoordinate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&r_, &from.r_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&r_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:rocos.CylindricalCoordinate)
}

inline void CylindricalCoordinate::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&r_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&r_)) + sizeof(z_));
}

CylindricalCoordinate::~CylindricalCoordinate() {
  // @@protoc_insertion_point(destructor:rocos.CylindricalCoordinate)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CylindricalCoordinate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CylindricalCoordinate::ArenaDtor(void* object) {
  CylindricalCoordinate* _this = reinterpret_cast< CylindricalCoordinate* >(object);
  (void)_this;
}
void CylindricalCoordinate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CylindricalCoordinate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CylindricalCoordinate::Clear() {
// @@protoc_insertion_point(message_clear_start:rocos.CylindricalCoordinate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&r_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&r_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CylindricalCoordinate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double r = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          r_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double theta = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          theta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CylindricalCoordinate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocos.CylindricalCoordinate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double r = 1;
  if (!(this->_internal_r() <= 0 && this->_internal_r() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_r(), target);
  }

  // double theta = 2;
  if (!(this->_internal_theta() <= 0 && this->_internal_theta() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_theta(), target);
  }

  // double z = 3;
  if (!(this->_internal_z() <= 0 && this->_internal_z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocos.CylindricalCoordinate)
  return target;
}

size_t CylindricalCoordinate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocos.CylindricalCoordinate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double r = 1;
  if (!(this->_internal_r() <= 0 && this->_internal_r() >= 0)) {
    total_size += 1 + 8;
  }

  // double theta = 2;
  if (!(this->_internal_theta() <= 0 && this->_internal_theta() >= 0)) {
    total_size += 1 + 8;
  }

  // double z = 3;
  if (!(this->_internal_z() <= 0 && this->_internal_z() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CylindricalCoordinate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CylindricalCoordinate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CylindricalCoordinate::GetClassData() const { return &_class_data_; }

void CylindricalCoordinate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CylindricalCoordinate *>(to)->MergeFrom(
      static_cast<const CylindricalCoordinate &>(from));
}


void CylindricalCoordinate::MergeFrom(const CylindricalCoordinate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rocos.CylindricalCoordinate)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from._internal_r() <= 0 && from._internal_r() >= 0)) {
    _internal_set_r(from._internal_r());
  }
  if (!(from._internal_theta() <= 0 && from._internal_theta() >= 0)) {
    _internal_set_theta(from._internal_theta());
  }
  if (!(from._internal_z() <= 0 && from._internal_z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CylindricalCoordinate::CopyFrom(const CylindricalCoordinate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocos.CylindricalCoordinate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CylindricalCoordinate::IsInitialized() const {
  return true;
}

void CylindricalCoordinate::InternalSwap(CylindricalCoordinate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CylindricalCoordinate, z_)
      + sizeof(CylindricalCoordinate::z_)
      - PROTOBUF_FIELD_OFFSET(CylindricalCoordinate, r_)>(
          reinterpret_cast<char*>(&r_),
          reinterpret_cast<char*>(&other->r_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CylindricalCoordinate::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_geometry_2eproto_getter, &descriptor_table_geometry_2eproto_once,
      file_level_metadata_geometry_2eproto[2]);
}

// ===================================================================

class Quaternion::_Internal {
 public:
};

Quaternion::Quaternion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rocos.Quaternion)
}
Quaternion::Quaternion(const Quaternion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&w_) -
    reinterpret_cast<char*>(&x_)) + sizeof(w_));
  // @@protoc_insertion_point(copy_constructor:rocos.Quaternion)
}

inline void Quaternion::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&w_) -
    reinterpret_cast<char*>(&x_)) + sizeof(w_));
}

Quaternion::~Quaternion() {
  // @@protoc_insertion_point(destructor:rocos.Quaternion)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Quaternion::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Quaternion::ArenaDtor(void* object) {
  Quaternion* _this = reinterpret_cast< Quaternion* >(object);
  (void)_this;
}
void Quaternion::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Quaternion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Quaternion::Clear() {
// @@protoc_insertion_point(message_clear_start:rocos.Quaternion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&w_) -
      reinterpret_cast<char*>(&x_)) + sizeof(w_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Quaternion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double w = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          w_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Quaternion::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocos.Quaternion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->_internal_x() <= 0 && this->_internal_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // double y = 2;
  if (!(this->_internal_y() <= 0 && this->_internal_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  // double z = 3;
  if (!(this->_internal_z() <= 0 && this->_internal_z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_z(), target);
  }

  // double w = 4;
  if (!(this->_internal_w() <= 0 && this->_internal_w() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_w(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocos.Quaternion)
  return target;
}

size_t Quaternion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocos.Quaternion)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->_internal_x() <= 0 && this->_internal_x() >= 0)) {
    total_size += 1 + 8;
  }

  // double y = 2;
  if (!(this->_internal_y() <= 0 && this->_internal_y() >= 0)) {
    total_size += 1 + 8;
  }

  // double z = 3;
  if (!(this->_internal_z() <= 0 && this->_internal_z() >= 0)) {
    total_size += 1 + 8;
  }

  // double w = 4;
  if (!(this->_internal_w() <= 0 && this->_internal_w() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Quaternion::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Quaternion::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Quaternion::GetClassData() const { return &_class_data_; }

void Quaternion::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Quaternion *>(to)->MergeFrom(
      static_cast<const Quaternion &>(from));
}


void Quaternion::MergeFrom(const Quaternion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rocos.Quaternion)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from._internal_x() <= 0 && from._internal_x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from._internal_y() <= 0 && from._internal_y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from._internal_z() <= 0 && from._internal_z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
  if (!(from._internal_w() <= 0 && from._internal_w() >= 0)) {
    _internal_set_w(from._internal_w());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Quaternion::CopyFrom(const Quaternion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocos.Quaternion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Quaternion::IsInitialized() const {
  return true;
}

void Quaternion::InternalSwap(Quaternion* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Quaternion, w_)
      + sizeof(Quaternion::w_)
      - PROTOBUF_FIELD_OFFSET(Quaternion, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Quaternion::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_geometry_2eproto_getter, &descriptor_table_geometry_2eproto_once,
      file_level_metadata_geometry_2eproto[3]);
}

// ===================================================================

class Plane::_Internal {
 public:
  static const ::rocos::Vec3& point(const Plane* msg);
  static const ::rocos::Vec3& normal(const Plane* msg);
};

const ::rocos::Vec3&
Plane::_Internal::point(const Plane* msg) {
  return *msg->point_;
}
const ::rocos::Vec3&
Plane::_Internal::normal(const Plane* msg) {
  return *msg->normal_;
}
Plane::Plane(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rocos.Plane)
}
Plane::Plane(const Plane& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_point()) {
    point_ = new ::rocos::Vec3(*from.point_);
  } else {
    point_ = nullptr;
  }
  if (from._internal_has_normal()) {
    normal_ = new ::rocos::Vec3(*from.normal_);
  } else {
    normal_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:rocos.Plane)
}

inline void Plane::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&point_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&normal_) -
    reinterpret_cast<char*>(&point_)) + sizeof(normal_));
}

Plane::~Plane() {
  // @@protoc_insertion_point(destructor:rocos.Plane)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Plane::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete point_;
  if (this != internal_default_instance()) delete normal_;
}

void Plane::ArenaDtor(void* object) {
  Plane* _this = reinterpret_cast< Plane* >(object);
  (void)_this;
}
void Plane::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Plane::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Plane::Clear() {
// @@protoc_insertion_point(message_clear_start:rocos.Plane)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && point_ != nullptr) {
    delete point_;
  }
  point_ = nullptr;
  if (GetArenaForAllocation() == nullptr && normal_ != nullptr) {
    delete normal_;
  }
  normal_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Plane::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .rocos.Vec3 point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .rocos.Vec3 normal = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_normal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Plane::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocos.Plane)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rocos.Vec3 point = 1;
  if (this->_internal_has_point()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::point(this), target, stream);
  }

  // .rocos.Vec3 normal = 2;
  if (this->_internal_has_normal()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::normal(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocos.Plane)
  return target;
}

size_t Plane::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocos.Plane)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .rocos.Vec3 point = 1;
  if (this->_internal_has_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *point_);
  }

  // .rocos.Vec3 normal = 2;
  if (this->_internal_has_normal()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *normal_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Plane::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Plane::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Plane::GetClassData() const { return &_class_data_; }

void Plane::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Plane *>(to)->MergeFrom(
      static_cast<const Plane &>(from));
}


void Plane::MergeFrom(const Plane& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rocos.Plane)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_point()) {
    _internal_mutable_point()->::rocos::Vec3::MergeFrom(from._internal_point());
  }
  if (from._internal_has_normal()) {
    _internal_mutable_normal()->::rocos::Vec3::MergeFrom(from._internal_normal());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Plane::CopyFrom(const Plane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocos.Plane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Plane::IsInitialized() const {
  return true;
}

void Plane::InternalSwap(Plane* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Plane, normal_)
      + sizeof(Plane::normal_)
      - PROTOBUF_FIELD_OFFSET(Plane, point_)>(
          reinterpret_cast<char*>(&point_),
          reinterpret_cast<char*>(&other->point_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Plane::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_geometry_2eproto_getter, &descriptor_table_geometry_2eproto_once,
      file_level_metadata_geometry_2eproto[4]);
}

// ===================================================================

class Quad::_Internal {
 public:
  static const ::rocos::SE3Pose& pose(const Quad* msg);
};

const ::rocos::SE3Pose&
Quad::_Internal::pose(const Quad* msg) {
  return *msg->pose_;
}
Quad::Quad(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rocos.Quad)
}
Quad::Quad(const Quad& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pose()) {
    pose_ = new ::rocos::SE3Pose(*from.pose_);
  } else {
    pose_ = nullptr;
  }
  size_ = from.size_;
  // @@protoc_insertion_point(copy_constructor:rocos.Quad)
}

inline void Quad::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pose_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&pose_)) + sizeof(size_));
}

Quad::~Quad() {
  // @@protoc_insertion_point(destructor:rocos.Quad)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Quad::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete pose_;
}

void Quad::ArenaDtor(void* object) {
  Quad* _this = reinterpret_cast< Quad* >(object);
  (void)_this;
}
void Quad::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Quad::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Quad::Clear() {
// @@protoc_insertion_point(message_clear_start:rocos.Quad)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
  size_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Quad::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .rocos.SE3Pose pose = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Quad::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocos.Quad)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rocos.SE3Pose pose = 1;
  if (this->_internal_has_pose()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pose(this), target, stream);
  }

  // double size = 2;
  if (!(this->_internal_size() <= 0 && this->_internal_size() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocos.Quad)
  return target;
}

size_t Quad::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocos.Quad)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .rocos.SE3Pose pose = 1;
  if (this->_internal_has_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pose_);
  }

  // double size = 2;
  if (!(this->_internal_size() <= 0 && this->_internal_size() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Quad::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Quad::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Quad::GetClassData() const { return &_class_data_; }

void Quad::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Quad *>(to)->MergeFrom(
      static_cast<const Quad &>(from));
}


void Quad::MergeFrom(const Quad& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rocos.Quad)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pose()) {
    _internal_mutable_pose()->::rocos::SE3Pose::MergeFrom(from._internal_pose());
  }
  if (!(from._internal_size() <= 0 && from._internal_size() >= 0)) {
    _internal_set_size(from._internal_size());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Quad::CopyFrom(const Quad& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocos.Quad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Quad::IsInitialized() const {
  return true;
}

void Quad::InternalSwap(Quad* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Quad, size_)
      + sizeof(Quad::size_)
      - PROTOBUF_FIELD_OFFSET(Quad, pose_)>(
          reinterpret_cast<char*>(&pose_),
          reinterpret_cast<char*>(&other->pose_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Quad::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_geometry_2eproto_getter, &descriptor_table_geometry_2eproto_once,
      file_level_metadata_geometry_2eproto[5]);
}

// ===================================================================

class Ray::_Internal {
 public:
  static const ::rocos::Vec3& origin(const Ray* msg);
  static const ::rocos::Vec3& direction(const Ray* msg);
};

const ::rocos::Vec3&
Ray::_Internal::origin(const Ray* msg) {
  return *msg->origin_;
}
const ::rocos::Vec3&
Ray::_Internal::direction(const Ray* msg) {
  return *msg->direction_;
}
Ray::Ray(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rocos.Ray)
}
Ray::Ray(const Ray& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_origin()) {
    origin_ = new ::rocos::Vec3(*from.origin_);
  } else {
    origin_ = nullptr;
  }
  if (from._internal_has_direction()) {
    direction_ = new ::rocos::Vec3(*from.direction_);
  } else {
    direction_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:rocos.Ray)
}

inline void Ray::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&origin_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&direction_) -
    reinterpret_cast<char*>(&origin_)) + sizeof(direction_));
}

Ray::~Ray() {
  // @@protoc_insertion_point(destructor:rocos.Ray)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Ray::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete origin_;
  if (this != internal_default_instance()) delete direction_;
}

void Ray::ArenaDtor(void* object) {
  Ray* _this = reinterpret_cast< Ray* >(object);
  (void)_this;
}
void Ray::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Ray::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Ray::Clear() {
// @@protoc_insertion_point(message_clear_start:rocos.Ray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && origin_ != nullptr) {
    delete origin_;
  }
  origin_ = nullptr;
  if (GetArenaForAllocation() == nullptr && direction_ != nullptr) {
    delete direction_;
  }
  direction_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Ray::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .rocos.Vec3 origin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_origin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .rocos.Vec3 direction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_direction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Ray::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocos.Ray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rocos.Vec3 origin = 1;
  if (this->_internal_has_origin()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::origin(this), target, stream);
  }

  // .rocos.Vec3 direction = 2;
  if (this->_internal_has_direction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::direction(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocos.Ray)
  return target;
}

size_t Ray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocos.Ray)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .rocos.Vec3 origin = 1;
  if (this->_internal_has_origin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *origin_);
  }

  // .rocos.Vec3 direction = 2;
  if (this->_internal_has_direction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *direction_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Ray::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Ray::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Ray::GetClassData() const { return &_class_data_; }

void Ray::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Ray *>(to)->MergeFrom(
      static_cast<const Ray &>(from));
}


void Ray::MergeFrom(const Ray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rocos.Ray)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_origin()) {
    _internal_mutable_origin()->::rocos::Vec3::MergeFrom(from._internal_origin());
  }
  if (from._internal_has_direction()) {
    _internal_mutable_direction()->::rocos::Vec3::MergeFrom(from._internal_direction());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Ray::CopyFrom(const Ray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocos.Ray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ray::IsInitialized() const {
  return true;
}

void Ray::InternalSwap(Ray* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Ray, direction_)
      + sizeof(Ray::direction_)
      - PROTOBUF_FIELD_OFFSET(Ray, origin_)>(
          reinterpret_cast<char*>(&origin_),
          reinterpret_cast<char*>(&other->origin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Ray::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_geometry_2eproto_getter, &descriptor_table_geometry_2eproto_once,
      file_level_metadata_geometry_2eproto[6]);
}

// ===================================================================

class SE2Pose::_Internal {
 public:
  static const ::rocos::Vec2& position(const SE2Pose* msg);
};

const ::rocos::Vec2&
SE2Pose::_Internal::position(const SE2Pose* msg) {
  return *msg->position_;
}
SE2Pose::SE2Pose(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rocos.SE2Pose)
}
SE2Pose::SE2Pose(const SE2Pose& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::rocos::Vec2(*from.position_);
  } else {
    position_ = nullptr;
  }
  angle_ = from.angle_;
  // @@protoc_insertion_point(copy_constructor:rocos.SE2Pose)
}

inline void SE2Pose::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&position_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&angle_) -
    reinterpret_cast<char*>(&position_)) + sizeof(angle_));
}

SE2Pose::~SE2Pose() {
  // @@protoc_insertion_point(destructor:rocos.SE2Pose)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SE2Pose::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete position_;
}

void SE2Pose::ArenaDtor(void* object) {
  SE2Pose* _this = reinterpret_cast< SE2Pose* >(object);
  (void)_this;
}
void SE2Pose::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SE2Pose::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SE2Pose::Clear() {
// @@protoc_insertion_point(message_clear_start:rocos.SE2Pose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  angle_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SE2Pose::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .rocos.Vec2 position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double angle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SE2Pose::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocos.SE2Pose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rocos.Vec2 position = 1;
  if (this->_internal_has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::position(this), target, stream);
  }

  // double angle = 2;
  if (!(this->_internal_angle() <= 0 && this->_internal_angle() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_angle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocos.SE2Pose)
  return target;
}

size_t SE2Pose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocos.SE2Pose)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .rocos.Vec2 position = 1;
  if (this->_internal_has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // double angle = 2;
  if (!(this->_internal_angle() <= 0 && this->_internal_angle() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SE2Pose::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SE2Pose::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SE2Pose::GetClassData() const { return &_class_data_; }

void SE2Pose::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SE2Pose *>(to)->MergeFrom(
      static_cast<const SE2Pose &>(from));
}


void SE2Pose::MergeFrom(const SE2Pose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rocos.SE2Pose)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_position()) {
    _internal_mutable_position()->::rocos::Vec2::MergeFrom(from._internal_position());
  }
  if (!(from._internal_angle() <= 0 && from._internal_angle() >= 0)) {
    _internal_set_angle(from._internal_angle());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SE2Pose::CopyFrom(const SE2Pose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocos.SE2Pose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SE2Pose::IsInitialized() const {
  return true;
}

void SE2Pose::InternalSwap(SE2Pose* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SE2Pose, angle_)
      + sizeof(SE2Pose::angle_)
      - PROTOBUF_FIELD_OFFSET(SE2Pose, position_)>(
          reinterpret_cast<char*>(&position_),
          reinterpret_cast<char*>(&other->position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SE2Pose::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_geometry_2eproto_getter, &descriptor_table_geometry_2eproto_once,
      file_level_metadata_geometry_2eproto[7]);
}

// ===================================================================

class SE2Velocity::_Internal {
 public:
  static const ::rocos::Vec2& linear(const SE2Velocity* msg);
};

const ::rocos::Vec2&
SE2Velocity::_Internal::linear(const SE2Velocity* msg) {
  return *msg->linear_;
}
SE2Velocity::SE2Velocity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rocos.SE2Velocity)
}
SE2Velocity::SE2Velocity(const SE2Velocity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_linear()) {
    linear_ = new ::rocos::Vec2(*from.linear_);
  } else {
    linear_ = nullptr;
  }
  angular_ = from.angular_;
  // @@protoc_insertion_point(copy_constructor:rocos.SE2Velocity)
}

inline void SE2Velocity::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&linear_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&angular_) -
    reinterpret_cast<char*>(&linear_)) + sizeof(angular_));
}

SE2Velocity::~SE2Velocity() {
  // @@protoc_insertion_point(destructor:rocos.SE2Velocity)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SE2Velocity::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete linear_;
}

void SE2Velocity::ArenaDtor(void* object) {
  SE2Velocity* _this = reinterpret_cast< SE2Velocity* >(object);
  (void)_this;
}
void SE2Velocity::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SE2Velocity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SE2Velocity::Clear() {
// @@protoc_insertion_point(message_clear_start:rocos.SE2Velocity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && linear_ != nullptr) {
    delete linear_;
  }
  linear_ = nullptr;
  angular_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SE2Velocity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .rocos.Vec2 linear = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_linear(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double angular = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          angular_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SE2Velocity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocos.SE2Velocity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rocos.Vec2 linear = 1;
  if (this->_internal_has_linear()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::linear(this), target, stream);
  }

  // double angular = 2;
  if (!(this->_internal_angular() <= 0 && this->_internal_angular() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_angular(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocos.SE2Velocity)
  return target;
}

size_t SE2Velocity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocos.SE2Velocity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .rocos.Vec2 linear = 1;
  if (this->_internal_has_linear()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *linear_);
  }

  // double angular = 2;
  if (!(this->_internal_angular() <= 0 && this->_internal_angular() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SE2Velocity::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SE2Velocity::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SE2Velocity::GetClassData() const { return &_class_data_; }

void SE2Velocity::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SE2Velocity *>(to)->MergeFrom(
      static_cast<const SE2Velocity &>(from));
}


void SE2Velocity::MergeFrom(const SE2Velocity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rocos.SE2Velocity)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_linear()) {
    _internal_mutable_linear()->::rocos::Vec2::MergeFrom(from._internal_linear());
  }
  if (!(from._internal_angular() <= 0 && from._internal_angular() >= 0)) {
    _internal_set_angular(from._internal_angular());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SE2Velocity::CopyFrom(const SE2Velocity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocos.SE2Velocity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SE2Velocity::IsInitialized() const {
  return true;
}

void SE2Velocity::InternalSwap(SE2Velocity* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SE2Velocity, angular_)
      + sizeof(SE2Velocity::angular_)
      - PROTOBUF_FIELD_OFFSET(SE2Velocity, linear_)>(
          reinterpret_cast<char*>(&linear_),
          reinterpret_cast<char*>(&other->linear_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SE2Velocity::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_geometry_2eproto_getter, &descriptor_table_geometry_2eproto_once,
      file_level_metadata_geometry_2eproto[8]);
}

// ===================================================================

class SE2VelocityLimit::_Internal {
 public:
  static const ::rocos::SE2Velocity& max_vel(const SE2VelocityLimit* msg);
  static const ::rocos::SE2Velocity& min_vel(const SE2VelocityLimit* msg);
};

const ::rocos::SE2Velocity&
SE2VelocityLimit::_Internal::max_vel(const SE2VelocityLimit* msg) {
  return *msg->max_vel_;
}
const ::rocos::SE2Velocity&
SE2VelocityLimit::_Internal::min_vel(const SE2VelocityLimit* msg) {
  return *msg->min_vel_;
}
SE2VelocityLimit::SE2VelocityLimit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rocos.SE2VelocityLimit)
}
SE2VelocityLimit::SE2VelocityLimit(const SE2VelocityLimit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_max_vel()) {
    max_vel_ = new ::rocos::SE2Velocity(*from.max_vel_);
  } else {
    max_vel_ = nullptr;
  }
  if (from._internal_has_min_vel()) {
    min_vel_ = new ::rocos::SE2Velocity(*from.min_vel_);
  } else {
    min_vel_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:rocos.SE2VelocityLimit)
}

inline void SE2VelocityLimit::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&max_vel_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&min_vel_) -
    reinterpret_cast<char*>(&max_vel_)) + sizeof(min_vel_));
}

SE2VelocityLimit::~SE2VelocityLimit() {
  // @@protoc_insertion_point(destructor:rocos.SE2VelocityLimit)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SE2VelocityLimit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete max_vel_;
  if (this != internal_default_instance()) delete min_vel_;
}

void SE2VelocityLimit::ArenaDtor(void* object) {
  SE2VelocityLimit* _this = reinterpret_cast< SE2VelocityLimit* >(object);
  (void)_this;
}
void SE2VelocityLimit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SE2VelocityLimit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SE2VelocityLimit::Clear() {
// @@protoc_insertion_point(message_clear_start:rocos.SE2VelocityLimit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && max_vel_ != nullptr) {
    delete max_vel_;
  }
  max_vel_ = nullptr;
  if (GetArenaForAllocation() == nullptr && min_vel_ != nullptr) {
    delete min_vel_;
  }
  min_vel_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SE2VelocityLimit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .rocos.SE2Velocity max_vel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_max_vel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .rocos.SE2Velocity min_vel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_min_vel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SE2VelocityLimit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocos.SE2VelocityLimit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rocos.SE2Velocity max_vel = 1;
  if (this->_internal_has_max_vel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::max_vel(this), target, stream);
  }

  // .rocos.SE2Velocity min_vel = 2;
  if (this->_internal_has_min_vel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::min_vel(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocos.SE2VelocityLimit)
  return target;
}

size_t SE2VelocityLimit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocos.SE2VelocityLimit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .rocos.SE2Velocity max_vel = 1;
  if (this->_internal_has_max_vel()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *max_vel_);
  }

  // .rocos.SE2Velocity min_vel = 2;
  if (this->_internal_has_min_vel()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *min_vel_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SE2VelocityLimit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SE2VelocityLimit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SE2VelocityLimit::GetClassData() const { return &_class_data_; }

void SE2VelocityLimit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SE2VelocityLimit *>(to)->MergeFrom(
      static_cast<const SE2VelocityLimit &>(from));
}


void SE2VelocityLimit::MergeFrom(const SE2VelocityLimit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rocos.SE2VelocityLimit)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_max_vel()) {
    _internal_mutable_max_vel()->::rocos::SE2Velocity::MergeFrom(from._internal_max_vel());
  }
  if (from._internal_has_min_vel()) {
    _internal_mutable_min_vel()->::rocos::SE2Velocity::MergeFrom(from._internal_min_vel());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SE2VelocityLimit::CopyFrom(const SE2VelocityLimit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocos.SE2VelocityLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SE2VelocityLimit::IsInitialized() const {
  return true;
}

void SE2VelocityLimit::InternalSwap(SE2VelocityLimit* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SE2VelocityLimit, min_vel_)
      + sizeof(SE2VelocityLimit::min_vel_)
      - PROTOBUF_FIELD_OFFSET(SE2VelocityLimit, max_vel_)>(
          reinterpret_cast<char*>(&max_vel_),
          reinterpret_cast<char*>(&other->max_vel_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SE2VelocityLimit::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_geometry_2eproto_getter, &descriptor_table_geometry_2eproto_once,
      file_level_metadata_geometry_2eproto[9]);
}

// ===================================================================

class SE3Pose::_Internal {
 public:
  static const ::rocos::Vec3& position(const SE3Pose* msg);
  static const ::rocos::Quaternion& rotation(const SE3Pose* msg);
};

const ::rocos::Vec3&
SE3Pose::_Internal::position(const SE3Pose* msg) {
  return *msg->position_;
}
const ::rocos::Quaternion&
SE3Pose::_Internal::rotation(const SE3Pose* msg) {
  return *msg->rotation_;
}
SE3Pose::SE3Pose(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rocos.SE3Pose)
}
SE3Pose::SE3Pose(const SE3Pose& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::rocos::Vec3(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from._internal_has_rotation()) {
    rotation_ = new ::rocos::Quaternion(*from.rotation_);
  } else {
    rotation_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:rocos.SE3Pose)
}

inline void SE3Pose::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&position_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rotation_) -
    reinterpret_cast<char*>(&position_)) + sizeof(rotation_));
}

SE3Pose::~SE3Pose() {
  // @@protoc_insertion_point(destructor:rocos.SE3Pose)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SE3Pose::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete rotation_;
}

void SE3Pose::ArenaDtor(void* object) {
  SE3Pose* _this = reinterpret_cast< SE3Pose* >(object);
  (void)_this;
}
void SE3Pose::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SE3Pose::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SE3Pose::Clear() {
// @@protoc_insertion_point(message_clear_start:rocos.SE3Pose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  if (GetArenaForAllocation() == nullptr && rotation_ != nullptr) {
    delete rotation_;
  }
  rotation_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SE3Pose::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .rocos.Vec3 position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .rocos.Quaternion rotation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SE3Pose::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocos.SE3Pose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rocos.Vec3 position = 1;
  if (this->_internal_has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::position(this), target, stream);
  }

  // .rocos.Quaternion rotation = 2;
  if (this->_internal_has_rotation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::rotation(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocos.SE3Pose)
  return target;
}

size_t SE3Pose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocos.SE3Pose)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .rocos.Vec3 position = 1;
  if (this->_internal_has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .rocos.Quaternion rotation = 2;
  if (this->_internal_has_rotation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rotation_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SE3Pose::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SE3Pose::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SE3Pose::GetClassData() const { return &_class_data_; }

void SE3Pose::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SE3Pose *>(to)->MergeFrom(
      static_cast<const SE3Pose &>(from));
}


void SE3Pose::MergeFrom(const SE3Pose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rocos.SE3Pose)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_position()) {
    _internal_mutable_position()->::rocos::Vec3::MergeFrom(from._internal_position());
  }
  if (from._internal_has_rotation()) {
    _internal_mutable_rotation()->::rocos::Quaternion::MergeFrom(from._internal_rotation());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SE3Pose::CopyFrom(const SE3Pose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocos.SE3Pose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SE3Pose::IsInitialized() const {
  return true;
}

void SE3Pose::InternalSwap(SE3Pose* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SE3Pose, rotation_)
      + sizeof(SE3Pose::rotation_)
      - PROTOBUF_FIELD_OFFSET(SE3Pose, position_)>(
          reinterpret_cast<char*>(&position_),
          reinterpret_cast<char*>(&other->position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SE3Pose::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_geometry_2eproto_getter, &descriptor_table_geometry_2eproto_once,
      file_level_metadata_geometry_2eproto[10]);
}

// ===================================================================

class SE3Velocity::_Internal {
 public:
  static const ::rocos::Vec3& linear(const SE3Velocity* msg);
  static const ::rocos::Vec3& angular(const SE3Velocity* msg);
};

const ::rocos::Vec3&
SE3Velocity::_Internal::linear(const SE3Velocity* msg) {
  return *msg->linear_;
}
const ::rocos::Vec3&
SE3Velocity::_Internal::angular(const SE3Velocity* msg) {
  return *msg->angular_;
}
SE3Velocity::SE3Velocity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rocos.SE3Velocity)
}
SE3Velocity::SE3Velocity(const SE3Velocity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_linear()) {
    linear_ = new ::rocos::Vec3(*from.linear_);
  } else {
    linear_ = nullptr;
  }
  if (from._internal_has_angular()) {
    angular_ = new ::rocos::Vec3(*from.angular_);
  } else {
    angular_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:rocos.SE3Velocity)
}

inline void SE3Velocity::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&linear_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&angular_) -
    reinterpret_cast<char*>(&linear_)) + sizeof(angular_));
}

SE3Velocity::~SE3Velocity() {
  // @@protoc_insertion_point(destructor:rocos.SE3Velocity)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SE3Velocity::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete linear_;
  if (this != internal_default_instance()) delete angular_;
}

void SE3Velocity::ArenaDtor(void* object) {
  SE3Velocity* _this = reinterpret_cast< SE3Velocity* >(object);
  (void)_this;
}
void SE3Velocity::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SE3Velocity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SE3Velocity::Clear() {
// @@protoc_insertion_point(message_clear_start:rocos.SE3Velocity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && linear_ != nullptr) {
    delete linear_;
  }
  linear_ = nullptr;
  if (GetArenaForAllocation() == nullptr && angular_ != nullptr) {
    delete angular_;
  }
  angular_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SE3Velocity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .rocos.Vec3 linear = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_linear(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .rocos.Vec3 angular = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_angular(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SE3Velocity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocos.SE3Velocity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rocos.Vec3 linear = 1;
  if (this->_internal_has_linear()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::linear(this), target, stream);
  }

  // .rocos.Vec3 angular = 2;
  if (this->_internal_has_angular()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::angular(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocos.SE3Velocity)
  return target;
}

size_t SE3Velocity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocos.SE3Velocity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .rocos.Vec3 linear = 1;
  if (this->_internal_has_linear()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *linear_);
  }

  // .rocos.Vec3 angular = 2;
  if (this->_internal_has_angular()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *angular_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SE3Velocity::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SE3Velocity::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SE3Velocity::GetClassData() const { return &_class_data_; }

void SE3Velocity::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SE3Velocity *>(to)->MergeFrom(
      static_cast<const SE3Velocity &>(from));
}


void SE3Velocity::MergeFrom(const SE3Velocity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rocos.SE3Velocity)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_linear()) {
    _internal_mutable_linear()->::rocos::Vec3::MergeFrom(from._internal_linear());
  }
  if (from._internal_has_angular()) {
    _internal_mutable_angular()->::rocos::Vec3::MergeFrom(from._internal_angular());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SE3Velocity::CopyFrom(const SE3Velocity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocos.SE3Velocity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SE3Velocity::IsInitialized() const {
  return true;
}

void SE3Velocity::InternalSwap(SE3Velocity* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SE3Velocity, angular_)
      + sizeof(SE3Velocity::angular_)
      - PROTOBUF_FIELD_OFFSET(SE3Velocity, linear_)>(
          reinterpret_cast<char*>(&linear_),
          reinterpret_cast<char*>(&other->linear_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SE3Velocity::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_geometry_2eproto_getter, &descriptor_table_geometry_2eproto_once,
      file_level_metadata_geometry_2eproto[11]);
}

// ===================================================================

class Wrench::_Internal {
 public:
  static const ::rocos::Vec3& force(const Wrench* msg);
  static const ::rocos::Vec3& torque(const Wrench* msg);
};

const ::rocos::Vec3&
Wrench::_Internal::force(const Wrench* msg) {
  return *msg->force_;
}
const ::rocos::Vec3&
Wrench::_Internal::torque(const Wrench* msg) {
  return *msg->torque_;
}
Wrench::Wrench(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rocos.Wrench)
}
Wrench::Wrench(const Wrench& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_force()) {
    force_ = new ::rocos::Vec3(*from.force_);
  } else {
    force_ = nullptr;
  }
  if (from._internal_has_torque()) {
    torque_ = new ::rocos::Vec3(*from.torque_);
  } else {
    torque_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:rocos.Wrench)
}

inline void Wrench::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&force_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&torque_) -
    reinterpret_cast<char*>(&force_)) + sizeof(torque_));
}

Wrench::~Wrench() {
  // @@protoc_insertion_point(destructor:rocos.Wrench)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Wrench::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete force_;
  if (this != internal_default_instance()) delete torque_;
}

void Wrench::ArenaDtor(void* object) {
  Wrench* _this = reinterpret_cast< Wrench* >(object);
  (void)_this;
}
void Wrench::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Wrench::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Wrench::Clear() {
// @@protoc_insertion_point(message_clear_start:rocos.Wrench)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && force_ != nullptr) {
    delete force_;
  }
  force_ = nullptr;
  if (GetArenaForAllocation() == nullptr && torque_ != nullptr) {
    delete torque_;
  }
  torque_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Wrench::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .rocos.Vec3 force = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_force(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .rocos.Vec3 torque = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_torque(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Wrench::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocos.Wrench)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rocos.Vec3 force = 1;
  if (this->_internal_has_force()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::force(this), target, stream);
  }

  // .rocos.Vec3 torque = 2;
  if (this->_internal_has_torque()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::torque(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocos.Wrench)
  return target;
}

size_t Wrench::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocos.Wrench)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .rocos.Vec3 force = 1;
  if (this->_internal_has_force()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *force_);
  }

  // .rocos.Vec3 torque = 2;
  if (this->_internal_has_torque()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *torque_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Wrench::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Wrench::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Wrench::GetClassData() const { return &_class_data_; }

void Wrench::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Wrench *>(to)->MergeFrom(
      static_cast<const Wrench &>(from));
}


void Wrench::MergeFrom(const Wrench& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rocos.Wrench)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_force()) {
    _internal_mutable_force()->::rocos::Vec3::MergeFrom(from._internal_force());
  }
  if (from._internal_has_torque()) {
    _internal_mutable_torque()->::rocos::Vec3::MergeFrom(from._internal_torque());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Wrench::CopyFrom(const Wrench& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocos.Wrench)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Wrench::IsInitialized() const {
  return true;
}

void Wrench::InternalSwap(Wrench* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Wrench, torque_)
      + sizeof(Wrench::torque_)
      - PROTOBUF_FIELD_OFFSET(Wrench, force_)>(
          reinterpret_cast<char*>(&force_),
          reinterpret_cast<char*>(&other->force_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Wrench::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_geometry_2eproto_getter, &descriptor_table_geometry_2eproto_once,
      file_level_metadata_geometry_2eproto[12]);
}

// ===================================================================

class FrameTreeSnapshot_ParentEdge::_Internal {
 public:
  static const ::rocos::SE3Pose& parent_tform_child(const FrameTreeSnapshot_ParentEdge* msg);
};

const ::rocos::SE3Pose&
FrameTreeSnapshot_ParentEdge::_Internal::parent_tform_child(const FrameTreeSnapshot_ParentEdge* msg) {
  return *msg->parent_tform_child_;
}
FrameTreeSnapshot_ParentEdge::FrameTreeSnapshot_ParentEdge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rocos.FrameTreeSnapshot.ParentEdge)
}
FrameTreeSnapshot_ParentEdge::FrameTreeSnapshot_ParentEdge(const FrameTreeSnapshot_ParentEdge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  parent_frame_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_parent_frame_name().empty()) {
    parent_frame_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_parent_frame_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_parent_tform_child()) {
    parent_tform_child_ = new ::rocos::SE3Pose(*from.parent_tform_child_);
  } else {
    parent_tform_child_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:rocos.FrameTreeSnapshot.ParentEdge)
}

inline void FrameTreeSnapshot_ParentEdge::SharedCtor() {
parent_frame_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
parent_tform_child_ = nullptr;
}

FrameTreeSnapshot_ParentEdge::~FrameTreeSnapshot_ParentEdge() {
  // @@protoc_insertion_point(destructor:rocos.FrameTreeSnapshot.ParentEdge)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FrameTreeSnapshot_ParentEdge::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  parent_frame_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete parent_tform_child_;
}

void FrameTreeSnapshot_ParentEdge::ArenaDtor(void* object) {
  FrameTreeSnapshot_ParentEdge* _this = reinterpret_cast< FrameTreeSnapshot_ParentEdge* >(object);
  (void)_this;
}
void FrameTreeSnapshot_ParentEdge::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FrameTreeSnapshot_ParentEdge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FrameTreeSnapshot_ParentEdge::Clear() {
// @@protoc_insertion_point(message_clear_start:rocos.FrameTreeSnapshot.ParentEdge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parent_frame_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && parent_tform_child_ != nullptr) {
    delete parent_tform_child_;
  }
  parent_tform_child_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FrameTreeSnapshot_ParentEdge::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string parent_frame_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_parent_frame_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rocos.FrameTreeSnapshot.ParentEdge.parent_frame_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .rocos.SE3Pose parent_tform_child = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_parent_tform_child(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FrameTreeSnapshot_ParentEdge::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocos.FrameTreeSnapshot.ParentEdge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string parent_frame_name = 1;
  if (!this->_internal_parent_frame_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_parent_frame_name().data(), static_cast<int>(this->_internal_parent_frame_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rocos.FrameTreeSnapshot.ParentEdge.parent_frame_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_parent_frame_name(), target);
  }

  // .rocos.SE3Pose parent_tform_child = 2;
  if (this->_internal_has_parent_tform_child()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::parent_tform_child(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocos.FrameTreeSnapshot.ParentEdge)
  return target;
}

size_t FrameTreeSnapshot_ParentEdge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocos.FrameTreeSnapshot.ParentEdge)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string parent_frame_name = 1;
  if (!this->_internal_parent_frame_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_parent_frame_name());
  }

  // .rocos.SE3Pose parent_tform_child = 2;
  if (this->_internal_has_parent_tform_child()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *parent_tform_child_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FrameTreeSnapshot_ParentEdge::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FrameTreeSnapshot_ParentEdge::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FrameTreeSnapshot_ParentEdge::GetClassData() const { return &_class_data_; }

void FrameTreeSnapshot_ParentEdge::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<FrameTreeSnapshot_ParentEdge *>(to)->MergeFrom(
      static_cast<const FrameTreeSnapshot_ParentEdge &>(from));
}


void FrameTreeSnapshot_ParentEdge::MergeFrom(const FrameTreeSnapshot_ParentEdge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rocos.FrameTreeSnapshot.ParentEdge)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_parent_frame_name().empty()) {
    _internal_set_parent_frame_name(from._internal_parent_frame_name());
  }
  if (from._internal_has_parent_tform_child()) {
    _internal_mutable_parent_tform_child()->::rocos::SE3Pose::MergeFrom(from._internal_parent_tform_child());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FrameTreeSnapshot_ParentEdge::CopyFrom(const FrameTreeSnapshot_ParentEdge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocos.FrameTreeSnapshot.ParentEdge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameTreeSnapshot_ParentEdge::IsInitialized() const {
  return true;
}

void FrameTreeSnapshot_ParentEdge::InternalSwap(FrameTreeSnapshot_ParentEdge* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &parent_frame_name_, GetArenaForAllocation(),
      &other->parent_frame_name_, other->GetArenaForAllocation()
  );
  swap(parent_tform_child_, other->parent_tform_child_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FrameTreeSnapshot_ParentEdge::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_geometry_2eproto_getter, &descriptor_table_geometry_2eproto_once,
      file_level_metadata_geometry_2eproto[13]);
}

// ===================================================================

FrameTreeSnapshot_ChildToParentEdgeMapEntry_DoNotUse::FrameTreeSnapshot_ChildToParentEdgeMapEntry_DoNotUse() {}
FrameTreeSnapshot_ChildToParentEdgeMapEntry_DoNotUse::FrameTreeSnapshot_ChildToParentEdgeMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void FrameTreeSnapshot_ChildToParentEdgeMapEntry_DoNotUse::MergeFrom(const FrameTreeSnapshot_ChildToParentEdgeMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata FrameTreeSnapshot_ChildToParentEdgeMapEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_geometry_2eproto_getter, &descriptor_table_geometry_2eproto_once,
      file_level_metadata_geometry_2eproto[14]);
}

// ===================================================================

class FrameTreeSnapshot::_Internal {
 public:
};

FrameTreeSnapshot::FrameTreeSnapshot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  child_to_parent_edge_map_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rocos.FrameTreeSnapshot)
}
FrameTreeSnapshot::FrameTreeSnapshot(const FrameTreeSnapshot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  child_to_parent_edge_map_.MergeFrom(from.child_to_parent_edge_map_);
  // @@protoc_insertion_point(copy_constructor:rocos.FrameTreeSnapshot)
}

inline void FrameTreeSnapshot::SharedCtor() {
}

FrameTreeSnapshot::~FrameTreeSnapshot() {
  // @@protoc_insertion_point(destructor:rocos.FrameTreeSnapshot)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FrameTreeSnapshot::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FrameTreeSnapshot::ArenaDtor(void* object) {
  FrameTreeSnapshot* _this = reinterpret_cast< FrameTreeSnapshot* >(object);
  (void)_this;
  _this->child_to_parent_edge_map_. ~MapField();
}
inline void FrameTreeSnapshot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &FrameTreeSnapshot::ArenaDtor);
  }
}
void FrameTreeSnapshot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FrameTreeSnapshot::Clear() {
// @@protoc_insertion_point(message_clear_start:rocos.FrameTreeSnapshot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  child_to_parent_edge_map_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FrameTreeSnapshot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, .rocos.FrameTreeSnapshot.ParentEdge> child_to_parent_edge_map = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&child_to_parent_edge_map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FrameTreeSnapshot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocos.FrameTreeSnapshot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .rocos.FrameTreeSnapshot.ParentEdge> child_to_parent_edge_map = 1;
  if (!this->_internal_child_to_parent_edge_map().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::rocos::FrameTreeSnapshot_ParentEdge >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "rocos.FrameTreeSnapshot.ChildToParentEdgeMapEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_child_to_parent_edge_map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_child_to_parent_edge_map().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::rocos::FrameTreeSnapshot_ParentEdge >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::rocos::FrameTreeSnapshot_ParentEdge >::const_iterator
          it = this->_internal_child_to_parent_edge_map().begin();
          it != this->_internal_child_to_parent_edge_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = FrameTreeSnapshot_ChildToParentEdgeMapEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::rocos::FrameTreeSnapshot_ParentEdge >::const_iterator
          it = this->_internal_child_to_parent_edge_map().begin();
          it != this->_internal_child_to_parent_edge_map().end(); ++it) {
        target = FrameTreeSnapshot_ChildToParentEdgeMapEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocos.FrameTreeSnapshot)
  return target;
}

size_t FrameTreeSnapshot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocos.FrameTreeSnapshot)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .rocos.FrameTreeSnapshot.ParentEdge> child_to_parent_edge_map = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_child_to_parent_edge_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::rocos::FrameTreeSnapshot_ParentEdge >::const_iterator
      it = this->_internal_child_to_parent_edge_map().begin();
      it != this->_internal_child_to_parent_edge_map().end(); ++it) {
    total_size += FrameTreeSnapshot_ChildToParentEdgeMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FrameTreeSnapshot::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FrameTreeSnapshot::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FrameTreeSnapshot::GetClassData() const { return &_class_data_; }

void FrameTreeSnapshot::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<FrameTreeSnapshot *>(to)->MergeFrom(
      static_cast<const FrameTreeSnapshot &>(from));
}


void FrameTreeSnapshot::MergeFrom(const FrameTreeSnapshot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rocos.FrameTreeSnapshot)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  child_to_parent_edge_map_.MergeFrom(from.child_to_parent_edge_map_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FrameTreeSnapshot::CopyFrom(const FrameTreeSnapshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocos.FrameTreeSnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameTreeSnapshot::IsInitialized() const {
  return true;
}

void FrameTreeSnapshot::InternalSwap(FrameTreeSnapshot* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  child_to_parent_edge_map_.InternalSwap(&other->child_to_parent_edge_map_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FrameTreeSnapshot::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_geometry_2eproto_getter, &descriptor_table_geometry_2eproto_once,
      file_level_metadata_geometry_2eproto[15]);
}

// ===================================================================

class Box2::_Internal {
 public:
  static const ::rocos::Vec2& size(const Box2* msg);
};

const ::rocos::Vec2&
Box2::_Internal::size(const Box2* msg) {
  return *msg->size_;
}
Box2::Box2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rocos.Box2)
}
Box2::Box2(const Box2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_size()) {
    size_ = new ::rocos::Vec2(*from.size_);
  } else {
    size_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:rocos.Box2)
}

inline void Box2::SharedCtor() {
size_ = nullptr;
}

Box2::~Box2() {
  // @@protoc_insertion_point(destructor:rocos.Box2)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Box2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete size_;
}

void Box2::ArenaDtor(void* object) {
  Box2* _this = reinterpret_cast< Box2* >(object);
  (void)_this;
}
void Box2::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Box2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Box2::Clear() {
// @@protoc_insertion_point(message_clear_start:rocos.Box2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && size_ != nullptr) {
    delete size_;
  }
  size_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Box2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .rocos.Vec2 size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Box2::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocos.Box2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rocos.Vec2 size = 1;
  if (this->_internal_has_size()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::size(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocos.Box2)
  return target;
}

size_t Box2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocos.Box2)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .rocos.Vec2 size = 1;
  if (this->_internal_has_size()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *size_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Box2::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Box2::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Box2::GetClassData() const { return &_class_data_; }

void Box2::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Box2 *>(to)->MergeFrom(
      static_cast<const Box2 &>(from));
}


void Box2::MergeFrom(const Box2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rocos.Box2)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_size()) {
    _internal_mutable_size()->::rocos::Vec2::MergeFrom(from._internal_size());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Box2::CopyFrom(const Box2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocos.Box2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Box2::IsInitialized() const {
  return true;
}

void Box2::InternalSwap(Box2* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(size_, other->size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Box2::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_geometry_2eproto_getter, &descriptor_table_geometry_2eproto_once,
      file_level_metadata_geometry_2eproto[16]);
}

// ===================================================================

class Box2WithFrame::_Internal {
 public:
  static const ::rocos::Box2& box(const Box2WithFrame* msg);
  static const ::rocos::SE3Pose& frame_name_tform_box(const Box2WithFrame* msg);
};

const ::rocos::Box2&
Box2WithFrame::_Internal::box(const Box2WithFrame* msg) {
  return *msg->box_;
}
const ::rocos::SE3Pose&
Box2WithFrame::_Internal::frame_name_tform_box(const Box2WithFrame* msg) {
  return *msg->frame_name_tform_box_;
}
Box2WithFrame::Box2WithFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rocos.Box2WithFrame)
}
Box2WithFrame::Box2WithFrame(const Box2WithFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  frame_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_frame_name().empty()) {
    frame_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_frame_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_box()) {
    box_ = new ::rocos::Box2(*from.box_);
  } else {
    box_ = nullptr;
  }
  if (from._internal_has_frame_name_tform_box()) {
    frame_name_tform_box_ = new ::rocos::SE3Pose(*from.frame_name_tform_box_);
  } else {
    frame_name_tform_box_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:rocos.Box2WithFrame)
}

inline void Box2WithFrame::SharedCtor() {
frame_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&box_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&frame_name_tform_box_) -
    reinterpret_cast<char*>(&box_)) + sizeof(frame_name_tform_box_));
}

Box2WithFrame::~Box2WithFrame() {
  // @@protoc_insertion_point(destructor:rocos.Box2WithFrame)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Box2WithFrame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  frame_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete box_;
  if (this != internal_default_instance()) delete frame_name_tform_box_;
}

void Box2WithFrame::ArenaDtor(void* object) {
  Box2WithFrame* _this = reinterpret_cast< Box2WithFrame* >(object);
  (void)_this;
}
void Box2WithFrame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Box2WithFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Box2WithFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:rocos.Box2WithFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  frame_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && box_ != nullptr) {
    delete box_;
  }
  box_ = nullptr;
  if (GetArenaForAllocation() == nullptr && frame_name_tform_box_ != nullptr) {
    delete frame_name_tform_box_;
  }
  frame_name_tform_box_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Box2WithFrame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .rocos.Box2 box = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_box(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string frame_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_frame_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rocos.Box2WithFrame.frame_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .rocos.SE3Pose frame_name_tform_box = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_frame_name_tform_box(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Box2WithFrame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocos.Box2WithFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rocos.Box2 box = 1;
  if (this->_internal_has_box()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::box(this), target, stream);
  }

  // string frame_name = 2;
  if (!this->_internal_frame_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_frame_name().data(), static_cast<int>(this->_internal_frame_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rocos.Box2WithFrame.frame_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_frame_name(), target);
  }

  // .rocos.SE3Pose frame_name_tform_box = 3;
  if (this->_internal_has_frame_name_tform_box()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::frame_name_tform_box(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocos.Box2WithFrame)
  return target;
}

size_t Box2WithFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocos.Box2WithFrame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string frame_name = 2;
  if (!this->_internal_frame_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_frame_name());
  }

  // .rocos.Box2 box = 1;
  if (this->_internal_has_box()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *box_);
  }

  // .rocos.SE3Pose frame_name_tform_box = 3;
  if (this->_internal_has_frame_name_tform_box()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *frame_name_tform_box_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Box2WithFrame::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Box2WithFrame::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Box2WithFrame::GetClassData() const { return &_class_data_; }

void Box2WithFrame::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Box2WithFrame *>(to)->MergeFrom(
      static_cast<const Box2WithFrame &>(from));
}


void Box2WithFrame::MergeFrom(const Box2WithFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rocos.Box2WithFrame)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_frame_name().empty()) {
    _internal_set_frame_name(from._internal_frame_name());
  }
  if (from._internal_has_box()) {
    _internal_mutable_box()->::rocos::Box2::MergeFrom(from._internal_box());
  }
  if (from._internal_has_frame_name_tform_box()) {
    _internal_mutable_frame_name_tform_box()->::rocos::SE3Pose::MergeFrom(from._internal_frame_name_tform_box());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Box2WithFrame::CopyFrom(const Box2WithFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocos.Box2WithFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Box2WithFrame::IsInitialized() const {
  return true;
}

void Box2WithFrame::InternalSwap(Box2WithFrame* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &frame_name_, GetArenaForAllocation(),
      &other->frame_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Box2WithFrame, frame_name_tform_box_)
      + sizeof(Box2WithFrame::frame_name_tform_box_)
      - PROTOBUF_FIELD_OFFSET(Box2WithFrame, box_)>(
          reinterpret_cast<char*>(&box_),
          reinterpret_cast<char*>(&other->box_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Box2WithFrame::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_geometry_2eproto_getter, &descriptor_table_geometry_2eproto_once,
      file_level_metadata_geometry_2eproto[17]);
}

// ===================================================================

class Box3::_Internal {
 public:
  static const ::rocos::Vec3& size(const Box3* msg);
};

const ::rocos::Vec3&
Box3::_Internal::size(const Box3* msg) {
  return *msg->size_;
}
Box3::Box3(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rocos.Box3)
}
Box3::Box3(const Box3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_size()) {
    size_ = new ::rocos::Vec3(*from.size_);
  } else {
    size_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:rocos.Box3)
}

inline void Box3::SharedCtor() {
size_ = nullptr;
}

Box3::~Box3() {
  // @@protoc_insertion_point(destructor:rocos.Box3)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Box3::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete size_;
}

void Box3::ArenaDtor(void* object) {
  Box3* _this = reinterpret_cast< Box3* >(object);
  (void)_this;
}
void Box3::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Box3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Box3::Clear() {
// @@protoc_insertion_point(message_clear_start:rocos.Box3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && size_ != nullptr) {
    delete size_;
  }
  size_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Box3::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .rocos.Vec3 size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Box3::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocos.Box3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rocos.Vec3 size = 1;
  if (this->_internal_has_size()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::size(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocos.Box3)
  return target;
}

size_t Box3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocos.Box3)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .rocos.Vec3 size = 1;
  if (this->_internal_has_size()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *size_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Box3::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Box3::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Box3::GetClassData() const { return &_class_data_; }

void Box3::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Box3 *>(to)->MergeFrom(
      static_cast<const Box3 &>(from));
}


void Box3::MergeFrom(const Box3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rocos.Box3)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_size()) {
    _internal_mutable_size()->::rocos::Vec3::MergeFrom(from._internal_size());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Box3::CopyFrom(const Box3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocos.Box3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Box3::IsInitialized() const {
  return true;
}

void Box3::InternalSwap(Box3* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(size_, other->size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Box3::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_geometry_2eproto_getter, &descriptor_table_geometry_2eproto_once,
      file_level_metadata_geometry_2eproto[18]);
}

// ===================================================================

class Box3WithFrame::_Internal {
 public:
  static const ::rocos::Box3& box(const Box3WithFrame* msg);
  static const ::rocos::SE3Pose& frame_name_tform_box(const Box3WithFrame* msg);
};

const ::rocos::Box3&
Box3WithFrame::_Internal::box(const Box3WithFrame* msg) {
  return *msg->box_;
}
const ::rocos::SE3Pose&
Box3WithFrame::_Internal::frame_name_tform_box(const Box3WithFrame* msg) {
  return *msg->frame_name_tform_box_;
}
Box3WithFrame::Box3WithFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rocos.Box3WithFrame)
}
Box3WithFrame::Box3WithFrame(const Box3WithFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  frame_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_frame_name().empty()) {
    frame_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_frame_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_box()) {
    box_ = new ::rocos::Box3(*from.box_);
  } else {
    box_ = nullptr;
  }
  if (from._internal_has_frame_name_tform_box()) {
    frame_name_tform_box_ = new ::rocos::SE3Pose(*from.frame_name_tform_box_);
  } else {
    frame_name_tform_box_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:rocos.Box3WithFrame)
}

inline void Box3WithFrame::SharedCtor() {
frame_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&box_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&frame_name_tform_box_) -
    reinterpret_cast<char*>(&box_)) + sizeof(frame_name_tform_box_));
}

Box3WithFrame::~Box3WithFrame() {
  // @@protoc_insertion_point(destructor:rocos.Box3WithFrame)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Box3WithFrame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  frame_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete box_;
  if (this != internal_default_instance()) delete frame_name_tform_box_;
}

void Box3WithFrame::ArenaDtor(void* object) {
  Box3WithFrame* _this = reinterpret_cast< Box3WithFrame* >(object);
  (void)_this;
}
void Box3WithFrame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Box3WithFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Box3WithFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:rocos.Box3WithFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  frame_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && box_ != nullptr) {
    delete box_;
  }
  box_ = nullptr;
  if (GetArenaForAllocation() == nullptr && frame_name_tform_box_ != nullptr) {
    delete frame_name_tform_box_;
  }
  frame_name_tform_box_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Box3WithFrame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .rocos.Box3 box = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_box(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string frame_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_frame_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rocos.Box3WithFrame.frame_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .rocos.SE3Pose frame_name_tform_box = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_frame_name_tform_box(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Box3WithFrame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocos.Box3WithFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rocos.Box3 box = 1;
  if (this->_internal_has_box()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::box(this), target, stream);
  }

  // string frame_name = 2;
  if (!this->_internal_frame_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_frame_name().data(), static_cast<int>(this->_internal_frame_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rocos.Box3WithFrame.frame_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_frame_name(), target);
  }

  // .rocos.SE3Pose frame_name_tform_box = 3;
  if (this->_internal_has_frame_name_tform_box()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::frame_name_tform_box(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocos.Box3WithFrame)
  return target;
}

size_t Box3WithFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocos.Box3WithFrame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string frame_name = 2;
  if (!this->_internal_frame_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_frame_name());
  }

  // .rocos.Box3 box = 1;
  if (this->_internal_has_box()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *box_);
  }

  // .rocos.SE3Pose frame_name_tform_box = 3;
  if (this->_internal_has_frame_name_tform_box()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *frame_name_tform_box_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Box3WithFrame::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Box3WithFrame::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Box3WithFrame::GetClassData() const { return &_class_data_; }

void Box3WithFrame::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Box3WithFrame *>(to)->MergeFrom(
      static_cast<const Box3WithFrame &>(from));
}


void Box3WithFrame::MergeFrom(const Box3WithFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rocos.Box3WithFrame)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_frame_name().empty()) {
    _internal_set_frame_name(from._internal_frame_name());
  }
  if (from._internal_has_box()) {
    _internal_mutable_box()->::rocos::Box3::MergeFrom(from._internal_box());
  }
  if (from._internal_has_frame_name_tform_box()) {
    _internal_mutable_frame_name_tform_box()->::rocos::SE3Pose::MergeFrom(from._internal_frame_name_tform_box());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Box3WithFrame::CopyFrom(const Box3WithFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocos.Box3WithFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Box3WithFrame::IsInitialized() const {
  return true;
}

void Box3WithFrame::InternalSwap(Box3WithFrame* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &frame_name_, GetArenaForAllocation(),
      &other->frame_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Box3WithFrame, frame_name_tform_box_)
      + sizeof(Box3WithFrame::frame_name_tform_box_)
      - PROTOBUF_FIELD_OFFSET(Box3WithFrame, box_)>(
          reinterpret_cast<char*>(&box_),
          reinterpret_cast<char*>(&other->box_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Box3WithFrame::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_geometry_2eproto_getter, &descriptor_table_geometry_2eproto_once,
      file_level_metadata_geometry_2eproto[19]);
}

// ===================================================================

class Matrix::_Internal {
 public:
};

Matrix::Matrix(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  values_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rocos.Matrix)
}
Matrix::Matrix(const Matrix& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&rows_, &from.rows_,
    static_cast<size_t>(reinterpret_cast<char*>(&cols_) -
    reinterpret_cast<char*>(&rows_)) + sizeof(cols_));
  // @@protoc_insertion_point(copy_constructor:rocos.Matrix)
}

inline void Matrix::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&rows_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cols_) -
    reinterpret_cast<char*>(&rows_)) + sizeof(cols_));
}

Matrix::~Matrix() {
  // @@protoc_insertion_point(destructor:rocos.Matrix)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Matrix::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Matrix::ArenaDtor(void* object) {
  Matrix* _this = reinterpret_cast< Matrix* >(object);
  (void)_this;
}
void Matrix::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Matrix::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Matrix::Clear() {
// @@protoc_insertion_point(message_clear_start:rocos.Matrix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  ::memset(&rows_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cols_) -
      reinterpret_cast<char*>(&rows_)) + sizeof(cols_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Matrix::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 rows = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cols = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          cols_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double values = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25) {
          _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Matrix::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocos.Matrix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 rows = 1;
  if (this->_internal_rows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_rows(), target);
  }

  // int32 cols = 2;
  if (this->_internal_cols() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_cols(), target);
  }

  // repeated double values = 3;
  if (this->_internal_values_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_values(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocos.Matrix)
  return target;
}

size_t Matrix::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocos.Matrix)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double values = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_values_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // int32 rows = 1;
  if (this->_internal_rows() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rows());
  }

  // int32 cols = 2;
  if (this->_internal_cols() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cols());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Matrix::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Matrix::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Matrix::GetClassData() const { return &_class_data_; }

void Matrix::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Matrix *>(to)->MergeFrom(
      static_cast<const Matrix &>(from));
}


void Matrix::MergeFrom(const Matrix& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rocos.Matrix)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
  if (from._internal_rows() != 0) {
    _internal_set_rows(from._internal_rows());
  }
  if (from._internal_cols() != 0) {
    _internal_set_cols(from._internal_cols());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Matrix::CopyFrom(const Matrix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocos.Matrix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Matrix::IsInitialized() const {
  return true;
}

void Matrix::InternalSwap(Matrix* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  values_.InternalSwap(&other->values_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Matrix, cols_)
      + sizeof(Matrix::cols_)
      - PROTOBUF_FIELD_OFFSET(Matrix, rows_)>(
          reinterpret_cast<char*>(&rows_),
          reinterpret_cast<char*>(&other->rows_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Matrix::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_geometry_2eproto_getter, &descriptor_table_geometry_2eproto_once,
      file_level_metadata_geometry_2eproto[20]);
}

// ===================================================================

class SE3Covariance::_Internal {
 public:
  static const ::rocos::Matrix& matrix(const SE3Covariance* msg);
};

const ::rocos::Matrix&
SE3Covariance::_Internal::matrix(const SE3Covariance* msg) {
  return *msg->matrix_;
}
SE3Covariance::SE3Covariance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rocos.SE3Covariance)
}
SE3Covariance::SE3Covariance(const SE3Covariance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_matrix()) {
    matrix_ = new ::rocos::Matrix(*from.matrix_);
  } else {
    matrix_ = nullptr;
  }
  ::memcpy(&yaw_variance_, &from.yaw_variance_,
    static_cast<size_t>(reinterpret_cast<char*>(&cov_zz_) -
    reinterpret_cast<char*>(&yaw_variance_)) + sizeof(cov_zz_));
  // @@protoc_insertion_point(copy_constructor:rocos.SE3Covariance)
}

inline void SE3Covariance::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&matrix_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cov_zz_) -
    reinterpret_cast<char*>(&matrix_)) + sizeof(cov_zz_));
}

SE3Covariance::~SE3Covariance() {
  // @@protoc_insertion_point(destructor:rocos.SE3Covariance)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SE3Covariance::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete matrix_;
}

void SE3Covariance::ArenaDtor(void* object) {
  SE3Covariance* _this = reinterpret_cast< SE3Covariance* >(object);
  (void)_this;
}
void SE3Covariance::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SE3Covariance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SE3Covariance::Clear() {
// @@protoc_insertion_point(message_clear_start:rocos.SE3Covariance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && matrix_ != nullptr) {
    delete matrix_;
  }
  matrix_ = nullptr;
  ::memset(&yaw_variance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cov_zz_) -
      reinterpret_cast<char*>(&yaw_variance_)) + sizeof(cov_zz_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SE3Covariance::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .rocos.Matrix matrix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_matrix(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double yaw_variance = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          yaw_variance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double cov_xx = 3 [deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          cov_xx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double cov_xy = 4 [deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          cov_xy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double cov_xz = 5 [deprecated = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          cov_xz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double cov_yx = 6 [deprecated = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          cov_yx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double cov_yy = 7 [deprecated = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          cov_yy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double cov_yz = 8 [deprecated = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          cov_yz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double cov_zx = 9 [deprecated = true];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          cov_zx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double cov_zy = 10 [deprecated = true];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          cov_zy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double cov_zz = 11 [deprecated = true];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          cov_zz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SE3Covariance::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocos.SE3Covariance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rocos.Matrix matrix = 1;
  if (this->_internal_has_matrix()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::matrix(this), target, stream);
  }

  // double yaw_variance = 2 [deprecated = true];
  if (!(this->_internal_yaw_variance() <= 0 && this->_internal_yaw_variance() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_yaw_variance(), target);
  }

  // double cov_xx = 3 [deprecated = true];
  if (!(this->_internal_cov_xx() <= 0 && this->_internal_cov_xx() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_cov_xx(), target);
  }

  // double cov_xy = 4 [deprecated = true];
  if (!(this->_internal_cov_xy() <= 0 && this->_internal_cov_xy() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_cov_xy(), target);
  }

  // double cov_xz = 5 [deprecated = true];
  if (!(this->_internal_cov_xz() <= 0 && this->_internal_cov_xz() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_cov_xz(), target);
  }

  // double cov_yx = 6 [deprecated = true];
  if (!(this->_internal_cov_yx() <= 0 && this->_internal_cov_yx() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_cov_yx(), target);
  }

  // double cov_yy = 7 [deprecated = true];
  if (!(this->_internal_cov_yy() <= 0 && this->_internal_cov_yy() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_cov_yy(), target);
  }

  // double cov_yz = 8 [deprecated = true];
  if (!(this->_internal_cov_yz() <= 0 && this->_internal_cov_yz() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_cov_yz(), target);
  }

  // double cov_zx = 9 [deprecated = true];
  if (!(this->_internal_cov_zx() <= 0 && this->_internal_cov_zx() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_cov_zx(), target);
  }

  // double cov_zy = 10 [deprecated = true];
  if (!(this->_internal_cov_zy() <= 0 && this->_internal_cov_zy() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_cov_zy(), target);
  }

  // double cov_zz = 11 [deprecated = true];
  if (!(this->_internal_cov_zz() <= 0 && this->_internal_cov_zz() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_cov_zz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocos.SE3Covariance)
  return target;
}

size_t SE3Covariance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocos.SE3Covariance)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .rocos.Matrix matrix = 1;
  if (this->_internal_has_matrix()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *matrix_);
  }

  // double yaw_variance = 2 [deprecated = true];
  if (!(this->_internal_yaw_variance() <= 0 && this->_internal_yaw_variance() >= 0)) {
    total_size += 1 + 8;
  }

  // double cov_xx = 3 [deprecated = true];
  if (!(this->_internal_cov_xx() <= 0 && this->_internal_cov_xx() >= 0)) {
    total_size += 1 + 8;
  }

  // double cov_xy = 4 [deprecated = true];
  if (!(this->_internal_cov_xy() <= 0 && this->_internal_cov_xy() >= 0)) {
    total_size += 1 + 8;
  }

  // double cov_xz = 5 [deprecated = true];
  if (!(this->_internal_cov_xz() <= 0 && this->_internal_cov_xz() >= 0)) {
    total_size += 1 + 8;
  }

  // double cov_yx = 6 [deprecated = true];
  if (!(this->_internal_cov_yx() <= 0 && this->_internal_cov_yx() >= 0)) {
    total_size += 1 + 8;
  }

  // double cov_yy = 7 [deprecated = true];
  if (!(this->_internal_cov_yy() <= 0 && this->_internal_cov_yy() >= 0)) {
    total_size += 1 + 8;
  }

  // double cov_yz = 8 [deprecated = true];
  if (!(this->_internal_cov_yz() <= 0 && this->_internal_cov_yz() >= 0)) {
    total_size += 1 + 8;
  }

  // double cov_zx = 9 [deprecated = true];
  if (!(this->_internal_cov_zx() <= 0 && this->_internal_cov_zx() >= 0)) {
    total_size += 1 + 8;
  }

  // double cov_zy = 10 [deprecated = true];
  if (!(this->_internal_cov_zy() <= 0 && this->_internal_cov_zy() >= 0)) {
    total_size += 1 + 8;
  }

  // double cov_zz = 11 [deprecated = true];
  if (!(this->_internal_cov_zz() <= 0 && this->_internal_cov_zz() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SE3Covariance::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SE3Covariance::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SE3Covariance::GetClassData() const { return &_class_data_; }

void SE3Covariance::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SE3Covariance *>(to)->MergeFrom(
      static_cast<const SE3Covariance &>(from));
}


void SE3Covariance::MergeFrom(const SE3Covariance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rocos.SE3Covariance)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_matrix()) {
    _internal_mutable_matrix()->::rocos::Matrix::MergeFrom(from._internal_matrix());
  }
  if (!(from._internal_yaw_variance() <= 0 && from._internal_yaw_variance() >= 0)) {
    _internal_set_yaw_variance(from._internal_yaw_variance());
  }
  if (!(from._internal_cov_xx() <= 0 && from._internal_cov_xx() >= 0)) {
    _internal_set_cov_xx(from._internal_cov_xx());
  }
  if (!(from._internal_cov_xy() <= 0 && from._internal_cov_xy() >= 0)) {
    _internal_set_cov_xy(from._internal_cov_xy());
  }
  if (!(from._internal_cov_xz() <= 0 && from._internal_cov_xz() >= 0)) {
    _internal_set_cov_xz(from._internal_cov_xz());
  }
  if (!(from._internal_cov_yx() <= 0 && from._internal_cov_yx() >= 0)) {
    _internal_set_cov_yx(from._internal_cov_yx());
  }
  if (!(from._internal_cov_yy() <= 0 && from._internal_cov_yy() >= 0)) {
    _internal_set_cov_yy(from._internal_cov_yy());
  }
  if (!(from._internal_cov_yz() <= 0 && from._internal_cov_yz() >= 0)) {
    _internal_set_cov_yz(from._internal_cov_yz());
  }
  if (!(from._internal_cov_zx() <= 0 && from._internal_cov_zx() >= 0)) {
    _internal_set_cov_zx(from._internal_cov_zx());
  }
  if (!(from._internal_cov_zy() <= 0 && from._internal_cov_zy() >= 0)) {
    _internal_set_cov_zy(from._internal_cov_zy());
  }
  if (!(from._internal_cov_zz() <= 0 && from._internal_cov_zz() >= 0)) {
    _internal_set_cov_zz(from._internal_cov_zz());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SE3Covariance::CopyFrom(const SE3Covariance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocos.SE3Covariance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SE3Covariance::IsInitialized() const {
  return true;
}

void SE3Covariance::InternalSwap(SE3Covariance* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SE3Covariance, cov_zz_)
      + sizeof(SE3Covariance::cov_zz_)
      - PROTOBUF_FIELD_OFFSET(SE3Covariance, matrix_)>(
          reinterpret_cast<char*>(&matrix_),
          reinterpret_cast<char*>(&other->matrix_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SE3Covariance::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_geometry_2eproto_getter, &descriptor_table_geometry_2eproto_once,
      file_level_metadata_geometry_2eproto[21]);
}

// ===================================================================

class PolyLine::_Internal {
 public:
};

PolyLine::PolyLine(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  points_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rocos.PolyLine)
}
PolyLine::PolyLine(const PolyLine& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      points_(from.points_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:rocos.PolyLine)
}

inline void PolyLine::SharedCtor() {
}

PolyLine::~PolyLine() {
  // @@protoc_insertion_point(destructor:rocos.PolyLine)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PolyLine::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PolyLine::ArenaDtor(void* object) {
  PolyLine* _this = reinterpret_cast< PolyLine* >(object);
  (void)_this;
}
void PolyLine::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PolyLine::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PolyLine::Clear() {
// @@protoc_insertion_point(message_clear_start:rocos.PolyLine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PolyLine::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .rocos.Vec2 points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PolyLine::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocos.PolyLine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .rocos.Vec2 points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_points(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocos.PolyLine)
  return target;
}

size_t PolyLine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocos.PolyLine)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .rocos.Vec2 points = 1;
  total_size += 1UL * this->_internal_points_size();
  for (const auto& msg : this->points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PolyLine::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PolyLine::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PolyLine::GetClassData() const { return &_class_data_; }

void PolyLine::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<PolyLine *>(to)->MergeFrom(
      static_cast<const PolyLine &>(from));
}


void PolyLine::MergeFrom(const PolyLine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rocos.PolyLine)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PolyLine::CopyFrom(const PolyLine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocos.PolyLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PolyLine::IsInitialized() const {
  return true;
}

void PolyLine::InternalSwap(PolyLine* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  points_.InternalSwap(&other->points_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PolyLine::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_geometry_2eproto_getter, &descriptor_table_geometry_2eproto_once,
      file_level_metadata_geometry_2eproto[22]);
}

// ===================================================================

class Polygon::_Internal {
 public:
};

Polygon::Polygon(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  vertexes_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rocos.Polygon)
}
Polygon::Polygon(const Polygon& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      vertexes_(from.vertexes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:rocos.Polygon)
}

inline void Polygon::SharedCtor() {
}

Polygon::~Polygon() {
  // @@protoc_insertion_point(destructor:rocos.Polygon)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Polygon::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Polygon::ArenaDtor(void* object) {
  Polygon* _this = reinterpret_cast< Polygon* >(object);
  (void)_this;
}
void Polygon::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Polygon::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Polygon::Clear() {
// @@protoc_insertion_point(message_clear_start:rocos.Polygon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vertexes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Polygon::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .rocos.Vec2 vertexes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vertexes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Polygon::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocos.Polygon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .rocos.Vec2 vertexes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vertexes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_vertexes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocos.Polygon)
  return target;
}

size_t Polygon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocos.Polygon)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .rocos.Vec2 vertexes = 1;
  total_size += 1UL * this->_internal_vertexes_size();
  for (const auto& msg : this->vertexes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Polygon::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Polygon::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Polygon::GetClassData() const { return &_class_data_; }

void Polygon::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Polygon *>(to)->MergeFrom(
      static_cast<const Polygon &>(from));
}


void Polygon::MergeFrom(const Polygon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rocos.Polygon)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vertexes_.MergeFrom(from.vertexes_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Polygon::CopyFrom(const Polygon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocos.Polygon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Polygon::IsInitialized() const {
  return true;
}

void Polygon::InternalSwap(Polygon* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  vertexes_.InternalSwap(&other->vertexes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Polygon::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_geometry_2eproto_getter, &descriptor_table_geometry_2eproto_once,
      file_level_metadata_geometry_2eproto[23]);
}

// ===================================================================

class PolygonWithExclusions::_Internal {
 public:
  static const ::rocos::Polygon& inclusion(const PolygonWithExclusions* msg);
};

const ::rocos::Polygon&
PolygonWithExclusions::_Internal::inclusion(const PolygonWithExclusions* msg) {
  return *msg->inclusion_;
}
PolygonWithExclusions::PolygonWithExclusions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  exclusions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rocos.PolygonWithExclusions)
}
PolygonWithExclusions::PolygonWithExclusions(const PolygonWithExclusions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      exclusions_(from.exclusions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_inclusion()) {
    inclusion_ = new ::rocos::Polygon(*from.inclusion_);
  } else {
    inclusion_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:rocos.PolygonWithExclusions)
}

inline void PolygonWithExclusions::SharedCtor() {
inclusion_ = nullptr;
}

PolygonWithExclusions::~PolygonWithExclusions() {
  // @@protoc_insertion_point(destructor:rocos.PolygonWithExclusions)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PolygonWithExclusions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete inclusion_;
}

void PolygonWithExclusions::ArenaDtor(void* object) {
  PolygonWithExclusions* _this = reinterpret_cast< PolygonWithExclusions* >(object);
  (void)_this;
}
void PolygonWithExclusions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PolygonWithExclusions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PolygonWithExclusions::Clear() {
// @@protoc_insertion_point(message_clear_start:rocos.PolygonWithExclusions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  exclusions_.Clear();
  if (GetArenaForAllocation() == nullptr && inclusion_ != nullptr) {
    delete inclusion_;
  }
  inclusion_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PolygonWithExclusions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .rocos.Polygon inclusion = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_inclusion(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .rocos.Polygon exclusions = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_exclusions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PolygonWithExclusions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocos.PolygonWithExclusions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rocos.Polygon inclusion = 5;
  if (this->_internal_has_inclusion()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::inclusion(this), target, stream);
  }

  // repeated .rocos.Polygon exclusions = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_exclusions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_exclusions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocos.PolygonWithExclusions)
  return target;
}

size_t PolygonWithExclusions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocos.PolygonWithExclusions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .rocos.Polygon exclusions = 6;
  total_size += 1UL * this->_internal_exclusions_size();
  for (const auto& msg : this->exclusions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .rocos.Polygon inclusion = 5;
  if (this->_internal_has_inclusion()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *inclusion_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PolygonWithExclusions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PolygonWithExclusions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PolygonWithExclusions::GetClassData() const { return &_class_data_; }

void PolygonWithExclusions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<PolygonWithExclusions *>(to)->MergeFrom(
      static_cast<const PolygonWithExclusions &>(from));
}


void PolygonWithExclusions::MergeFrom(const PolygonWithExclusions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rocos.PolygonWithExclusions)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  exclusions_.MergeFrom(from.exclusions_);
  if (from._internal_has_inclusion()) {
    _internal_mutable_inclusion()->::rocos::Polygon::MergeFrom(from._internal_inclusion());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PolygonWithExclusions::CopyFrom(const PolygonWithExclusions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocos.PolygonWithExclusions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PolygonWithExclusions::IsInitialized() const {
  return true;
}

void PolygonWithExclusions::InternalSwap(PolygonWithExclusions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  exclusions_.InternalSwap(&other->exclusions_);
  swap(inclusion_, other->inclusion_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PolygonWithExclusions::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_geometry_2eproto_getter, &descriptor_table_geometry_2eproto_once,
      file_level_metadata_geometry_2eproto[24]);
}

// ===================================================================

class Circle::_Internal {
 public:
  static const ::rocos::Vec2& center_pt(const Circle* msg);
};

const ::rocos::Vec2&
Circle::_Internal::center_pt(const Circle* msg) {
  return *msg->center_pt_;
}
Circle::Circle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rocos.Circle)
}
Circle::Circle(const Circle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_center_pt()) {
    center_pt_ = new ::rocos::Vec2(*from.center_pt_);
  } else {
    center_pt_ = nullptr;
  }
  radius_ = from.radius_;
  // @@protoc_insertion_point(copy_constructor:rocos.Circle)
}

inline void Circle::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&center_pt_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&radius_) -
    reinterpret_cast<char*>(&center_pt_)) + sizeof(radius_));
}

Circle::~Circle() {
  // @@protoc_insertion_point(destructor:rocos.Circle)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Circle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete center_pt_;
}

void Circle::ArenaDtor(void* object) {
  Circle* _this = reinterpret_cast< Circle* >(object);
  (void)_this;
}
void Circle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Circle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Circle::Clear() {
// @@protoc_insertion_point(message_clear_start:rocos.Circle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && center_pt_ != nullptr) {
    delete center_pt_;
  }
  center_pt_ = nullptr;
  radius_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Circle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .rocos.Vec2 center_pt = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_center_pt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double radius = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Circle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocos.Circle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rocos.Vec2 center_pt = 1;
  if (this->_internal_has_center_pt()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::center_pt(this), target, stream);
  }

  // double radius = 2;
  if (!(this->_internal_radius() <= 0 && this->_internal_radius() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_radius(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocos.Circle)
  return target;
}

size_t Circle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocos.Circle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .rocos.Vec2 center_pt = 1;
  if (this->_internal_has_center_pt()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *center_pt_);
  }

  // double radius = 2;
  if (!(this->_internal_radius() <= 0 && this->_internal_radius() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Circle::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Circle::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Circle::GetClassData() const { return &_class_data_; }

void Circle::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Circle *>(to)->MergeFrom(
      static_cast<const Circle &>(from));
}


void Circle::MergeFrom(const Circle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rocos.Circle)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_center_pt()) {
    _internal_mutable_center_pt()->::rocos::Vec2::MergeFrom(from._internal_center_pt());
  }
  if (!(from._internal_radius() <= 0 && from._internal_radius() >= 0)) {
    _internal_set_radius(from._internal_radius());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Circle::CopyFrom(const Circle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocos.Circle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Circle::IsInitialized() const {
  return true;
}

void Circle::InternalSwap(Circle* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Circle, radius_)
      + sizeof(Circle::radius_)
      - PROTOBUF_FIELD_OFFSET(Circle, center_pt_)>(
          reinterpret_cast<char*>(&center_pt_),
          reinterpret_cast<char*>(&other->center_pt_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Circle::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_geometry_2eproto_getter, &descriptor_table_geometry_2eproto_once,
      file_level_metadata_geometry_2eproto[25]);
}

// ===================================================================

class Area::_Internal {
 public:
  static const ::rocos::Polygon& polygon(const Area* msg);
  static const ::rocos::Circle& circle(const Area* msg);
};

const ::rocos::Polygon&
Area::_Internal::polygon(const Area* msg) {
  return *msg->geometry_.polygon_;
}
const ::rocos::Circle&
Area::_Internal::circle(const Area* msg) {
  return *msg->geometry_.circle_;
}
void Area::set_allocated_polygon(::rocos::Polygon* polygon) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_geometry();
  if (polygon) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::rocos::Polygon>::GetOwningArena(polygon);
    if (message_arena != submessage_arena) {
      polygon = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, polygon, submessage_arena);
    }
    set_has_polygon();
    geometry_.polygon_ = polygon;
  }
  // @@protoc_insertion_point(field_set_allocated:rocos.Area.polygon)
}
void Area::set_allocated_circle(::rocos::Circle* circle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_geometry();
  if (circle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::rocos::Circle>::GetOwningArena(circle);
    if (message_arena != submessage_arena) {
      circle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, circle, submessage_arena);
    }
    set_has_circle();
    geometry_.circle_ = circle;
  }
  // @@protoc_insertion_point(field_set_allocated:rocos.Area.circle)
}
Area::Area(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rocos.Area)
}
Area::Area(const Area& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_geometry();
  switch (from.geometry_case()) {
    case kPolygon: {
      _internal_mutable_polygon()->::rocos::Polygon::MergeFrom(from._internal_polygon());
      break;
    }
    case kCircle: {
      _internal_mutable_circle()->::rocos::Circle::MergeFrom(from._internal_circle());
      break;
    }
    case GEOMETRY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:rocos.Area)
}

inline void Area::SharedCtor() {
clear_has_geometry();
}

Area::~Area() {
  // @@protoc_insertion_point(destructor:rocos.Area)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Area::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_geometry()) {
    clear_geometry();
  }
}

void Area::ArenaDtor(void* object) {
  Area* _this = reinterpret_cast< Area* >(object);
  (void)_this;
}
void Area::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Area::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Area::clear_geometry() {
// @@protoc_insertion_point(one_of_clear_start:rocos.Area)
  switch (geometry_case()) {
    case kPolygon: {
      if (GetArenaForAllocation() == nullptr) {
        delete geometry_.polygon_;
      }
      break;
    }
    case kCircle: {
      if (GetArenaForAllocation() == nullptr) {
        delete geometry_.circle_;
      }
      break;
    }
    case GEOMETRY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = GEOMETRY_NOT_SET;
}


void Area::Clear() {
// @@protoc_insertion_point(message_clear_start:rocos.Area)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_geometry();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Area::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .rocos.Polygon polygon = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_polygon(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .rocos.Circle circle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_circle(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Area::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocos.Area)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rocos.Polygon polygon = 1;
  if (_internal_has_polygon()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::polygon(this), target, stream);
  }

  // .rocos.Circle circle = 2;
  if (_internal_has_circle()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::circle(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocos.Area)
  return target;
}

size_t Area::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocos.Area)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (geometry_case()) {
    // .rocos.Polygon polygon = 1;
    case kPolygon: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *geometry_.polygon_);
      break;
    }
    // .rocos.Circle circle = 2;
    case kCircle: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *geometry_.circle_);
      break;
    }
    case GEOMETRY_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Area::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Area::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Area::GetClassData() const { return &_class_data_; }

void Area::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Area *>(to)->MergeFrom(
      static_cast<const Area &>(from));
}


void Area::MergeFrom(const Area& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rocos.Area)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.geometry_case()) {
    case kPolygon: {
      _internal_mutable_polygon()->::rocos::Polygon::MergeFrom(from._internal_polygon());
      break;
    }
    case kCircle: {
      _internal_mutable_circle()->::rocos::Circle::MergeFrom(from._internal_circle());
      break;
    }
    case GEOMETRY_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Area::CopyFrom(const Area& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocos.Area)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Area::IsInitialized() const {
  return true;
}

void Area::InternalSwap(Area* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(geometry_, other->geometry_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Area::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_geometry_2eproto_getter, &descriptor_table_geometry_2eproto_once,
      file_level_metadata_geometry_2eproto[26]);
}

// ===================================================================

class Volume::_Internal {
 public:
  static const ::rocos::Vec3& box(const Volume* msg);
};

const ::rocos::Vec3&
Volume::_Internal::box(const Volume* msg) {
  return *msg->geometry_.box_;
}
void Volume::set_allocated_box(::rocos::Vec3* box) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_geometry();
  if (box) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::rocos::Vec3>::GetOwningArena(box);
    if (message_arena != submessage_arena) {
      box = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, box, submessage_arena);
    }
    set_has_box();
    geometry_.box_ = box;
  }
  // @@protoc_insertion_point(field_set_allocated:rocos.Volume.box)
}
Volume::Volume(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rocos.Volume)
}
Volume::Volume(const Volume& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_geometry();
  switch (from.geometry_case()) {
    case kBox: {
      _internal_mutable_box()->::rocos::Vec3::MergeFrom(from._internal_box());
      break;
    }
    case GEOMETRY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:rocos.Volume)
}

inline void Volume::SharedCtor() {
clear_has_geometry();
}

Volume::~Volume() {
  // @@protoc_insertion_point(destructor:rocos.Volume)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Volume::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_geometry()) {
    clear_geometry();
  }
}

void Volume::ArenaDtor(void* object) {
  Volume* _this = reinterpret_cast< Volume* >(object);
  (void)_this;
}
void Volume::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Volume::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Volume::clear_geometry() {
// @@protoc_insertion_point(one_of_clear_start:rocos.Volume)
  switch (geometry_case()) {
    case kBox: {
      if (GetArenaForAllocation() == nullptr) {
        delete geometry_.box_;
      }
      break;
    }
    case GEOMETRY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = GEOMETRY_NOT_SET;
}


void Volume::Clear() {
// @@protoc_insertion_point(message_clear_start:rocos.Volume)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_geometry();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Volume::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .rocos.Vec3 box = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_box(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Volume::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocos.Volume)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rocos.Vec3 box = 1;
  if (_internal_has_box()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::box(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocos.Volume)
  return target;
}

size_t Volume::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocos.Volume)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (geometry_case()) {
    // .rocos.Vec3 box = 1;
    case kBox: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *geometry_.box_);
      break;
    }
    case GEOMETRY_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Volume::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Volume::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Volume::GetClassData() const { return &_class_data_; }

void Volume::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Volume *>(to)->MergeFrom(
      static_cast<const Volume &>(from));
}


void Volume::MergeFrom(const Volume& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rocos.Volume)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.geometry_case()) {
    case kBox: {
      _internal_mutable_box()->::rocos::Vec3::MergeFrom(from._internal_box());
      break;
    }
    case GEOMETRY_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Volume::CopyFrom(const Volume& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocos.Volume)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Volume::IsInitialized() const {
  return true;
}

void Volume::InternalSwap(Volume* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(geometry_, other->geometry_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Volume::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_geometry_2eproto_getter, &descriptor_table_geometry_2eproto_once,
      file_level_metadata_geometry_2eproto[27]);
}

// ===================================================================

class Bounds::_Internal {
 public:
};

Bounds::Bounds(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rocos.Bounds)
}
Bounds::Bounds(const Bounds& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&lower_, &from.lower_,
    static_cast<size_t>(reinterpret_cast<char*>(&upper_) -
    reinterpret_cast<char*>(&lower_)) + sizeof(upper_));
  // @@protoc_insertion_point(copy_constructor:rocos.Bounds)
}

inline void Bounds::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&lower_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&upper_) -
    reinterpret_cast<char*>(&lower_)) + sizeof(upper_));
}

Bounds::~Bounds() {
  // @@protoc_insertion_point(destructor:rocos.Bounds)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Bounds::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Bounds::ArenaDtor(void* object) {
  Bounds* _this = reinterpret_cast< Bounds* >(object);
  (void)_this;
}
void Bounds::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Bounds::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Bounds::Clear() {
// @@protoc_insertion_point(message_clear_start:rocos.Bounds)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&lower_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&upper_) -
      reinterpret_cast<char*>(&lower_)) + sizeof(upper_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Bounds::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double lower = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          lower_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double upper = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          upper_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Bounds::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocos.Bounds)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double lower = 1;
  if (!(this->_internal_lower() <= 0 && this->_internal_lower() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_lower(), target);
  }

  // double upper = 2;
  if (!(this->_internal_upper() <= 0 && this->_internal_upper() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_upper(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocos.Bounds)
  return target;
}

size_t Bounds::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocos.Bounds)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double lower = 1;
  if (!(this->_internal_lower() <= 0 && this->_internal_lower() >= 0)) {
    total_size += 1 + 8;
  }

  // double upper = 2;
  if (!(this->_internal_upper() <= 0 && this->_internal_upper() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Bounds::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Bounds::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Bounds::GetClassData() const { return &_class_data_; }

void Bounds::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Bounds *>(to)->MergeFrom(
      static_cast<const Bounds &>(from));
}


void Bounds::MergeFrom(const Bounds& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rocos.Bounds)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from._internal_lower() <= 0 && from._internal_lower() >= 0)) {
    _internal_set_lower(from._internal_lower());
  }
  if (!(from._internal_upper() <= 0 && from._internal_upper() >= 0)) {
    _internal_set_upper(from._internal_upper());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Bounds::CopyFrom(const Bounds& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocos.Bounds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bounds::IsInitialized() const {
  return true;
}

void Bounds::InternalSwap(Bounds* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Bounds, upper_)
      + sizeof(Bounds::upper_)
      - PROTOBUF_FIELD_OFFSET(Bounds, lower_)>(
          reinterpret_cast<char*>(&lower_),
          reinterpret_cast<char*>(&other->lower_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Bounds::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_geometry_2eproto_getter, &descriptor_table_geometry_2eproto_once,
      file_level_metadata_geometry_2eproto[28]);
}

// ===================================================================

class Vec2Value::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::DoubleValue& x(const Vec2Value* msg);
  static const PROTOBUF_NAMESPACE_ID::DoubleValue& y(const Vec2Value* msg);
};

const PROTOBUF_NAMESPACE_ID::DoubleValue&
Vec2Value::_Internal::x(const Vec2Value* msg) {
  return *msg->x_;
}
const PROTOBUF_NAMESPACE_ID::DoubleValue&
Vec2Value::_Internal::y(const Vec2Value* msg) {
  return *msg->y_;
}
void Vec2Value::clear_x() {
  if (GetArenaForAllocation() == nullptr && x_ != nullptr) {
    delete x_;
  }
  x_ = nullptr;
}
void Vec2Value::clear_y() {
  if (GetArenaForAllocation() == nullptr && y_ != nullptr) {
    delete y_;
  }
  y_ = nullptr;
}
Vec2Value::Vec2Value(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rocos.Vec2Value)
}
Vec2Value::Vec2Value(const Vec2Value& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_x()) {
    x_ = new PROTOBUF_NAMESPACE_ID::DoubleValue(*from.x_);
  } else {
    x_ = nullptr;
  }
  if (from._internal_has_y()) {
    y_ = new PROTOBUF_NAMESPACE_ID::DoubleValue(*from.y_);
  } else {
    y_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:rocos.Vec2Value)
}

inline void Vec2Value::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

Vec2Value::~Vec2Value() {
  // @@protoc_insertion_point(destructor:rocos.Vec2Value)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Vec2Value::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete x_;
  if (this != internal_default_instance()) delete y_;
}

void Vec2Value::ArenaDtor(void* object) {
  Vec2Value* _this = reinterpret_cast< Vec2Value* >(object);
  (void)_this;
}
void Vec2Value::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Vec2Value::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Vec2Value::Clear() {
// @@protoc_insertion_point(message_clear_start:rocos.Vec2Value)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && x_ != nullptr) {
    delete x_;
  }
  x_ = nullptr;
  if (GetArenaForAllocation() == nullptr && y_ != nullptr) {
    delete y_;
  }
  y_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vec2Value::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.DoubleValue x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_x(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.DoubleValue y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_y(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vec2Value::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocos.Vec2Value)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.DoubleValue x = 1;
  if (this->_internal_has_x()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::x(this), target, stream);
  }

  // .google.protobuf.DoubleValue y = 2;
  if (this->_internal_has_y()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::y(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocos.Vec2Value)
  return target;
}

size_t Vec2Value::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocos.Vec2Value)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.DoubleValue x = 1;
  if (this->_internal_has_x()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *x_);
  }

  // .google.protobuf.DoubleValue y = 2;
  if (this->_internal_has_y()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *y_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vec2Value::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Vec2Value::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vec2Value::GetClassData() const { return &_class_data_; }

void Vec2Value::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Vec2Value *>(to)->MergeFrom(
      static_cast<const Vec2Value &>(from));
}


void Vec2Value::MergeFrom(const Vec2Value& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rocos.Vec2Value)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_x()) {
    _internal_mutable_x()->PROTOBUF_NAMESPACE_ID::DoubleValue::MergeFrom(from._internal_x());
  }
  if (from._internal_has_y()) {
    _internal_mutable_y()->PROTOBUF_NAMESPACE_ID::DoubleValue::MergeFrom(from._internal_y());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vec2Value::CopyFrom(const Vec2Value& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocos.Vec2Value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vec2Value::IsInitialized() const {
  return true;
}

void Vec2Value::InternalSwap(Vec2Value* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vec2Value, y_)
      + sizeof(Vec2Value::y_)
      - PROTOBUF_FIELD_OFFSET(Vec2Value, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vec2Value::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_geometry_2eproto_getter, &descriptor_table_geometry_2eproto_once,
      file_level_metadata_geometry_2eproto[29]);
}

// ===================================================================

class Vec3Value::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::DoubleValue& x(const Vec3Value* msg);
  static const PROTOBUF_NAMESPACE_ID::DoubleValue& y(const Vec3Value* msg);
  static const PROTOBUF_NAMESPACE_ID::DoubleValue& z(const Vec3Value* msg);
};

const PROTOBUF_NAMESPACE_ID::DoubleValue&
Vec3Value::_Internal::x(const Vec3Value* msg) {
  return *msg->x_;
}
const PROTOBUF_NAMESPACE_ID::DoubleValue&
Vec3Value::_Internal::y(const Vec3Value* msg) {
  return *msg->y_;
}
const PROTOBUF_NAMESPACE_ID::DoubleValue&
Vec3Value::_Internal::z(const Vec3Value* msg) {
  return *msg->z_;
}
void Vec3Value::clear_x() {
  if (GetArenaForAllocation() == nullptr && x_ != nullptr) {
    delete x_;
  }
  x_ = nullptr;
}
void Vec3Value::clear_y() {
  if (GetArenaForAllocation() == nullptr && y_ != nullptr) {
    delete y_;
  }
  y_ = nullptr;
}
void Vec3Value::clear_z() {
  if (GetArenaForAllocation() == nullptr && z_ != nullptr) {
    delete z_;
  }
  z_ = nullptr;
}
Vec3Value::Vec3Value(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rocos.Vec3Value)
}
Vec3Value::Vec3Value(const Vec3Value& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_x()) {
    x_ = new PROTOBUF_NAMESPACE_ID::DoubleValue(*from.x_);
  } else {
    x_ = nullptr;
  }
  if (from._internal_has_y()) {
    y_ = new PROTOBUF_NAMESPACE_ID::DoubleValue(*from.y_);
  } else {
    y_ = nullptr;
  }
  if (from._internal_has_z()) {
    z_ = new PROTOBUF_NAMESPACE_ID::DoubleValue(*from.z_);
  } else {
    z_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:rocos.Vec3Value)
}

inline void Vec3Value::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Vec3Value::~Vec3Value() {
  // @@protoc_insertion_point(destructor:rocos.Vec3Value)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Vec3Value::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete x_;
  if (this != internal_default_instance()) delete y_;
  if (this != internal_default_instance()) delete z_;
}

void Vec3Value::ArenaDtor(void* object) {
  Vec3Value* _this = reinterpret_cast< Vec3Value* >(object);
  (void)_this;
}
void Vec3Value::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Vec3Value::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Vec3Value::Clear() {
// @@protoc_insertion_point(message_clear_start:rocos.Vec3Value)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && x_ != nullptr) {
    delete x_;
  }
  x_ = nullptr;
  if (GetArenaForAllocation() == nullptr && y_ != nullptr) {
    delete y_;
  }
  y_ = nullptr;
  if (GetArenaForAllocation() == nullptr && z_ != nullptr) {
    delete z_;
  }
  z_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vec3Value::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.DoubleValue x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_x(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.DoubleValue y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_y(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.DoubleValue z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_z(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vec3Value::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocos.Vec3Value)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.DoubleValue x = 1;
  if (this->_internal_has_x()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::x(this), target, stream);
  }

  // .google.protobuf.DoubleValue y = 2;
  if (this->_internal_has_y()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::y(this), target, stream);
  }

  // .google.protobuf.DoubleValue z = 3;
  if (this->_internal_has_z()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::z(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocos.Vec3Value)
  return target;
}

size_t Vec3Value::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocos.Vec3Value)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.DoubleValue x = 1;
  if (this->_internal_has_x()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *x_);
  }

  // .google.protobuf.DoubleValue y = 2;
  if (this->_internal_has_y()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *y_);
  }

  // .google.protobuf.DoubleValue z = 3;
  if (this->_internal_has_z()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *z_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vec3Value::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Vec3Value::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vec3Value::GetClassData() const { return &_class_data_; }

void Vec3Value::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Vec3Value *>(to)->MergeFrom(
      static_cast<const Vec3Value &>(from));
}


void Vec3Value::MergeFrom(const Vec3Value& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rocos.Vec3Value)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_x()) {
    _internal_mutable_x()->PROTOBUF_NAMESPACE_ID::DoubleValue::MergeFrom(from._internal_x());
  }
  if (from._internal_has_y()) {
    _internal_mutable_y()->PROTOBUF_NAMESPACE_ID::DoubleValue::MergeFrom(from._internal_y());
  }
  if (from._internal_has_z()) {
    _internal_mutable_z()->PROTOBUF_NAMESPACE_ID::DoubleValue::MergeFrom(from._internal_z());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vec3Value::CopyFrom(const Vec3Value& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocos.Vec3Value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vec3Value::IsInitialized() const {
  return true;
}

void Vec3Value::InternalSwap(Vec3Value* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vec3Value, z_)
      + sizeof(Vec3Value::z_)
      - PROTOBUF_FIELD_OFFSET(Vec3Value, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vec3Value::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_geometry_2eproto_getter, &descriptor_table_geometry_2eproto_once,
      file_level_metadata_geometry_2eproto[30]);
}

// ===================================================================

class JointArray::_Internal {
 public:
};

JointArray::JointArray(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  data_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rocos.JointArray)
}
JointArray::JointArray(const JointArray& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:rocos.JointArray)
}

inline void JointArray::SharedCtor() {
}

JointArray::~JointArray() {
  // @@protoc_insertion_point(destructor:rocos.JointArray)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void JointArray::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void JointArray::ArenaDtor(void* object) {
  JointArray* _this = reinterpret_cast< JointArray* >(object);
  (void)_this;
}
void JointArray::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JointArray::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void JointArray::Clear() {
// @@protoc_insertion_point(message_clear_start:rocos.JointArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JointArray::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated double data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9) {
          _internal_add_data(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JointArray::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocos.JointArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double data = 1;
  if (this->_internal_data_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocos.JointArray)
  return target;
}

size_t JointArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocos.JointArray)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double data = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_data_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData JointArray::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    JointArray::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*JointArray::GetClassData() const { return &_class_data_; }

void JointArray::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<JointArray *>(to)->MergeFrom(
      static_cast<const JointArray &>(from));
}


void JointArray::MergeFrom(const JointArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rocos.JointArray)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void JointArray::CopyFrom(const JointArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocos.JointArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JointArray::IsInitialized() const {
  return true;
}

void JointArray::InternalSwap(JointArray* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JointArray::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_geometry_2eproto_getter, &descriptor_table_geometry_2eproto_once,
      file_level_metadata_geometry_2eproto[31]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace rocos
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::rocos::Vec2* Arena::CreateMaybeMessage< ::rocos::Vec2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rocos::Vec2 >(arena);
}
template<> PROTOBUF_NOINLINE ::rocos::Vec3* Arena::CreateMaybeMessage< ::rocos::Vec3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rocos::Vec3 >(arena);
}
template<> PROTOBUF_NOINLINE ::rocos::CylindricalCoordinate* Arena::CreateMaybeMessage< ::rocos::CylindricalCoordinate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rocos::CylindricalCoordinate >(arena);
}
template<> PROTOBUF_NOINLINE ::rocos::Quaternion* Arena::CreateMaybeMessage< ::rocos::Quaternion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rocos::Quaternion >(arena);
}
template<> PROTOBUF_NOINLINE ::rocos::Plane* Arena::CreateMaybeMessage< ::rocos::Plane >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rocos::Plane >(arena);
}
template<> PROTOBUF_NOINLINE ::rocos::Quad* Arena::CreateMaybeMessage< ::rocos::Quad >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rocos::Quad >(arena);
}
template<> PROTOBUF_NOINLINE ::rocos::Ray* Arena::CreateMaybeMessage< ::rocos::Ray >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rocos::Ray >(arena);
}
template<> PROTOBUF_NOINLINE ::rocos::SE2Pose* Arena::CreateMaybeMessage< ::rocos::SE2Pose >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rocos::SE2Pose >(arena);
}
template<> PROTOBUF_NOINLINE ::rocos::SE2Velocity* Arena::CreateMaybeMessage< ::rocos::SE2Velocity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rocos::SE2Velocity >(arena);
}
template<> PROTOBUF_NOINLINE ::rocos::SE2VelocityLimit* Arena::CreateMaybeMessage< ::rocos::SE2VelocityLimit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rocos::SE2VelocityLimit >(arena);
}
template<> PROTOBUF_NOINLINE ::rocos::SE3Pose* Arena::CreateMaybeMessage< ::rocos::SE3Pose >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rocos::SE3Pose >(arena);
}
template<> PROTOBUF_NOINLINE ::rocos::SE3Velocity* Arena::CreateMaybeMessage< ::rocos::SE3Velocity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rocos::SE3Velocity >(arena);
}
template<> PROTOBUF_NOINLINE ::rocos::Wrench* Arena::CreateMaybeMessage< ::rocos::Wrench >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rocos::Wrench >(arena);
}
template<> PROTOBUF_NOINLINE ::rocos::FrameTreeSnapshot_ParentEdge* Arena::CreateMaybeMessage< ::rocos::FrameTreeSnapshot_ParentEdge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rocos::FrameTreeSnapshot_ParentEdge >(arena);
}
template<> PROTOBUF_NOINLINE ::rocos::FrameTreeSnapshot_ChildToParentEdgeMapEntry_DoNotUse* Arena::CreateMaybeMessage< ::rocos::FrameTreeSnapshot_ChildToParentEdgeMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rocos::FrameTreeSnapshot_ChildToParentEdgeMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::rocos::FrameTreeSnapshot* Arena::CreateMaybeMessage< ::rocos::FrameTreeSnapshot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rocos::FrameTreeSnapshot >(arena);
}
template<> PROTOBUF_NOINLINE ::rocos::Box2* Arena::CreateMaybeMessage< ::rocos::Box2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rocos::Box2 >(arena);
}
template<> PROTOBUF_NOINLINE ::rocos::Box2WithFrame* Arena::CreateMaybeMessage< ::rocos::Box2WithFrame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rocos::Box2WithFrame >(arena);
}
template<> PROTOBUF_NOINLINE ::rocos::Box3* Arena::CreateMaybeMessage< ::rocos::Box3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rocos::Box3 >(arena);
}
template<> PROTOBUF_NOINLINE ::rocos::Box3WithFrame* Arena::CreateMaybeMessage< ::rocos::Box3WithFrame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rocos::Box3WithFrame >(arena);
}
template<> PROTOBUF_NOINLINE ::rocos::Matrix* Arena::CreateMaybeMessage< ::rocos::Matrix >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rocos::Matrix >(arena);
}
template<> PROTOBUF_NOINLINE ::rocos::SE3Covariance* Arena::CreateMaybeMessage< ::rocos::SE3Covariance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rocos::SE3Covariance >(arena);
}
template<> PROTOBUF_NOINLINE ::rocos::PolyLine* Arena::CreateMaybeMessage< ::rocos::PolyLine >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rocos::PolyLine >(arena);
}
template<> PROTOBUF_NOINLINE ::rocos::Polygon* Arena::CreateMaybeMessage< ::rocos::Polygon >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rocos::Polygon >(arena);
}
template<> PROTOBUF_NOINLINE ::rocos::PolygonWithExclusions* Arena::CreateMaybeMessage< ::rocos::PolygonWithExclusions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rocos::PolygonWithExclusions >(arena);
}
template<> PROTOBUF_NOINLINE ::rocos::Circle* Arena::CreateMaybeMessage< ::rocos::Circle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rocos::Circle >(arena);
}
template<> PROTOBUF_NOINLINE ::rocos::Area* Arena::CreateMaybeMessage< ::rocos::Area >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rocos::Area >(arena);
}
template<> PROTOBUF_NOINLINE ::rocos::Volume* Arena::CreateMaybeMessage< ::rocos::Volume >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rocos::Volume >(arena);
}
template<> PROTOBUF_NOINLINE ::rocos::Bounds* Arena::CreateMaybeMessage< ::rocos::Bounds >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rocos::Bounds >(arena);
}
template<> PROTOBUF_NOINLINE ::rocos::Vec2Value* Arena::CreateMaybeMessage< ::rocos::Vec2Value >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rocos::Vec2Value >(arena);
}
template<> PROTOBUF_NOINLINE ::rocos::Vec3Value* Arena::CreateMaybeMessage< ::rocos::Vec3Value >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rocos::Vec3Value >(arena);
}
template<> PROTOBUF_NOINLINE ::rocos::JointArray* Arena::CreateMaybeMessage< ::rocos::JointArray >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rocos::JointArray >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
