// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: robot_service.proto
// Original file comments:
// Copyright 2021, Yang Luo"
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
// @Author
// Yang Luo, PHD
// Shenyang Institute of Automation, Chinese Academy of Sciences.
// email: luoyang@sia.cn
//
#ifndef GRPC_robot_5fservice_2eproto__INCLUDED
#define GRPC_robot_5fservice_2eproto__INCLUDED

#include "robot_service.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace rocos {

class RobotService final {
 public:
  static constexpr char const* service_full_name() {
    return "rocos.RobotService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Receive robot info information
    virtual ::grpc::Status ReadRobotInfo(::grpc::ClientContext* context, const ::rocos::RobotInfoRequest& request, ::rocos::RobotInfoResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rocos::RobotInfoResponse>> AsyncReadRobotInfo(::grpc::ClientContext* context, const ::rocos::RobotInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rocos::RobotInfoResponse>>(AsyncReadRobotInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rocos::RobotInfoResponse>> PrepareAsyncReadRobotInfo(::grpc::ClientContext* context, const ::rocos::RobotInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rocos::RobotInfoResponse>>(PrepareAsyncReadRobotInfoRaw(context, request, cq));
    }
    // Receive robot state information
    virtual ::grpc::Status ReadRobotState(::grpc::ClientContext* context, const ::rocos::RobotStateRequest& request, ::rocos::RobotStateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rocos::RobotStateResponse>> AsyncReadRobotState(::grpc::ClientContext* context, const ::rocos::RobotStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rocos::RobotStateResponse>>(AsyncReadRobotStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rocos::RobotStateResponse>> PrepareAsyncReadRobotState(::grpc::ClientContext* context, const ::rocos::RobotStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rocos::RobotStateResponse>>(PrepareAsyncReadRobotStateRaw(context, request, cq));
    }
    // Send Robot Command
    virtual ::grpc::Status WriteRobotCommmand(::grpc::ClientContext* context, const ::rocos::RobotCommandRequest& request, ::rocos::RobotCommandResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rocos::RobotCommandResponse>> AsyncWriteRobotCommmand(::grpc::ClientContext* context, const ::rocos::RobotCommandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rocos::RobotCommandResponse>>(AsyncWriteRobotCommmandRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rocos::RobotCommandResponse>> PrepareAsyncWriteRobotCommmand(::grpc::ClientContext* context, const ::rocos::RobotCommandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rocos::RobotCommandResponse>>(PrepareAsyncWriteRobotCommmandRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Receive robot info information
      virtual void ReadRobotInfo(::grpc::ClientContext* context, const ::rocos::RobotInfoRequest* request, ::rocos::RobotInfoResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReadRobotInfo(::grpc::ClientContext* context, const ::rocos::RobotInfoRequest* request, ::rocos::RobotInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Receive robot state information
      virtual void ReadRobotState(::grpc::ClientContext* context, const ::rocos::RobotStateRequest* request, ::rocos::RobotStateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReadRobotState(::grpc::ClientContext* context, const ::rocos::RobotStateRequest* request, ::rocos::RobotStateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Send Robot Command
      virtual void WriteRobotCommmand(::grpc::ClientContext* context, const ::rocos::RobotCommandRequest* request, ::rocos::RobotCommandResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void WriteRobotCommmand(::grpc::ClientContext* context, const ::rocos::RobotCommandRequest* request, ::rocos::RobotCommandResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rocos::RobotInfoResponse>* AsyncReadRobotInfoRaw(::grpc::ClientContext* context, const ::rocos::RobotInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rocos::RobotInfoResponse>* PrepareAsyncReadRobotInfoRaw(::grpc::ClientContext* context, const ::rocos::RobotInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rocos::RobotStateResponse>* AsyncReadRobotStateRaw(::grpc::ClientContext* context, const ::rocos::RobotStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rocos::RobotStateResponse>* PrepareAsyncReadRobotStateRaw(::grpc::ClientContext* context, const ::rocos::RobotStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rocos::RobotCommandResponse>* AsyncWriteRobotCommmandRaw(::grpc::ClientContext* context, const ::rocos::RobotCommandRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rocos::RobotCommandResponse>* PrepareAsyncWriteRobotCommmandRaw(::grpc::ClientContext* context, const ::rocos::RobotCommandRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status ReadRobotInfo(::grpc::ClientContext* context, const ::rocos::RobotInfoRequest& request, ::rocos::RobotInfoResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rocos::RobotInfoResponse>> AsyncReadRobotInfo(::grpc::ClientContext* context, const ::rocos::RobotInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rocos::RobotInfoResponse>>(AsyncReadRobotInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rocos::RobotInfoResponse>> PrepareAsyncReadRobotInfo(::grpc::ClientContext* context, const ::rocos::RobotInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rocos::RobotInfoResponse>>(PrepareAsyncReadRobotInfoRaw(context, request, cq));
    }
    ::grpc::Status ReadRobotState(::grpc::ClientContext* context, const ::rocos::RobotStateRequest& request, ::rocos::RobotStateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rocos::RobotStateResponse>> AsyncReadRobotState(::grpc::ClientContext* context, const ::rocos::RobotStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rocos::RobotStateResponse>>(AsyncReadRobotStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rocos::RobotStateResponse>> PrepareAsyncReadRobotState(::grpc::ClientContext* context, const ::rocos::RobotStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rocos::RobotStateResponse>>(PrepareAsyncReadRobotStateRaw(context, request, cq));
    }
    ::grpc::Status WriteRobotCommmand(::grpc::ClientContext* context, const ::rocos::RobotCommandRequest& request, ::rocos::RobotCommandResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rocos::RobotCommandResponse>> AsyncWriteRobotCommmand(::grpc::ClientContext* context, const ::rocos::RobotCommandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rocos::RobotCommandResponse>>(AsyncWriteRobotCommmandRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rocos::RobotCommandResponse>> PrepareAsyncWriteRobotCommmand(::grpc::ClientContext* context, const ::rocos::RobotCommandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rocos::RobotCommandResponse>>(PrepareAsyncWriteRobotCommmandRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void ReadRobotInfo(::grpc::ClientContext* context, const ::rocos::RobotInfoRequest* request, ::rocos::RobotInfoResponse* response, std::function<void(::grpc::Status)>) override;
      void ReadRobotInfo(::grpc::ClientContext* context, const ::rocos::RobotInfoRequest* request, ::rocos::RobotInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ReadRobotState(::grpc::ClientContext* context, const ::rocos::RobotStateRequest* request, ::rocos::RobotStateResponse* response, std::function<void(::grpc::Status)>) override;
      void ReadRobotState(::grpc::ClientContext* context, const ::rocos::RobotStateRequest* request, ::rocos::RobotStateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void WriteRobotCommmand(::grpc::ClientContext* context, const ::rocos::RobotCommandRequest* request, ::rocos::RobotCommandResponse* response, std::function<void(::grpc::Status)>) override;
      void WriteRobotCommmand(::grpc::ClientContext* context, const ::rocos::RobotCommandRequest* request, ::rocos::RobotCommandResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::rocos::RobotInfoResponse>* AsyncReadRobotInfoRaw(::grpc::ClientContext* context, const ::rocos::RobotInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rocos::RobotInfoResponse>* PrepareAsyncReadRobotInfoRaw(::grpc::ClientContext* context, const ::rocos::RobotInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rocos::RobotStateResponse>* AsyncReadRobotStateRaw(::grpc::ClientContext* context, const ::rocos::RobotStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rocos::RobotStateResponse>* PrepareAsyncReadRobotStateRaw(::grpc::ClientContext* context, const ::rocos::RobotStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rocos::RobotCommandResponse>* AsyncWriteRobotCommmandRaw(::grpc::ClientContext* context, const ::rocos::RobotCommandRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rocos::RobotCommandResponse>* PrepareAsyncWriteRobotCommmandRaw(::grpc::ClientContext* context, const ::rocos::RobotCommandRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ReadRobotInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_ReadRobotState_;
    const ::grpc::internal::RpcMethod rpcmethod_WriteRobotCommmand_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Receive robot info information
    virtual ::grpc::Status ReadRobotInfo(::grpc::ServerContext* context, const ::rocos::RobotInfoRequest* request, ::rocos::RobotInfoResponse* response);
    // Receive robot state information
    virtual ::grpc::Status ReadRobotState(::grpc::ServerContext* context, const ::rocos::RobotStateRequest* request, ::rocos::RobotStateResponse* response);
    // Send Robot Command
    virtual ::grpc::Status WriteRobotCommmand(::grpc::ServerContext* context, const ::rocos::RobotCommandRequest* request, ::rocos::RobotCommandResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ReadRobotInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReadRobotInfo() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ReadRobotInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadRobotInfo(::grpc::ServerContext* /*context*/, const ::rocos::RobotInfoRequest* /*request*/, ::rocos::RobotInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReadRobotInfo(::grpc::ServerContext* context, ::rocos::RobotInfoRequest* request, ::grpc::ServerAsyncResponseWriter< ::rocos::RobotInfoResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReadRobotState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReadRobotState() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ReadRobotState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadRobotState(::grpc::ServerContext* /*context*/, const ::rocos::RobotStateRequest* /*request*/, ::rocos::RobotStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReadRobotState(::grpc::ServerContext* context, ::rocos::RobotStateRequest* request, ::grpc::ServerAsyncResponseWriter< ::rocos::RobotStateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_WriteRobotCommmand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_WriteRobotCommmand() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_WriteRobotCommmand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteRobotCommmand(::grpc::ServerContext* /*context*/, const ::rocos::RobotCommandRequest* /*request*/, ::rocos::RobotCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWriteRobotCommmand(::grpc::ServerContext* context, ::rocos::RobotCommandRequest* request, ::grpc::ServerAsyncResponseWriter< ::rocos::RobotCommandResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ReadRobotInfo<WithAsyncMethod_ReadRobotState<WithAsyncMethod_WriteRobotCommmand<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_ReadRobotInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ReadRobotInfo() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::rocos::RobotInfoRequest, ::rocos::RobotInfoResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::rocos::RobotInfoRequest* request, ::rocos::RobotInfoResponse* response) { return this->ReadRobotInfo(context, request, response); }));}
    void SetMessageAllocatorFor_ReadRobotInfo(
        ::grpc::MessageAllocator< ::rocos::RobotInfoRequest, ::rocos::RobotInfoResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::rocos::RobotInfoRequest, ::rocos::RobotInfoResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ReadRobotInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadRobotInfo(::grpc::ServerContext* /*context*/, const ::rocos::RobotInfoRequest* /*request*/, ::rocos::RobotInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReadRobotInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::rocos::RobotInfoRequest* /*request*/, ::rocos::RobotInfoResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ReadRobotState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ReadRobotState() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::rocos::RobotStateRequest, ::rocos::RobotStateResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::rocos::RobotStateRequest* request, ::rocos::RobotStateResponse* response) { return this->ReadRobotState(context, request, response); }));}
    void SetMessageAllocatorFor_ReadRobotState(
        ::grpc::MessageAllocator< ::rocos::RobotStateRequest, ::rocos::RobotStateResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::rocos::RobotStateRequest, ::rocos::RobotStateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ReadRobotState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadRobotState(::grpc::ServerContext* /*context*/, const ::rocos::RobotStateRequest* /*request*/, ::rocos::RobotStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReadRobotState(
      ::grpc::CallbackServerContext* /*context*/, const ::rocos::RobotStateRequest* /*request*/, ::rocos::RobotStateResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_WriteRobotCommmand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_WriteRobotCommmand() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::rocos::RobotCommandRequest, ::rocos::RobotCommandResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::rocos::RobotCommandRequest* request, ::rocos::RobotCommandResponse* response) { return this->WriteRobotCommmand(context, request, response); }));}
    void SetMessageAllocatorFor_WriteRobotCommmand(
        ::grpc::MessageAllocator< ::rocos::RobotCommandRequest, ::rocos::RobotCommandResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::rocos::RobotCommandRequest, ::rocos::RobotCommandResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_WriteRobotCommmand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteRobotCommmand(::grpc::ServerContext* /*context*/, const ::rocos::RobotCommandRequest* /*request*/, ::rocos::RobotCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* WriteRobotCommmand(
      ::grpc::CallbackServerContext* /*context*/, const ::rocos::RobotCommandRequest* /*request*/, ::rocos::RobotCommandResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_ReadRobotInfo<WithCallbackMethod_ReadRobotState<WithCallbackMethod_WriteRobotCommmand<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ReadRobotInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReadRobotInfo() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ReadRobotInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadRobotInfo(::grpc::ServerContext* /*context*/, const ::rocos::RobotInfoRequest* /*request*/, ::rocos::RobotInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReadRobotState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReadRobotState() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ReadRobotState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadRobotState(::grpc::ServerContext* /*context*/, const ::rocos::RobotStateRequest* /*request*/, ::rocos::RobotStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_WriteRobotCommmand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_WriteRobotCommmand() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_WriteRobotCommmand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteRobotCommmand(::grpc::ServerContext* /*context*/, const ::rocos::RobotCommandRequest* /*request*/, ::rocos::RobotCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReadRobotInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReadRobotInfo() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ReadRobotInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadRobotInfo(::grpc::ServerContext* /*context*/, const ::rocos::RobotInfoRequest* /*request*/, ::rocos::RobotInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReadRobotInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReadRobotState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReadRobotState() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ReadRobotState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadRobotState(::grpc::ServerContext* /*context*/, const ::rocos::RobotStateRequest* /*request*/, ::rocos::RobotStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReadRobotState(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_WriteRobotCommmand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_WriteRobotCommmand() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_WriteRobotCommmand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteRobotCommmand(::grpc::ServerContext* /*context*/, const ::rocos::RobotCommandRequest* /*request*/, ::rocos::RobotCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWriteRobotCommmand(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ReadRobotInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ReadRobotInfo() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReadRobotInfo(context, request, response); }));
    }
    ~WithRawCallbackMethod_ReadRobotInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadRobotInfo(::grpc::ServerContext* /*context*/, const ::rocos::RobotInfoRequest* /*request*/, ::rocos::RobotInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReadRobotInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ReadRobotState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ReadRobotState() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReadRobotState(context, request, response); }));
    }
    ~WithRawCallbackMethod_ReadRobotState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadRobotState(::grpc::ServerContext* /*context*/, const ::rocos::RobotStateRequest* /*request*/, ::rocos::RobotStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReadRobotState(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_WriteRobotCommmand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_WriteRobotCommmand() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->WriteRobotCommmand(context, request, response); }));
    }
    ~WithRawCallbackMethod_WriteRobotCommmand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteRobotCommmand(::grpc::ServerContext* /*context*/, const ::rocos::RobotCommandRequest* /*request*/, ::rocos::RobotCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* WriteRobotCommmand(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReadRobotInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReadRobotInfo() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::rocos::RobotInfoRequest, ::rocos::RobotInfoResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::rocos::RobotInfoRequest, ::rocos::RobotInfoResponse>* streamer) {
                       return this->StreamedReadRobotInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReadRobotInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReadRobotInfo(::grpc::ServerContext* /*context*/, const ::rocos::RobotInfoRequest* /*request*/, ::rocos::RobotInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReadRobotInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rocos::RobotInfoRequest,::rocos::RobotInfoResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReadRobotState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReadRobotState() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::rocos::RobotStateRequest, ::rocos::RobotStateResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::rocos::RobotStateRequest, ::rocos::RobotStateResponse>* streamer) {
                       return this->StreamedReadRobotState(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReadRobotState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReadRobotState(::grpc::ServerContext* /*context*/, const ::rocos::RobotStateRequest* /*request*/, ::rocos::RobotStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReadRobotState(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rocos::RobotStateRequest,::rocos::RobotStateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_WriteRobotCommmand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_WriteRobotCommmand() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::rocos::RobotCommandRequest, ::rocos::RobotCommandResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::rocos::RobotCommandRequest, ::rocos::RobotCommandResponse>* streamer) {
                       return this->StreamedWriteRobotCommmand(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_WriteRobotCommmand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status WriteRobotCommmand(::grpc::ServerContext* /*context*/, const ::rocos::RobotCommandRequest* /*request*/, ::rocos::RobotCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedWriteRobotCommmand(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rocos::RobotCommandRequest,::rocos::RobotCommandResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ReadRobotInfo<WithStreamedUnaryMethod_ReadRobotState<WithStreamedUnaryMethod_WriteRobotCommmand<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ReadRobotInfo<WithStreamedUnaryMethod_ReadRobotState<WithStreamedUnaryMethod_WriteRobotCommmand<Service > > > StreamedService;
};

}  // namespace rocos


#endif  // GRPC_robot_5fservice_2eproto__INCLUDED
