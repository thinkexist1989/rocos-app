// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: robot_state.proto

#include "robot_state.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace rocos {
constexpr JointState::JointState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , position_(0)
  , velocity_(0)
  , acceleration_(0)
  , load_(0)
  , status_(0)

  , raw_data_(false){}
struct JointStateDefaultTypeInternal {
  constexpr JointStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~JointStateDefaultTypeInternal() {}
  union {
    JointState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT JointStateDefaultTypeInternal _JointState_default_instance_;
constexpr FlangeState::FlangeState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pose_(nullptr){}
struct FlangeStateDefaultTypeInternal {
  constexpr FlangeStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FlangeStateDefaultTypeInternal() {}
  union {
    FlangeState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FlangeStateDefaultTypeInternal _FlangeState_default_instance_;
constexpr ToolState::ToolState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pose_(nullptr){}
struct ToolStateDefaultTypeInternal {
  constexpr ToolStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ToolStateDefaultTypeInternal() {}
  union {
    ToolState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ToolStateDefaultTypeInternal _ToolState_default_instance_;
constexpr BaseState::BaseState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pose_(nullptr){}
struct BaseStateDefaultTypeInternal {
  constexpr BaseStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BaseStateDefaultTypeInternal() {}
  union {
    BaseState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BaseStateDefaultTypeInternal _BaseState_default_instance_;
constexpr ObjectState::ObjectState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pose_(nullptr){}
struct ObjectStateDefaultTypeInternal {
  constexpr ObjectStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ObjectStateDefaultTypeInternal() {}
  union {
    ObjectState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ObjectStateDefaultTypeInternal _ObjectState_default_instance_;
constexpr RobotState::RobotState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : joint_states_()
  , hw_state_(nullptr)
  , flange_state_(nullptr)
  , tool_state_(nullptr)
  , base_state_(nullptr)
  , obj_state_(nullptr){}
struct RobotStateDefaultTypeInternal {
  constexpr RobotStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RobotStateDefaultTypeInternal() {}
  union {
    RobotState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RobotStateDefaultTypeInternal _RobotState_default_instance_;
constexpr HardwareState::HardwareState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : timestamp_(nullptr)
  , min_cycle_time_(0)
  , hw_type_(0)

  , slave_num_(0)
  , max_cycle_time_(0)
  , current_cycle_time_(0){}
struct HardwareStateDefaultTypeInternal {
  constexpr HardwareStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HardwareStateDefaultTypeInternal() {}
  union {
    HardwareState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HardwareStateDefaultTypeInternal _HardwareState_default_instance_;
constexpr RobotStateRequest::RobotStateRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_(nullptr)
  , raw_data_(false){}
struct RobotStateRequestDefaultTypeInternal {
  constexpr RobotStateRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RobotStateRequestDefaultTypeInternal() {}
  union {
    RobotStateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RobotStateRequestDefaultTypeInternal _RobotStateRequest_default_instance_;
constexpr RobotStateResponse::RobotStateResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_(nullptr)
  , robot_state_(nullptr){}
struct RobotStateResponseDefaultTypeInternal {
  constexpr RobotStateResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RobotStateResponseDefaultTypeInternal() {}
  union {
    RobotStateResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RobotStateResponseDefaultTypeInternal _RobotStateResponse_default_instance_;
}  // namespace rocos
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_robot_5fstate_2eproto[9];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_robot_5fstate_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_robot_5fstate_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_robot_5fstate_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rocos::JointState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rocos::JointState, name_),
  PROTOBUF_FIELD_OFFSET(::rocos::JointState, position_),
  PROTOBUF_FIELD_OFFSET(::rocos::JointState, velocity_),
  PROTOBUF_FIELD_OFFSET(::rocos::JointState, acceleration_),
  PROTOBUF_FIELD_OFFSET(::rocos::JointState, load_),
  PROTOBUF_FIELD_OFFSET(::rocos::JointState, status_),
  PROTOBUF_FIELD_OFFSET(::rocos::JointState, raw_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rocos::FlangeState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rocos::FlangeState, pose_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rocos::ToolState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rocos::ToolState, pose_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rocos::BaseState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rocos::BaseState, pose_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rocos::ObjectState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rocos::ObjectState, pose_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rocos::RobotState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rocos::RobotState, joint_states_),
  PROTOBUF_FIELD_OFFSET(::rocos::RobotState, hw_state_),
  PROTOBUF_FIELD_OFFSET(::rocos::RobotState, flange_state_),
  PROTOBUF_FIELD_OFFSET(::rocos::RobotState, tool_state_),
  PROTOBUF_FIELD_OFFSET(::rocos::RobotState, base_state_),
  PROTOBUF_FIELD_OFFSET(::rocos::RobotState, obj_state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rocos::HardwareState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rocos::HardwareState, hw_type_),
  PROTOBUF_FIELD_OFFSET(::rocos::HardwareState, timestamp_),
  PROTOBUF_FIELD_OFFSET(::rocos::HardwareState, min_cycle_time_),
  PROTOBUF_FIELD_OFFSET(::rocos::HardwareState, max_cycle_time_),
  PROTOBUF_FIELD_OFFSET(::rocos::HardwareState, current_cycle_time_),
  PROTOBUF_FIELD_OFFSET(::rocos::HardwareState, slave_num_),
  PROTOBUF_FIELD_OFFSET(::rocos::RobotStateRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rocos::RobotStateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rocos::RobotStateRequest, header_),
  PROTOBUF_FIELD_OFFSET(::rocos::RobotStateRequest, raw_data_),
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rocos::RobotStateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rocos::RobotStateResponse, header_),
  PROTOBUF_FIELD_OFFSET(::rocos::RobotStateResponse, robot_state_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::rocos::JointState)},
  { 12, -1, sizeof(::rocos::FlangeState)},
  { 18, -1, sizeof(::rocos::ToolState)},
  { 24, -1, sizeof(::rocos::BaseState)},
  { 30, -1, sizeof(::rocos::ObjectState)},
  { 36, -1, sizeof(::rocos::RobotState)},
  { 47, -1, sizeof(::rocos::HardwareState)},
  { 58, 65, sizeof(::rocos::RobotStateRequest)},
  { 67, -1, sizeof(::rocos::RobotStateResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rocos::_JointState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rocos::_FlangeState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rocos::_ToolState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rocos::_BaseState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rocos::_ObjectState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rocos::_RobotState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rocos::_HardwareState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rocos::_RobotStateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rocos::_RobotStateResponse_default_instance_),
};

const char descriptor_table_protodef_robot_5fstate_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021robot_state.proto\022\005rocos\032\014header.proto"
  "\032\016geometry.proto\032\036google/protobuf/wrappe"
  "rs.proto\032\037google/protobuf/timestamp.prot"
  "o\"\373\001\n\nJointState\022\014\n\004name\030\001 \001(\t\022\020\n\010positi"
  "on\030\002 \001(\001\022\020\n\010velocity\030\003 \001(\001\022\024\n\014accelerati"
  "on\030\004 \001(\001\022\014\n\004load\030\005 \001(\001\022(\n\006status\030\006 \001(\0162\030"
  ".rocos.JointState.Status\022\020\n\010raw_data\030\007 \001"
  "(\010\"[\n\006Status\022\026\n\022STATUS_UNSPECIFIED\020\000\022\023\n\017"
  "STATUS_DISABLED\020\001\022\022\n\016STATUS_ENABLED\020\002\022\020\n"
  "\014STATUS_FAULT\020\003\"+\n\013FlangeState\022\034\n\004pose\030\001"
  " \001(\0132\016.rocos.SE3Pose\")\n\tToolState\022\034\n\004pos"
  "e\030\001 \001(\0132\016.rocos.SE3Pose\")\n\tBaseState\022\034\n\004"
  "pose\030\001 \001(\0132\016.rocos.SE3Pose\"+\n\013ObjectStat"
  "e\022\034\n\004pose\030\001 \001(\0132\016.rocos.SE3Pose\"\372\001\n\nRobo"
  "tState\022\'\n\014joint_states\030\001 \003(\0132\021.rocos.Joi"
  "ntState\022&\n\010hw_state\030\002 \001(\0132\024.rocos.Hardwa"
  "reState\022(\n\014flange_state\030\003 \001(\0132\022.rocos.Fl"
  "angeState\022$\n\ntool_state\030\004 \001(\0132\020.rocos.To"
  "olState\022$\n\nbase_state\030\005 \001(\0132\020.rocos.Base"
  "State\022%\n\tobj_state\030\006 \001(\0132\022.rocos.ObjectS"
  "tate\"\304\002\n\rHardwareState\0222\n\007hw_type\030\001 \001(\0162"
  "!.rocos.HardwareState.HardwareType\022-\n\tti"
  "mestamp\030\002 \001(\0132\032.google.protobuf.Timestam"
  "p\022\026\n\016min_cycle_time\030\003 \001(\001\022\026\n\016max_cycle_t"
  "ime\030\004 \001(\001\022\032\n\022current_cycle_time\030\005 \001(\001\022\021\n"
  "\tslave_num\030\006 \001(\005\"q\n\014HardwareType\022\023\n\017HW_T"
  "YPE_UNKNOWN\020\000\022\017\n\013HW_TYPE_SIM\020\001\022\024\n\020HW_TYP"
  "E_ETHERCAT\020\002\022\017\n\013HW_TYPE_CAN\020\003\022\024\n\020HW_TYPE"
  "_PROFINET\020\004\"]\n\021RobotStateRequest\022$\n\006head"
  "er\030\001 \001(\0132\024.rocos.RequestHeader\022\025\n\010raw_da"
  "ta\030\002 \001(\010H\000\210\001\001B\013\n\t_raw_data\"c\n\022RobotState"
  "Response\022%\n\006header\030\001 \001(\0132\025.rocos.Respons"
  "eHeader\022&\n\013robot_state\030\002 \001(\0132\021.rocos.Rob"
  "otStateB\021B\017RobotStateProtob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_robot_5fstate_2eproto_deps[4] = {
  &::descriptor_table_geometry_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
  &::descriptor_table_header_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_robot_5fstate_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_robot_5fstate_2eproto = {
  false, false, 1354, descriptor_table_protodef_robot_5fstate_2eproto, "robot_state.proto", 
  &descriptor_table_robot_5fstate_2eproto_once, descriptor_table_robot_5fstate_2eproto_deps, 4, 9,
  schemas, file_default_instances, TableStruct_robot_5fstate_2eproto::offsets,
  file_level_metadata_robot_5fstate_2eproto, file_level_enum_descriptors_robot_5fstate_2eproto, file_level_service_descriptors_robot_5fstate_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_robot_5fstate_2eproto_getter() {
  return &descriptor_table_robot_5fstate_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_robot_5fstate_2eproto(&descriptor_table_robot_5fstate_2eproto);
namespace rocos {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* JointState_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_robot_5fstate_2eproto);
  return file_level_enum_descriptors_robot_5fstate_2eproto[0];
}
bool JointState_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr JointState_Status JointState::STATUS_UNSPECIFIED;
constexpr JointState_Status JointState::STATUS_DISABLED;
constexpr JointState_Status JointState::STATUS_ENABLED;
constexpr JointState_Status JointState::STATUS_FAULT;
constexpr JointState_Status JointState::Status_MIN;
constexpr JointState_Status JointState::Status_MAX;
constexpr int JointState::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HardwareState_HardwareType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_robot_5fstate_2eproto);
  return file_level_enum_descriptors_robot_5fstate_2eproto[1];
}
bool HardwareState_HardwareType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr HardwareState_HardwareType HardwareState::HW_TYPE_UNKNOWN;
constexpr HardwareState_HardwareType HardwareState::HW_TYPE_SIM;
constexpr HardwareState_HardwareType HardwareState::HW_TYPE_ETHERCAT;
constexpr HardwareState_HardwareType HardwareState::HW_TYPE_CAN;
constexpr HardwareState_HardwareType HardwareState::HW_TYPE_PROFINET;
constexpr HardwareState_HardwareType HardwareState::HardwareType_MIN;
constexpr HardwareState_HardwareType HardwareState::HardwareType_MAX;
constexpr int HardwareState::HardwareType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class JointState::_Internal {
 public:
};

JointState::JointState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rocos.JointState)
}
JointState::JointState(const JointState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&position_, &from.position_,
    static_cast<size_t>(reinterpret_cast<char*>(&raw_data_) -
    reinterpret_cast<char*>(&position_)) + sizeof(raw_data_));
  // @@protoc_insertion_point(copy_constructor:rocos.JointState)
}

inline void JointState::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&position_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&raw_data_) -
    reinterpret_cast<char*>(&position_)) + sizeof(raw_data_));
}

JointState::~JointState() {
  // @@protoc_insertion_point(destructor:rocos.JointState)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void JointState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void JointState::ArenaDtor(void* object) {
  JointState* _this = reinterpret_cast< JointState* >(object);
  (void)_this;
}
void JointState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JointState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void JointState::Clear() {
// @@protoc_insertion_point(message_clear_start:rocos.JointState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&raw_data_) -
      reinterpret_cast<char*>(&position_)) + sizeof(raw_data_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JointState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rocos.JointState.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          position_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double velocity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          velocity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double acceleration = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double load = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          load_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .rocos.JointState.Status status = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::rocos::JointState_Status>(val));
        } else goto handle_unusual;
        continue;
      // bool raw_data = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          raw_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JointState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocos.JointState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rocos.JointState.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // double position = 2;
  if (!(this->_internal_position() <= 0 && this->_internal_position() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_position(), target);
  }

  // double velocity = 3;
  if (!(this->_internal_velocity() <= 0 && this->_internal_velocity() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_velocity(), target);
  }

  // double acceleration = 4;
  if (!(this->_internal_acceleration() <= 0 && this->_internal_acceleration() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_acceleration(), target);
  }

  // double load = 5;
  if (!(this->_internal_load() <= 0 && this->_internal_load() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_load(), target);
  }

  // .rocos.JointState.Status status = 6;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_status(), target);
  }

  // bool raw_data = 7;
  if (this->_internal_raw_data() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_raw_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocos.JointState)
  return target;
}

size_t JointState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocos.JointState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // double position = 2;
  if (!(this->_internal_position() <= 0 && this->_internal_position() >= 0)) {
    total_size += 1 + 8;
  }

  // double velocity = 3;
  if (!(this->_internal_velocity() <= 0 && this->_internal_velocity() >= 0)) {
    total_size += 1 + 8;
  }

  // double acceleration = 4;
  if (!(this->_internal_acceleration() <= 0 && this->_internal_acceleration() >= 0)) {
    total_size += 1 + 8;
  }

  // double load = 5;
  if (!(this->_internal_load() <= 0 && this->_internal_load() >= 0)) {
    total_size += 1 + 8;
  }

  // .rocos.JointState.Status status = 6;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  // bool raw_data = 7;
  if (this->_internal_raw_data() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData JointState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    JointState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*JointState::GetClassData() const { return &_class_data_; }

void JointState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<JointState *>(to)->MergeFrom(
      static_cast<const JointState &>(from));
}


void JointState::MergeFrom(const JointState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rocos.JointState)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!(from._internal_position() <= 0 && from._internal_position() >= 0)) {
    _internal_set_position(from._internal_position());
  }
  if (!(from._internal_velocity() <= 0 && from._internal_velocity() >= 0)) {
    _internal_set_velocity(from._internal_velocity());
  }
  if (!(from._internal_acceleration() <= 0 && from._internal_acceleration() >= 0)) {
    _internal_set_acceleration(from._internal_acceleration());
  }
  if (!(from._internal_load() <= 0 && from._internal_load() >= 0)) {
    _internal_set_load(from._internal_load());
  }
  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from._internal_raw_data() != 0) {
    _internal_set_raw_data(from._internal_raw_data());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void JointState::CopyFrom(const JointState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocos.JointState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JointState::IsInitialized() const {
  return true;
}

void JointState::InternalSwap(JointState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(JointState, raw_data_)
      + sizeof(JointState::raw_data_)
      - PROTOBUF_FIELD_OFFSET(JointState, position_)>(
          reinterpret_cast<char*>(&position_),
          reinterpret_cast<char*>(&other->position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata JointState::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_robot_5fstate_2eproto_getter, &descriptor_table_robot_5fstate_2eproto_once,
      file_level_metadata_robot_5fstate_2eproto[0]);
}

// ===================================================================

class FlangeState::_Internal {
 public:
  static const ::rocos::SE3Pose& pose(const FlangeState* msg);
};

const ::rocos::SE3Pose&
FlangeState::_Internal::pose(const FlangeState* msg) {
  return *msg->pose_;
}
void FlangeState::clear_pose() {
  if (GetArenaForAllocation() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
}
FlangeState::FlangeState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rocos.FlangeState)
}
FlangeState::FlangeState(const FlangeState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pose()) {
    pose_ = new ::rocos::SE3Pose(*from.pose_);
  } else {
    pose_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:rocos.FlangeState)
}

inline void FlangeState::SharedCtor() {
pose_ = nullptr;
}

FlangeState::~FlangeState() {
  // @@protoc_insertion_point(destructor:rocos.FlangeState)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FlangeState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete pose_;
}

void FlangeState::ArenaDtor(void* object) {
  FlangeState* _this = reinterpret_cast< FlangeState* >(object);
  (void)_this;
}
void FlangeState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FlangeState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FlangeState::Clear() {
// @@protoc_insertion_point(message_clear_start:rocos.FlangeState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlangeState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .rocos.SE3Pose pose = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FlangeState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocos.FlangeState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rocos.SE3Pose pose = 1;
  if (this->_internal_has_pose()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pose(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocos.FlangeState)
  return target;
}

size_t FlangeState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocos.FlangeState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .rocos.SE3Pose pose = 1;
  if (this->_internal_has_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pose_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FlangeState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FlangeState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FlangeState::GetClassData() const { return &_class_data_; }

void FlangeState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<FlangeState *>(to)->MergeFrom(
      static_cast<const FlangeState &>(from));
}


void FlangeState::MergeFrom(const FlangeState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rocos.FlangeState)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pose()) {
    _internal_mutable_pose()->::rocos::SE3Pose::MergeFrom(from._internal_pose());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FlangeState::CopyFrom(const FlangeState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocos.FlangeState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlangeState::IsInitialized() const {
  return true;
}

void FlangeState::InternalSwap(FlangeState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(pose_, other->pose_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FlangeState::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_robot_5fstate_2eproto_getter, &descriptor_table_robot_5fstate_2eproto_once,
      file_level_metadata_robot_5fstate_2eproto[1]);
}

// ===================================================================

class ToolState::_Internal {
 public:
  static const ::rocos::SE3Pose& pose(const ToolState* msg);
};

const ::rocos::SE3Pose&
ToolState::_Internal::pose(const ToolState* msg) {
  return *msg->pose_;
}
void ToolState::clear_pose() {
  if (GetArenaForAllocation() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
}
ToolState::ToolState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rocos.ToolState)
}
ToolState::ToolState(const ToolState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pose()) {
    pose_ = new ::rocos::SE3Pose(*from.pose_);
  } else {
    pose_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:rocos.ToolState)
}

inline void ToolState::SharedCtor() {
pose_ = nullptr;
}

ToolState::~ToolState() {
  // @@protoc_insertion_point(destructor:rocos.ToolState)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ToolState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete pose_;
}

void ToolState::ArenaDtor(void* object) {
  ToolState* _this = reinterpret_cast< ToolState* >(object);
  (void)_this;
}
void ToolState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ToolState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ToolState::Clear() {
// @@protoc_insertion_point(message_clear_start:rocos.ToolState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ToolState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .rocos.SE3Pose pose = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ToolState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocos.ToolState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rocos.SE3Pose pose = 1;
  if (this->_internal_has_pose()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pose(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocos.ToolState)
  return target;
}

size_t ToolState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocos.ToolState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .rocos.SE3Pose pose = 1;
  if (this->_internal_has_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pose_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ToolState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ToolState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ToolState::GetClassData() const { return &_class_data_; }

void ToolState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ToolState *>(to)->MergeFrom(
      static_cast<const ToolState &>(from));
}


void ToolState::MergeFrom(const ToolState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rocos.ToolState)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pose()) {
    _internal_mutable_pose()->::rocos::SE3Pose::MergeFrom(from._internal_pose());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ToolState::CopyFrom(const ToolState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocos.ToolState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToolState::IsInitialized() const {
  return true;
}

void ToolState::InternalSwap(ToolState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(pose_, other->pose_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ToolState::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_robot_5fstate_2eproto_getter, &descriptor_table_robot_5fstate_2eproto_once,
      file_level_metadata_robot_5fstate_2eproto[2]);
}

// ===================================================================

class BaseState::_Internal {
 public:
  static const ::rocos::SE3Pose& pose(const BaseState* msg);
};

const ::rocos::SE3Pose&
BaseState::_Internal::pose(const BaseState* msg) {
  return *msg->pose_;
}
void BaseState::clear_pose() {
  if (GetArenaForAllocation() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
}
BaseState::BaseState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rocos.BaseState)
}
BaseState::BaseState(const BaseState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pose()) {
    pose_ = new ::rocos::SE3Pose(*from.pose_);
  } else {
    pose_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:rocos.BaseState)
}

inline void BaseState::SharedCtor() {
pose_ = nullptr;
}

BaseState::~BaseState() {
  // @@protoc_insertion_point(destructor:rocos.BaseState)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BaseState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete pose_;
}

void BaseState::ArenaDtor(void* object) {
  BaseState* _this = reinterpret_cast< BaseState* >(object);
  (void)_this;
}
void BaseState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BaseState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BaseState::Clear() {
// @@protoc_insertion_point(message_clear_start:rocos.BaseState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BaseState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .rocos.SE3Pose pose = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BaseState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocos.BaseState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rocos.SE3Pose pose = 1;
  if (this->_internal_has_pose()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pose(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocos.BaseState)
  return target;
}

size_t BaseState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocos.BaseState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .rocos.SE3Pose pose = 1;
  if (this->_internal_has_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pose_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BaseState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BaseState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BaseState::GetClassData() const { return &_class_data_; }

void BaseState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<BaseState *>(to)->MergeFrom(
      static_cast<const BaseState &>(from));
}


void BaseState::MergeFrom(const BaseState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rocos.BaseState)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pose()) {
    _internal_mutable_pose()->::rocos::SE3Pose::MergeFrom(from._internal_pose());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BaseState::CopyFrom(const BaseState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocos.BaseState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseState::IsInitialized() const {
  return true;
}

void BaseState::InternalSwap(BaseState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(pose_, other->pose_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BaseState::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_robot_5fstate_2eproto_getter, &descriptor_table_robot_5fstate_2eproto_once,
      file_level_metadata_robot_5fstate_2eproto[3]);
}

// ===================================================================

class ObjectState::_Internal {
 public:
  static const ::rocos::SE3Pose& pose(const ObjectState* msg);
};

const ::rocos::SE3Pose&
ObjectState::_Internal::pose(const ObjectState* msg) {
  return *msg->pose_;
}
void ObjectState::clear_pose() {
  if (GetArenaForAllocation() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
}
ObjectState::ObjectState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rocos.ObjectState)
}
ObjectState::ObjectState(const ObjectState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pose()) {
    pose_ = new ::rocos::SE3Pose(*from.pose_);
  } else {
    pose_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:rocos.ObjectState)
}

inline void ObjectState::SharedCtor() {
pose_ = nullptr;
}

ObjectState::~ObjectState() {
  // @@protoc_insertion_point(destructor:rocos.ObjectState)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ObjectState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete pose_;
}

void ObjectState::ArenaDtor(void* object) {
  ObjectState* _this = reinterpret_cast< ObjectState* >(object);
  (void)_this;
}
void ObjectState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObjectState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ObjectState::Clear() {
// @@protoc_insertion_point(message_clear_start:rocos.ObjectState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .rocos.SE3Pose pose = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocos.ObjectState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rocos.SE3Pose pose = 1;
  if (this->_internal_has_pose()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pose(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocos.ObjectState)
  return target;
}

size_t ObjectState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocos.ObjectState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .rocos.SE3Pose pose = 1;
  if (this->_internal_has_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pose_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObjectState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ObjectState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObjectState::GetClassData() const { return &_class_data_; }

void ObjectState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ObjectState *>(to)->MergeFrom(
      static_cast<const ObjectState &>(from));
}


void ObjectState::MergeFrom(const ObjectState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rocos.ObjectState)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pose()) {
    _internal_mutable_pose()->::rocos::SE3Pose::MergeFrom(from._internal_pose());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObjectState::CopyFrom(const ObjectState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocos.ObjectState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectState::IsInitialized() const {
  return true;
}

void ObjectState::InternalSwap(ObjectState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(pose_, other->pose_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectState::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_robot_5fstate_2eproto_getter, &descriptor_table_robot_5fstate_2eproto_once,
      file_level_metadata_robot_5fstate_2eproto[4]);
}

// ===================================================================

class RobotState::_Internal {
 public:
  static const ::rocos::HardwareState& hw_state(const RobotState* msg);
  static const ::rocos::FlangeState& flange_state(const RobotState* msg);
  static const ::rocos::ToolState& tool_state(const RobotState* msg);
  static const ::rocos::BaseState& base_state(const RobotState* msg);
  static const ::rocos::ObjectState& obj_state(const RobotState* msg);
};

const ::rocos::HardwareState&
RobotState::_Internal::hw_state(const RobotState* msg) {
  return *msg->hw_state_;
}
const ::rocos::FlangeState&
RobotState::_Internal::flange_state(const RobotState* msg) {
  return *msg->flange_state_;
}
const ::rocos::ToolState&
RobotState::_Internal::tool_state(const RobotState* msg) {
  return *msg->tool_state_;
}
const ::rocos::BaseState&
RobotState::_Internal::base_state(const RobotState* msg) {
  return *msg->base_state_;
}
const ::rocos::ObjectState&
RobotState::_Internal::obj_state(const RobotState* msg) {
  return *msg->obj_state_;
}
RobotState::RobotState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  joint_states_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rocos.RobotState)
}
RobotState::RobotState(const RobotState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      joint_states_(from.joint_states_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hw_state()) {
    hw_state_ = new ::rocos::HardwareState(*from.hw_state_);
  } else {
    hw_state_ = nullptr;
  }
  if (from._internal_has_flange_state()) {
    flange_state_ = new ::rocos::FlangeState(*from.flange_state_);
  } else {
    flange_state_ = nullptr;
  }
  if (from._internal_has_tool_state()) {
    tool_state_ = new ::rocos::ToolState(*from.tool_state_);
  } else {
    tool_state_ = nullptr;
  }
  if (from._internal_has_base_state()) {
    base_state_ = new ::rocos::BaseState(*from.base_state_);
  } else {
    base_state_ = nullptr;
  }
  if (from._internal_has_obj_state()) {
    obj_state_ = new ::rocos::ObjectState(*from.obj_state_);
  } else {
    obj_state_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:rocos.RobotState)
}

inline void RobotState::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&hw_state_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&obj_state_) -
    reinterpret_cast<char*>(&hw_state_)) + sizeof(obj_state_));
}

RobotState::~RobotState() {
  // @@protoc_insertion_point(destructor:rocos.RobotState)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RobotState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete hw_state_;
  if (this != internal_default_instance()) delete flange_state_;
  if (this != internal_default_instance()) delete tool_state_;
  if (this != internal_default_instance()) delete base_state_;
  if (this != internal_default_instance()) delete obj_state_;
}

void RobotState::ArenaDtor(void* object) {
  RobotState* _this = reinterpret_cast< RobotState* >(object);
  (void)_this;
}
void RobotState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RobotState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RobotState::Clear() {
// @@protoc_insertion_point(message_clear_start:rocos.RobotState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  joint_states_.Clear();
  if (GetArenaForAllocation() == nullptr && hw_state_ != nullptr) {
    delete hw_state_;
  }
  hw_state_ = nullptr;
  if (GetArenaForAllocation() == nullptr && flange_state_ != nullptr) {
    delete flange_state_;
  }
  flange_state_ = nullptr;
  if (GetArenaForAllocation() == nullptr && tool_state_ != nullptr) {
    delete tool_state_;
  }
  tool_state_ = nullptr;
  if (GetArenaForAllocation() == nullptr && base_state_ != nullptr) {
    delete base_state_;
  }
  base_state_ = nullptr;
  if (GetArenaForAllocation() == nullptr && obj_state_ != nullptr) {
    delete obj_state_;
  }
  obj_state_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RobotState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .rocos.JointState joint_states = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_joint_states(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .rocos.HardwareState hw_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_hw_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .rocos.FlangeState flange_state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_flange_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .rocos.ToolState tool_state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_tool_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .rocos.BaseState base_state = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_base_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .rocos.ObjectState obj_state = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_obj_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RobotState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocos.RobotState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .rocos.JointState joint_states = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_joint_states_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_joint_states(i), target, stream);
  }

  // .rocos.HardwareState hw_state = 2;
  if (this->_internal_has_hw_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::hw_state(this), target, stream);
  }

  // .rocos.FlangeState flange_state = 3;
  if (this->_internal_has_flange_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::flange_state(this), target, stream);
  }

  // .rocos.ToolState tool_state = 4;
  if (this->_internal_has_tool_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::tool_state(this), target, stream);
  }

  // .rocos.BaseState base_state = 5;
  if (this->_internal_has_base_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::base_state(this), target, stream);
  }

  // .rocos.ObjectState obj_state = 6;
  if (this->_internal_has_obj_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::obj_state(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocos.RobotState)
  return target;
}

size_t RobotState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocos.RobotState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .rocos.JointState joint_states = 1;
  total_size += 1UL * this->_internal_joint_states_size();
  for (const auto& msg : this->joint_states_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .rocos.HardwareState hw_state = 2;
  if (this->_internal_has_hw_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hw_state_);
  }

  // .rocos.FlangeState flange_state = 3;
  if (this->_internal_has_flange_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *flange_state_);
  }

  // .rocos.ToolState tool_state = 4;
  if (this->_internal_has_tool_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tool_state_);
  }

  // .rocos.BaseState base_state = 5;
  if (this->_internal_has_base_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_state_);
  }

  // .rocos.ObjectState obj_state = 6;
  if (this->_internal_has_obj_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *obj_state_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RobotState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RobotState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RobotState::GetClassData() const { return &_class_data_; }

void RobotState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<RobotState *>(to)->MergeFrom(
      static_cast<const RobotState &>(from));
}


void RobotState::MergeFrom(const RobotState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rocos.RobotState)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  joint_states_.MergeFrom(from.joint_states_);
  if (from._internal_has_hw_state()) {
    _internal_mutable_hw_state()->::rocos::HardwareState::MergeFrom(from._internal_hw_state());
  }
  if (from._internal_has_flange_state()) {
    _internal_mutable_flange_state()->::rocos::FlangeState::MergeFrom(from._internal_flange_state());
  }
  if (from._internal_has_tool_state()) {
    _internal_mutable_tool_state()->::rocos::ToolState::MergeFrom(from._internal_tool_state());
  }
  if (from._internal_has_base_state()) {
    _internal_mutable_base_state()->::rocos::BaseState::MergeFrom(from._internal_base_state());
  }
  if (from._internal_has_obj_state()) {
    _internal_mutable_obj_state()->::rocos::ObjectState::MergeFrom(from._internal_obj_state());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RobotState::CopyFrom(const RobotState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocos.RobotState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotState::IsInitialized() const {
  return true;
}

void RobotState::InternalSwap(RobotState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  joint_states_.InternalSwap(&other->joint_states_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RobotState, obj_state_)
      + sizeof(RobotState::obj_state_)
      - PROTOBUF_FIELD_OFFSET(RobotState, hw_state_)>(
          reinterpret_cast<char*>(&hw_state_),
          reinterpret_cast<char*>(&other->hw_state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RobotState::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_robot_5fstate_2eproto_getter, &descriptor_table_robot_5fstate_2eproto_once,
      file_level_metadata_robot_5fstate_2eproto[5]);
}

// ===================================================================

class HardwareState::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const HardwareState* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
HardwareState::_Internal::timestamp(const HardwareState* msg) {
  return *msg->timestamp_;
}
void HardwareState::clear_timestamp() {
  if (GetArenaForAllocation() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
HardwareState::HardwareState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rocos.HardwareState)
}
HardwareState::HardwareState(const HardwareState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_timestamp()) {
    timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  ::memcpy(&min_cycle_time_, &from.min_cycle_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&current_cycle_time_) -
    reinterpret_cast<char*>(&min_cycle_time_)) + sizeof(current_cycle_time_));
  // @@protoc_insertion_point(copy_constructor:rocos.HardwareState)
}

inline void HardwareState::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&current_cycle_time_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(current_cycle_time_));
}

HardwareState::~HardwareState() {
  // @@protoc_insertion_point(destructor:rocos.HardwareState)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HardwareState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete timestamp_;
}

void HardwareState::ArenaDtor(void* object) {
  HardwareState* _this = reinterpret_cast< HardwareState* >(object);
  (void)_this;
}
void HardwareState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HardwareState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HardwareState::Clear() {
// @@protoc_insertion_point(message_clear_start:rocos.HardwareState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  ::memset(&min_cycle_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&current_cycle_time_) -
      reinterpret_cast<char*>(&min_cycle_time_)) + sizeof(current_cycle_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HardwareState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .rocos.HardwareState.HardwareType hw_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_hw_type(static_cast<::rocos::HardwareState_HardwareType>(val));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double min_cycle_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          min_cycle_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double max_cycle_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          max_cycle_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double current_cycle_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          current_cycle_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 slave_num = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          slave_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HardwareState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocos.HardwareState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rocos.HardwareState.HardwareType hw_type = 1;
  if (this->_internal_hw_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_hw_type(), target);
  }

  // .google.protobuf.Timestamp timestamp = 2;
  if (this->_internal_has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::timestamp(this), target, stream);
  }

  // double min_cycle_time = 3;
  if (!(this->_internal_min_cycle_time() <= 0 && this->_internal_min_cycle_time() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_min_cycle_time(), target);
  }

  // double max_cycle_time = 4;
  if (!(this->_internal_max_cycle_time() <= 0 && this->_internal_max_cycle_time() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_max_cycle_time(), target);
  }

  // double current_cycle_time = 5;
  if (!(this->_internal_current_cycle_time() <= 0 && this->_internal_current_cycle_time() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_current_cycle_time(), target);
  }

  // int32 slave_num = 6;
  if (this->_internal_slave_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_slave_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocos.HardwareState)
  return target;
}

size_t HardwareState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocos.HardwareState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp timestamp = 2;
  if (this->_internal_has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // double min_cycle_time = 3;
  if (!(this->_internal_min_cycle_time() <= 0 && this->_internal_min_cycle_time() >= 0)) {
    total_size += 1 + 8;
  }

  // .rocos.HardwareState.HardwareType hw_type = 1;
  if (this->_internal_hw_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_hw_type());
  }

  // int32 slave_num = 6;
  if (this->_internal_slave_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_slave_num());
  }

  // double max_cycle_time = 4;
  if (!(this->_internal_max_cycle_time() <= 0 && this->_internal_max_cycle_time() >= 0)) {
    total_size += 1 + 8;
  }

  // double current_cycle_time = 5;
  if (!(this->_internal_current_cycle_time() <= 0 && this->_internal_current_cycle_time() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HardwareState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HardwareState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HardwareState::GetClassData() const { return &_class_data_; }

void HardwareState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<HardwareState *>(to)->MergeFrom(
      static_cast<const HardwareState &>(from));
}


void HardwareState::MergeFrom(const HardwareState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rocos.HardwareState)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_timestamp()) {
    _internal_mutable_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
  if (!(from._internal_min_cycle_time() <= 0 && from._internal_min_cycle_time() >= 0)) {
    _internal_set_min_cycle_time(from._internal_min_cycle_time());
  }
  if (from._internal_hw_type() != 0) {
    _internal_set_hw_type(from._internal_hw_type());
  }
  if (from._internal_slave_num() != 0) {
    _internal_set_slave_num(from._internal_slave_num());
  }
  if (!(from._internal_max_cycle_time() <= 0 && from._internal_max_cycle_time() >= 0)) {
    _internal_set_max_cycle_time(from._internal_max_cycle_time());
  }
  if (!(from._internal_current_cycle_time() <= 0 && from._internal_current_cycle_time() >= 0)) {
    _internal_set_current_cycle_time(from._internal_current_cycle_time());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HardwareState::CopyFrom(const HardwareState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocos.HardwareState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HardwareState::IsInitialized() const {
  return true;
}

void HardwareState::InternalSwap(HardwareState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HardwareState, current_cycle_time_)
      + sizeof(HardwareState::current_cycle_time_)
      - PROTOBUF_FIELD_OFFSET(HardwareState, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HardwareState::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_robot_5fstate_2eproto_getter, &descriptor_table_robot_5fstate_2eproto_once,
      file_level_metadata_robot_5fstate_2eproto[6]);
}

// ===================================================================

class RobotStateRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<RobotStateRequest>()._has_bits_);
  static const ::rocos::RequestHeader& header(const RobotStateRequest* msg);
  static void set_has_raw_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::rocos::RequestHeader&
RobotStateRequest::_Internal::header(const RobotStateRequest* msg) {
  return *msg->header_;
}
void RobotStateRequest::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
RobotStateRequest::RobotStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rocos.RobotStateRequest)
}
RobotStateRequest::RobotStateRequest(const RobotStateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::rocos::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  raw_data_ = from.raw_data_;
  // @@protoc_insertion_point(copy_constructor:rocos.RobotStateRequest)
}

inline void RobotStateRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&raw_data_) -
    reinterpret_cast<char*>(&header_)) + sizeof(raw_data_));
}

RobotStateRequest::~RobotStateRequest() {
  // @@protoc_insertion_point(destructor:rocos.RobotStateRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RobotStateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void RobotStateRequest::ArenaDtor(void* object) {
  RobotStateRequest* _this = reinterpret_cast< RobotStateRequest* >(object);
  (void)_this;
}
void RobotStateRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RobotStateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RobotStateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:rocos.RobotStateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  raw_data_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RobotStateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .rocos.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool raw_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_raw_data(&has_bits);
          raw_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RobotStateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocos.RobotStateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rocos.RequestHeader header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // optional bool raw_data = 2;
  if (_internal_has_raw_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_raw_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocos.RobotStateRequest)
  return target;
}

size_t RobotStateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocos.RobotStateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .rocos.RequestHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // optional bool raw_data = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RobotStateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RobotStateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RobotStateRequest::GetClassData() const { return &_class_data_; }

void RobotStateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<RobotStateRequest *>(to)->MergeFrom(
      static_cast<const RobotStateRequest &>(from));
}


void RobotStateRequest::MergeFrom(const RobotStateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rocos.RobotStateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _internal_mutable_header()->::rocos::RequestHeader::MergeFrom(from._internal_header());
  }
  if (from._internal_has_raw_data()) {
    _internal_set_raw_data(from._internal_raw_data());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RobotStateRequest::CopyFrom(const RobotStateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocos.RobotStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotStateRequest::IsInitialized() const {
  return true;
}

void RobotStateRequest::InternalSwap(RobotStateRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RobotStateRequest, raw_data_)
      + sizeof(RobotStateRequest::raw_data_)
      - PROTOBUF_FIELD_OFFSET(RobotStateRequest, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RobotStateRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_robot_5fstate_2eproto_getter, &descriptor_table_robot_5fstate_2eproto_once,
      file_level_metadata_robot_5fstate_2eproto[7]);
}

// ===================================================================

class RobotStateResponse::_Internal {
 public:
  static const ::rocos::ResponseHeader& header(const RobotStateResponse* msg);
  static const ::rocos::RobotState& robot_state(const RobotStateResponse* msg);
};

const ::rocos::ResponseHeader&
RobotStateResponse::_Internal::header(const RobotStateResponse* msg) {
  return *msg->header_;
}
const ::rocos::RobotState&
RobotStateResponse::_Internal::robot_state(const RobotStateResponse* msg) {
  return *msg->robot_state_;
}
void RobotStateResponse::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
RobotStateResponse::RobotStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rocos.RobotStateResponse)
}
RobotStateResponse::RobotStateResponse(const RobotStateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::rocos::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_robot_state()) {
    robot_state_ = new ::rocos::RobotState(*from.robot_state_);
  } else {
    robot_state_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:rocos.RobotStateResponse)
}

inline void RobotStateResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&robot_state_) -
    reinterpret_cast<char*>(&header_)) + sizeof(robot_state_));
}

RobotStateResponse::~RobotStateResponse() {
  // @@protoc_insertion_point(destructor:rocos.RobotStateResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RobotStateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete robot_state_;
}

void RobotStateResponse::ArenaDtor(void* object) {
  RobotStateResponse* _this = reinterpret_cast< RobotStateResponse* >(object);
  (void)_this;
}
void RobotStateResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RobotStateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RobotStateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:rocos.RobotStateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArenaForAllocation() == nullptr && robot_state_ != nullptr) {
    delete robot_state_;
  }
  robot_state_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RobotStateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .rocos.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .rocos.RobotState robot_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_robot_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RobotStateResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocos.RobotStateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rocos.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .rocos.RobotState robot_state = 2;
  if (this->_internal_has_robot_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::robot_state(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocos.RobotStateResponse)
  return target;
}

size_t RobotStateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocos.RobotStateResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .rocos.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .rocos.RobotState robot_state = 2;
  if (this->_internal_has_robot_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *robot_state_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RobotStateResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RobotStateResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RobotStateResponse::GetClassData() const { return &_class_data_; }

void RobotStateResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<RobotStateResponse *>(to)->MergeFrom(
      static_cast<const RobotStateResponse &>(from));
}


void RobotStateResponse::MergeFrom(const RobotStateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rocos.RobotStateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _internal_mutable_header()->::rocos::ResponseHeader::MergeFrom(from._internal_header());
  }
  if (from._internal_has_robot_state()) {
    _internal_mutable_robot_state()->::rocos::RobotState::MergeFrom(from._internal_robot_state());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RobotStateResponse::CopyFrom(const RobotStateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocos.RobotStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotStateResponse::IsInitialized() const {
  return true;
}

void RobotStateResponse::InternalSwap(RobotStateResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RobotStateResponse, robot_state_)
      + sizeof(RobotStateResponse::robot_state_)
      - PROTOBUF_FIELD_OFFSET(RobotStateResponse, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RobotStateResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_robot_5fstate_2eproto_getter, &descriptor_table_robot_5fstate_2eproto_once,
      file_level_metadata_robot_5fstate_2eproto[8]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace rocos
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::rocos::JointState* Arena::CreateMaybeMessage< ::rocos::JointState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rocos::JointState >(arena);
}
template<> PROTOBUF_NOINLINE ::rocos::FlangeState* Arena::CreateMaybeMessage< ::rocos::FlangeState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rocos::FlangeState >(arena);
}
template<> PROTOBUF_NOINLINE ::rocos::ToolState* Arena::CreateMaybeMessage< ::rocos::ToolState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rocos::ToolState >(arena);
}
template<> PROTOBUF_NOINLINE ::rocos::BaseState* Arena::CreateMaybeMessage< ::rocos::BaseState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rocos::BaseState >(arena);
}
template<> PROTOBUF_NOINLINE ::rocos::ObjectState* Arena::CreateMaybeMessage< ::rocos::ObjectState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rocos::ObjectState >(arena);
}
template<> PROTOBUF_NOINLINE ::rocos::RobotState* Arena::CreateMaybeMessage< ::rocos::RobotState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rocos::RobotState >(arena);
}
template<> PROTOBUF_NOINLINE ::rocos::HardwareState* Arena::CreateMaybeMessage< ::rocos::HardwareState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rocos::HardwareState >(arena);
}
template<> PROTOBUF_NOINLINE ::rocos::RobotStateRequest* Arena::CreateMaybeMessage< ::rocos::RobotStateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rocos::RobotStateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::rocos::RobotStateResponse* Arena::CreateMaybeMessage< ::rocos::RobotStateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rocos::RobotStateResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
