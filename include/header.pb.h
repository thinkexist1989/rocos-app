// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: header.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_header_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_header_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_header_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_header_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_header_2eproto;
namespace rocos {
class CommonError;
struct CommonErrorDefaultTypeInternal;
extern CommonErrorDefaultTypeInternal _CommonError_default_instance_;
class RequestHeader;
struct RequestHeaderDefaultTypeInternal;
extern RequestHeaderDefaultTypeInternal _RequestHeader_default_instance_;
class ResponseHeader;
struct ResponseHeaderDefaultTypeInternal;
extern ResponseHeaderDefaultTypeInternal _ResponseHeader_default_instance_;
}  // namespace rocos
PROTOBUF_NAMESPACE_OPEN
template<> ::rocos::CommonError* Arena::CreateMaybeMessage<::rocos::CommonError>(Arena*);
template<> ::rocos::RequestHeader* Arena::CreateMaybeMessage<::rocos::RequestHeader>(Arena*);
template<> ::rocos::ResponseHeader* Arena::CreateMaybeMessage<::rocos::ResponseHeader>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace rocos {

enum CommonError_Code : int {
  CommonError_Code_CODE_UNSPECIFIED = 0,
  CommonError_Code_CODE_OK = 1,
  CommonError_Code_CODE_INTERNAL_SERVER_ERROR = 2,
  CommonError_Code_CODE_INVALID_REQUEST = 3,
  CommonError_Code_CommonError_Code_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CommonError_Code_CommonError_Code_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CommonError_Code_IsValid(int value);
constexpr CommonError_Code CommonError_Code_Code_MIN = CommonError_Code_CODE_UNSPECIFIED;
constexpr CommonError_Code CommonError_Code_Code_MAX = CommonError_Code_CODE_INVALID_REQUEST;
constexpr int CommonError_Code_Code_ARRAYSIZE = CommonError_Code_Code_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CommonError_Code_descriptor();
template<typename T>
inline const std::string& CommonError_Code_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CommonError_Code>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CommonError_Code_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CommonError_Code_descriptor(), enum_t_value);
}
inline bool CommonError_Code_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CommonError_Code* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CommonError_Code>(
    CommonError_Code_descriptor(), name, value);
}
// ===================================================================

class RequestHeader final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rocos.RequestHeader) */ {
 public:
  inline RequestHeader() : RequestHeader(nullptr) {}
  ~RequestHeader() override;
  explicit constexpr RequestHeader(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestHeader(const RequestHeader& from);
  RequestHeader(RequestHeader&& from) noexcept
    : RequestHeader() {
    *this = ::std::move(from);
  }

  inline RequestHeader& operator=(const RequestHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestHeader& operator=(RequestHeader&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestHeader& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestHeader* internal_default_instance() {
    return reinterpret_cast<const RequestHeader*>(
               &_RequestHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RequestHeader& a, RequestHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestHeader* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestHeader* New() const final {
    return new RequestHeader();
  }

  RequestHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestHeader>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestHeader& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RequestHeader& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rocos.RequestHeader";
  }
  protected:
  explicit RequestHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientNameFieldNumber = 2,
    kRequestTimestampFieldNumber = 1,
    kDisableRpcLoggingFieldNumber = 3,
  };
  // string client_name = 2;
  void clear_client_name();
  const std::string& client_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_client_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_client_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_client_name();
  void set_allocated_client_name(std::string* client_name);
  private:
  const std::string& _internal_client_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_name(const std::string& value);
  std::string* _internal_mutable_client_name();
  public:

  // .google.protobuf.Timestamp request_timestamp = 1;
  bool has_request_timestamp() const;
  private:
  bool _internal_has_request_timestamp() const;
  public:
  void clear_request_timestamp();
  const PROTOBUF_NAMESPACE_ID::Timestamp& request_timestamp() const;
  PROTOBUF_MUST_USE_RESULT PROTOBUF_NAMESPACE_ID::Timestamp* release_request_timestamp();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_request_timestamp();
  void set_allocated_request_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* request_timestamp);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_request_timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_request_timestamp();
  public:
  void unsafe_arena_set_allocated_request_timestamp(
      PROTOBUF_NAMESPACE_ID::Timestamp* request_timestamp);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_request_timestamp();

  // bool disable_rpc_logging = 3;
  void clear_disable_rpc_logging();
  bool disable_rpc_logging() const;
  void set_disable_rpc_logging(bool value);
  private:
  bool _internal_disable_rpc_logging() const;
  void _internal_set_disable_rpc_logging(bool value);
  public:

  // @@protoc_insertion_point(class_scope:rocos.RequestHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_name_;
  PROTOBUF_NAMESPACE_ID::Timestamp* request_timestamp_;
  bool disable_rpc_logging_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_header_2eproto;
};
// -------------------------------------------------------------------

class CommonError final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rocos.CommonError) */ {
 public:
  inline CommonError() : CommonError(nullptr) {}
  ~CommonError() override;
  explicit constexpr CommonError(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommonError(const CommonError& from);
  CommonError(CommonError&& from) noexcept
    : CommonError() {
    *this = ::std::move(from);
  }

  inline CommonError& operator=(const CommonError& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommonError& operator=(CommonError&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommonError& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommonError* internal_default_instance() {
    return reinterpret_cast<const CommonError*>(
               &_CommonError_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CommonError& a, CommonError& b) {
    a.Swap(&b);
  }
  inline void Swap(CommonError* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommonError* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommonError* New() const final {
    return new CommonError();
  }

  CommonError* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommonError>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommonError& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommonError& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommonError* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rocos.CommonError";
  }
  protected:
  explicit CommonError(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CommonError_Code Code;
  static constexpr Code CODE_UNSPECIFIED =
    CommonError_Code_CODE_UNSPECIFIED;
  static constexpr Code CODE_OK =
    CommonError_Code_CODE_OK;
  static constexpr Code CODE_INTERNAL_SERVER_ERROR =
    CommonError_Code_CODE_INTERNAL_SERVER_ERROR;
  static constexpr Code CODE_INVALID_REQUEST =
    CommonError_Code_CODE_INVALID_REQUEST;
  static inline bool Code_IsValid(int value) {
    return CommonError_Code_IsValid(value);
  }
  static constexpr Code Code_MIN =
    CommonError_Code_Code_MIN;
  static constexpr Code Code_MAX =
    CommonError_Code_Code_MAX;
  static constexpr int Code_ARRAYSIZE =
    CommonError_Code_Code_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Code_descriptor() {
    return CommonError_Code_descriptor();
  }
  template<typename T>
  static inline const std::string& Code_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Code>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Code_Name.");
    return CommonError_Code_Name(enum_t_value);
  }
  static inline bool Code_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Code* value) {
    return CommonError_Code_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kDataFieldNumber = 3,
    kCodeFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_MUST_USE_RESULT std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .google.protobuf.Any data = 3;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const PROTOBUF_NAMESPACE_ID::Any& data() const;
  PROTOBUF_MUST_USE_RESULT PROTOBUF_NAMESPACE_ID::Any* release_data();
  PROTOBUF_NAMESPACE_ID::Any* mutable_data();
  void set_allocated_data(PROTOBUF_NAMESPACE_ID::Any* data);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_data() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      PROTOBUF_NAMESPACE_ID::Any* data);
  PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_data();

  // .rocos.CommonError.Code code = 1;
  void clear_code();
  ::rocos::CommonError_Code code() const;
  void set_code(::rocos::CommonError_Code value);
  private:
  ::rocos::CommonError_Code _internal_code() const;
  void _internal_set_code(::rocos::CommonError_Code value);
  public:

  // @@protoc_insertion_point(class_scope:rocos.CommonError)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  PROTOBUF_NAMESPACE_ID::Any* data_;
  int code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_header_2eproto;
};
// -------------------------------------------------------------------

class ResponseHeader final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rocos.ResponseHeader) */ {
 public:
  inline ResponseHeader() : ResponseHeader(nullptr) {}
  ~ResponseHeader() override;
  explicit constexpr ResponseHeader(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResponseHeader(const ResponseHeader& from);
  ResponseHeader(ResponseHeader&& from) noexcept
    : ResponseHeader() {
    *this = ::std::move(from);
  }

  inline ResponseHeader& operator=(const ResponseHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseHeader& operator=(ResponseHeader&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseHeader& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponseHeader* internal_default_instance() {
    return reinterpret_cast<const ResponseHeader*>(
               &_ResponseHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ResponseHeader& a, ResponseHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseHeader* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResponseHeader* New() const final {
    return new ResponseHeader();
  }

  ResponseHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResponseHeader>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResponseHeader& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ResponseHeader& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rocos.ResponseHeader";
  }
  protected:
  explicit ResponseHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestHeaderFieldNumber = 1,
    kRequestReceivedTimestampFieldNumber = 2,
    kResponseTimestampFieldNumber = 3,
    kErrorFieldNumber = 4,
    kRequestFieldNumber = 5,
  };
  // .rocos.RequestHeader request_header = 1;
  bool has_request_header() const;
  private:
  bool _internal_has_request_header() const;
  public:
  void clear_request_header();
  const ::rocos::RequestHeader& request_header() const;
  PROTOBUF_MUST_USE_RESULT ::rocos::RequestHeader* release_request_header();
  ::rocos::RequestHeader* mutable_request_header();
  void set_allocated_request_header(::rocos::RequestHeader* request_header);
  private:
  const ::rocos::RequestHeader& _internal_request_header() const;
  ::rocos::RequestHeader* _internal_mutable_request_header();
  public:
  void unsafe_arena_set_allocated_request_header(
      ::rocos::RequestHeader* request_header);
  ::rocos::RequestHeader* unsafe_arena_release_request_header();

  // .google.protobuf.Timestamp request_received_timestamp = 2;
  bool has_request_received_timestamp() const;
  private:
  bool _internal_has_request_received_timestamp() const;
  public:
  void clear_request_received_timestamp();
  const PROTOBUF_NAMESPACE_ID::Timestamp& request_received_timestamp() const;
  PROTOBUF_MUST_USE_RESULT PROTOBUF_NAMESPACE_ID::Timestamp* release_request_received_timestamp();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_request_received_timestamp();
  void set_allocated_request_received_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* request_received_timestamp);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_request_received_timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_request_received_timestamp();
  public:
  void unsafe_arena_set_allocated_request_received_timestamp(
      PROTOBUF_NAMESPACE_ID::Timestamp* request_received_timestamp);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_request_received_timestamp();

  // .google.protobuf.Timestamp response_timestamp = 3;
  bool has_response_timestamp() const;
  private:
  bool _internal_has_response_timestamp() const;
  public:
  void clear_response_timestamp();
  const PROTOBUF_NAMESPACE_ID::Timestamp& response_timestamp() const;
  PROTOBUF_MUST_USE_RESULT PROTOBUF_NAMESPACE_ID::Timestamp* release_response_timestamp();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_response_timestamp();
  void set_allocated_response_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* response_timestamp);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_response_timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_response_timestamp();
  public:
  void unsafe_arena_set_allocated_response_timestamp(
      PROTOBUF_NAMESPACE_ID::Timestamp* response_timestamp);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_response_timestamp();

  // .rocos.CommonError error = 4;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::rocos::CommonError& error() const;
  PROTOBUF_MUST_USE_RESULT ::rocos::CommonError* release_error();
  ::rocos::CommonError* mutable_error();
  void set_allocated_error(::rocos::CommonError* error);
  private:
  const ::rocos::CommonError& _internal_error() const;
  ::rocos::CommonError* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::rocos::CommonError* error);
  ::rocos::CommonError* unsafe_arena_release_error();

  // .google.protobuf.Any request = 5;
  bool has_request() const;
  private:
  bool _internal_has_request() const;
  public:
  void clear_request();
  const PROTOBUF_NAMESPACE_ID::Any& request() const;
  PROTOBUF_MUST_USE_RESULT PROTOBUF_NAMESPACE_ID::Any* release_request();
  PROTOBUF_NAMESPACE_ID::Any* mutable_request();
  void set_allocated_request(PROTOBUF_NAMESPACE_ID::Any* request);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_request() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_request();
  public:
  void unsafe_arena_set_allocated_request(
      PROTOBUF_NAMESPACE_ID::Any* request);
  PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_request();

  // @@protoc_insertion_point(class_scope:rocos.ResponseHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::rocos::RequestHeader* request_header_;
  PROTOBUF_NAMESPACE_ID::Timestamp* request_received_timestamp_;
  PROTOBUF_NAMESPACE_ID::Timestamp* response_timestamp_;
  ::rocos::CommonError* error_;
  PROTOBUF_NAMESPACE_ID::Any* request_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_header_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RequestHeader

// .google.protobuf.Timestamp request_timestamp = 1;
inline bool RequestHeader::_internal_has_request_timestamp() const {
  return this != internal_default_instance() && request_timestamp_ != nullptr;
}
inline bool RequestHeader::has_request_timestamp() const {
  return _internal_has_request_timestamp();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& RequestHeader::_internal_request_timestamp() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = request_timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& RequestHeader::request_timestamp() const {
  // @@protoc_insertion_point(field_get:rocos.RequestHeader.request_timestamp)
  return _internal_request_timestamp();
}
inline void RequestHeader::unsafe_arena_set_allocated_request_timestamp(
    PROTOBUF_NAMESPACE_ID::Timestamp* request_timestamp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(request_timestamp_);
  }
  request_timestamp_ = request_timestamp;
  if (request_timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rocos.RequestHeader.request_timestamp)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* RequestHeader::release_request_timestamp() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = request_timestamp_;
  request_timestamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* RequestHeader::unsafe_arena_release_request_timestamp() {
  // @@protoc_insertion_point(field_release:rocos.RequestHeader.request_timestamp)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = request_timestamp_;
  request_timestamp_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* RequestHeader::_internal_mutable_request_timestamp() {
  
  if (request_timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    request_timestamp_ = p;
  }
  return request_timestamp_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* RequestHeader::mutable_request_timestamp() {
  PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_request_timestamp();
  // @@protoc_insertion_point(field_mutable:rocos.RequestHeader.request_timestamp)
  return _msg;
}
inline void RequestHeader::set_allocated_request_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* request_timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(request_timestamp_);
  }
  if (request_timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(request_timestamp));
    if (message_arena != submessage_arena) {
      request_timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request_timestamp, submessage_arena);
    }
    
  } else {
    
  }
  request_timestamp_ = request_timestamp;
  // @@protoc_insertion_point(field_set_allocated:rocos.RequestHeader.request_timestamp)
}

// string client_name = 2;
inline void RequestHeader::clear_client_name() {
  client_name_.ClearToEmpty();
}
inline const std::string& RequestHeader::client_name() const {
  // @@protoc_insertion_point(field_get:rocos.RequestHeader.client_name)
  return _internal_client_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RequestHeader::set_client_name(ArgT0&& arg0, ArgT... args) {
 
 client_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rocos.RequestHeader.client_name)
}
inline std::string* RequestHeader::mutable_client_name() {
  std::string* _s = _internal_mutable_client_name();
  // @@protoc_insertion_point(field_mutable:rocos.RequestHeader.client_name)
  return _s;
}
inline const std::string& RequestHeader::_internal_client_name() const {
  return client_name_.Get();
}
inline void RequestHeader::_internal_set_client_name(const std::string& value) {
  
  client_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RequestHeader::_internal_mutable_client_name() {
  
  return client_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RequestHeader::release_client_name() {
  // @@protoc_insertion_point(field_release:rocos.RequestHeader.client_name)
  return client_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RequestHeader::set_allocated_client_name(std::string* client_name) {
  if (client_name != nullptr) {
    
  } else {
    
  }
  client_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:rocos.RequestHeader.client_name)
}

// bool disable_rpc_logging = 3;
inline void RequestHeader::clear_disable_rpc_logging() {
  disable_rpc_logging_ = false;
}
inline bool RequestHeader::_internal_disable_rpc_logging() const {
  return disable_rpc_logging_;
}
inline bool RequestHeader::disable_rpc_logging() const {
  // @@protoc_insertion_point(field_get:rocos.RequestHeader.disable_rpc_logging)
  return _internal_disable_rpc_logging();
}
inline void RequestHeader::_internal_set_disable_rpc_logging(bool value) {
  
  disable_rpc_logging_ = value;
}
inline void RequestHeader::set_disable_rpc_logging(bool value) {
  _internal_set_disable_rpc_logging(value);
  // @@protoc_insertion_point(field_set:rocos.RequestHeader.disable_rpc_logging)
}

// -------------------------------------------------------------------

// CommonError

// .rocos.CommonError.Code code = 1;
inline void CommonError::clear_code() {
  code_ = 0;
}
inline ::rocos::CommonError_Code CommonError::_internal_code() const {
  return static_cast< ::rocos::CommonError_Code >(code_);
}
inline ::rocos::CommonError_Code CommonError::code() const {
  // @@protoc_insertion_point(field_get:rocos.CommonError.code)
  return _internal_code();
}
inline void CommonError::_internal_set_code(::rocos::CommonError_Code value) {
  
  code_ = value;
}
inline void CommonError::set_code(::rocos::CommonError_Code value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:rocos.CommonError.code)
}

// string message = 2;
inline void CommonError::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& CommonError::message() const {
  // @@protoc_insertion_point(field_get:rocos.CommonError.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommonError::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rocos.CommonError.message)
}
inline std::string* CommonError::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:rocos.CommonError.message)
  return _s;
}
inline const std::string& CommonError::_internal_message() const {
  return message_.Get();
}
inline void CommonError::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CommonError::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CommonError::release_message() {
  // @@protoc_insertion_point(field_release:rocos.CommonError.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CommonError::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:rocos.CommonError.message)
}

// .google.protobuf.Any data = 3;
inline bool CommonError::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool CommonError::has_data() const {
  return _internal_has_data();
}
inline const PROTOBUF_NAMESPACE_ID::Any& CommonError::_internal_data() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any&>(
      PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& CommonError::data() const {
  // @@protoc_insertion_point(field_get:rocos.CommonError.data)
  return _internal_data();
}
inline void CommonError::unsafe_arena_set_allocated_data(
    PROTOBUF_NAMESPACE_ID::Any* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rocos.CommonError.data)
}
inline PROTOBUF_NAMESPACE_ID::Any* CommonError::release_data() {
  
  PROTOBUF_NAMESPACE_ID::Any* temp = data_;
  data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* CommonError::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:rocos.CommonError.data)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = data_;
  data_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* CommonError::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    data_ = p;
  }
  return data_;
}
inline PROTOBUF_NAMESPACE_ID::Any* CommonError::mutable_data() {
  PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:rocos.CommonError.data)
  return _msg;
}
inline void CommonError::set_allocated_data(PROTOBUF_NAMESPACE_ID::Any* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data));
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:rocos.CommonError.data)
}

// -------------------------------------------------------------------

// ResponseHeader

// .rocos.RequestHeader request_header = 1;
inline bool ResponseHeader::_internal_has_request_header() const {
  return this != internal_default_instance() && request_header_ != nullptr;
}
inline bool ResponseHeader::has_request_header() const {
  return _internal_has_request_header();
}
inline void ResponseHeader::clear_request_header() {
  if (GetArenaForAllocation() == nullptr && request_header_ != nullptr) {
    delete request_header_;
  }
  request_header_ = nullptr;
}
inline const ::rocos::RequestHeader& ResponseHeader::_internal_request_header() const {
  const ::rocos::RequestHeader* p = request_header_;
  return p != nullptr ? *p : reinterpret_cast<const ::rocos::RequestHeader&>(
      ::rocos::_RequestHeader_default_instance_);
}
inline const ::rocos::RequestHeader& ResponseHeader::request_header() const {
  // @@protoc_insertion_point(field_get:rocos.ResponseHeader.request_header)
  return _internal_request_header();
}
inline void ResponseHeader::unsafe_arena_set_allocated_request_header(
    ::rocos::RequestHeader* request_header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(request_header_);
  }
  request_header_ = request_header;
  if (request_header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rocos.ResponseHeader.request_header)
}
inline ::rocos::RequestHeader* ResponseHeader::release_request_header() {
  
  ::rocos::RequestHeader* temp = request_header_;
  request_header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rocos::RequestHeader* ResponseHeader::unsafe_arena_release_request_header() {
  // @@protoc_insertion_point(field_release:rocos.ResponseHeader.request_header)
  
  ::rocos::RequestHeader* temp = request_header_;
  request_header_ = nullptr;
  return temp;
}
inline ::rocos::RequestHeader* ResponseHeader::_internal_mutable_request_header() {
  
  if (request_header_ == nullptr) {
    auto* p = CreateMaybeMessage<::rocos::RequestHeader>(GetArenaForAllocation());
    request_header_ = p;
  }
  return request_header_;
}
inline ::rocos::RequestHeader* ResponseHeader::mutable_request_header() {
  ::rocos::RequestHeader* _msg = _internal_mutable_request_header();
  // @@protoc_insertion_point(field_mutable:rocos.ResponseHeader.request_header)
  return _msg;
}
inline void ResponseHeader::set_allocated_request_header(::rocos::RequestHeader* request_header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete request_header_;
  }
  if (request_header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::rocos::RequestHeader>::GetOwningArena(request_header);
    if (message_arena != submessage_arena) {
      request_header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request_header, submessage_arena);
    }
    
  } else {
    
  }
  request_header_ = request_header;
  // @@protoc_insertion_point(field_set_allocated:rocos.ResponseHeader.request_header)
}

// .google.protobuf.Timestamp request_received_timestamp = 2;
inline bool ResponseHeader::_internal_has_request_received_timestamp() const {
  return this != internal_default_instance() && request_received_timestamp_ != nullptr;
}
inline bool ResponseHeader::has_request_received_timestamp() const {
  return _internal_has_request_received_timestamp();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ResponseHeader::_internal_request_received_timestamp() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = request_received_timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ResponseHeader::request_received_timestamp() const {
  // @@protoc_insertion_point(field_get:rocos.ResponseHeader.request_received_timestamp)
  return _internal_request_received_timestamp();
}
inline void ResponseHeader::unsafe_arena_set_allocated_request_received_timestamp(
    PROTOBUF_NAMESPACE_ID::Timestamp* request_received_timestamp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(request_received_timestamp_);
  }
  request_received_timestamp_ = request_received_timestamp;
  if (request_received_timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rocos.ResponseHeader.request_received_timestamp)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ResponseHeader::release_request_received_timestamp() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = request_received_timestamp_;
  request_received_timestamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ResponseHeader::unsafe_arena_release_request_received_timestamp() {
  // @@protoc_insertion_point(field_release:rocos.ResponseHeader.request_received_timestamp)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = request_received_timestamp_;
  request_received_timestamp_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ResponseHeader::_internal_mutable_request_received_timestamp() {
  
  if (request_received_timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    request_received_timestamp_ = p;
  }
  return request_received_timestamp_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ResponseHeader::mutable_request_received_timestamp() {
  PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_request_received_timestamp();
  // @@protoc_insertion_point(field_mutable:rocos.ResponseHeader.request_received_timestamp)
  return _msg;
}
inline void ResponseHeader::set_allocated_request_received_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* request_received_timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(request_received_timestamp_);
  }
  if (request_received_timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(request_received_timestamp));
    if (message_arena != submessage_arena) {
      request_received_timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request_received_timestamp, submessage_arena);
    }
    
  } else {
    
  }
  request_received_timestamp_ = request_received_timestamp;
  // @@protoc_insertion_point(field_set_allocated:rocos.ResponseHeader.request_received_timestamp)
}

// .google.protobuf.Timestamp response_timestamp = 3;
inline bool ResponseHeader::_internal_has_response_timestamp() const {
  return this != internal_default_instance() && response_timestamp_ != nullptr;
}
inline bool ResponseHeader::has_response_timestamp() const {
  return _internal_has_response_timestamp();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ResponseHeader::_internal_response_timestamp() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = response_timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ResponseHeader::response_timestamp() const {
  // @@protoc_insertion_point(field_get:rocos.ResponseHeader.response_timestamp)
  return _internal_response_timestamp();
}
inline void ResponseHeader::unsafe_arena_set_allocated_response_timestamp(
    PROTOBUF_NAMESPACE_ID::Timestamp* response_timestamp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(response_timestamp_);
  }
  response_timestamp_ = response_timestamp;
  if (response_timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rocos.ResponseHeader.response_timestamp)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ResponseHeader::release_response_timestamp() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = response_timestamp_;
  response_timestamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ResponseHeader::unsafe_arena_release_response_timestamp() {
  // @@protoc_insertion_point(field_release:rocos.ResponseHeader.response_timestamp)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = response_timestamp_;
  response_timestamp_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ResponseHeader::_internal_mutable_response_timestamp() {
  
  if (response_timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    response_timestamp_ = p;
  }
  return response_timestamp_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ResponseHeader::mutable_response_timestamp() {
  PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_response_timestamp();
  // @@protoc_insertion_point(field_mutable:rocos.ResponseHeader.response_timestamp)
  return _msg;
}
inline void ResponseHeader::set_allocated_response_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* response_timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(response_timestamp_);
  }
  if (response_timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(response_timestamp));
    if (message_arena != submessage_arena) {
      response_timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response_timestamp, submessage_arena);
    }
    
  } else {
    
  }
  response_timestamp_ = response_timestamp;
  // @@protoc_insertion_point(field_set_allocated:rocos.ResponseHeader.response_timestamp)
}

// .rocos.CommonError error = 4;
inline bool ResponseHeader::_internal_has_error() const {
  return this != internal_default_instance() && error_ != nullptr;
}
inline bool ResponseHeader::has_error() const {
  return _internal_has_error();
}
inline void ResponseHeader::clear_error() {
  if (GetArenaForAllocation() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
}
inline const ::rocos::CommonError& ResponseHeader::_internal_error() const {
  const ::rocos::CommonError* p = error_;
  return p != nullptr ? *p : reinterpret_cast<const ::rocos::CommonError&>(
      ::rocos::_CommonError_default_instance_);
}
inline const ::rocos::CommonError& ResponseHeader::error() const {
  // @@protoc_insertion_point(field_get:rocos.ResponseHeader.error)
  return _internal_error();
}
inline void ResponseHeader::unsafe_arena_set_allocated_error(
    ::rocos::CommonError* error) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_);
  }
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rocos.ResponseHeader.error)
}
inline ::rocos::CommonError* ResponseHeader::release_error() {
  
  ::rocos::CommonError* temp = error_;
  error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rocos::CommonError* ResponseHeader::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:rocos.ResponseHeader.error)
  
  ::rocos::CommonError* temp = error_;
  error_ = nullptr;
  return temp;
}
inline ::rocos::CommonError* ResponseHeader::_internal_mutable_error() {
  
  if (error_ == nullptr) {
    auto* p = CreateMaybeMessage<::rocos::CommonError>(GetArenaForAllocation());
    error_ = p;
  }
  return error_;
}
inline ::rocos::CommonError* ResponseHeader::mutable_error() {
  ::rocos::CommonError* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:rocos.ResponseHeader.error)
  return _msg;
}
inline void ResponseHeader::set_allocated_error(::rocos::CommonError* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete error_;
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::rocos::CommonError>::GetOwningArena(error);
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:rocos.ResponseHeader.error)
}

// .google.protobuf.Any request = 5;
inline bool ResponseHeader::_internal_has_request() const {
  return this != internal_default_instance() && request_ != nullptr;
}
inline bool ResponseHeader::has_request() const {
  return _internal_has_request();
}
inline const PROTOBUF_NAMESPACE_ID::Any& ResponseHeader::_internal_request() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = request_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any&>(
      PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& ResponseHeader::request() const {
  // @@protoc_insertion_point(field_get:rocos.ResponseHeader.request)
  return _internal_request();
}
inline void ResponseHeader::unsafe_arena_set_allocated_request(
    PROTOBUF_NAMESPACE_ID::Any* request) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(request_);
  }
  request_ = request;
  if (request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rocos.ResponseHeader.request)
}
inline PROTOBUF_NAMESPACE_ID::Any* ResponseHeader::release_request() {
  
  PROTOBUF_NAMESPACE_ID::Any* temp = request_;
  request_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* ResponseHeader::unsafe_arena_release_request() {
  // @@protoc_insertion_point(field_release:rocos.ResponseHeader.request)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = request_;
  request_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* ResponseHeader::_internal_mutable_request() {
  
  if (request_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    request_ = p;
  }
  return request_;
}
inline PROTOBUF_NAMESPACE_ID::Any* ResponseHeader::mutable_request() {
  PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_request();
  // @@protoc_insertion_point(field_mutable:rocos.ResponseHeader.request)
  return _msg;
}
inline void ResponseHeader::set_allocated_request(PROTOBUF_NAMESPACE_ID::Any* request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(request_);
  }
  if (request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(request));
    if (message_arena != submessage_arena) {
      request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request, submessage_arena);
    }
    
  } else {
    
  }
  request_ = request;
  // @@protoc_insertion_point(field_set_allocated:rocos.ResponseHeader.request)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace rocos

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::rocos::CommonError_Code> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rocos::CommonError_Code>() {
  return ::rocos::CommonError_Code_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_header_2eproto
