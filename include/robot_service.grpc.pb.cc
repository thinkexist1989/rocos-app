// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: robot_service.proto

#include "robot_service.pb.h"
#include "robot_service.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace rocos {

static const char* RobotService_method_names[] = {
  "/rocos.RobotService/ReadRobotInfo",
  "/rocos.RobotService/ReadRobotState",
  "/rocos.RobotService/WriteRobotCommmand",
};

std::unique_ptr< RobotService::Stub> RobotService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< RobotService::Stub> stub(new RobotService::Stub(channel, options));
  return stub;
}

RobotService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_ReadRobotInfo_(RobotService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReadRobotState_(RobotService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_WriteRobotCommmand_(RobotService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status RobotService::Stub::ReadRobotInfo(::grpc::ClientContext* context, const ::rocos::RobotInfoRequest& request, ::rocos::RobotInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::rocos::RobotInfoRequest, ::rocos::RobotInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ReadRobotInfo_, context, request, response);
}

void RobotService::Stub::async::ReadRobotInfo(::grpc::ClientContext* context, const ::rocos::RobotInfoRequest* request, ::rocos::RobotInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::rocos::RobotInfoRequest, ::rocos::RobotInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReadRobotInfo_, context, request, response, std::move(f));
}

void RobotService::Stub::async::ReadRobotInfo(::grpc::ClientContext* context, const ::rocos::RobotInfoRequest* request, ::rocos::RobotInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReadRobotInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rocos::RobotInfoResponse>* RobotService::Stub::PrepareAsyncReadRobotInfoRaw(::grpc::ClientContext* context, const ::rocos::RobotInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::rocos::RobotInfoResponse, ::rocos::RobotInfoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ReadRobotInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::rocos::RobotInfoResponse>* RobotService::Stub::AsyncReadRobotInfoRaw(::grpc::ClientContext* context, const ::rocos::RobotInfoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReadRobotInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RobotService::Stub::ReadRobotState(::grpc::ClientContext* context, const ::rocos::RobotStateRequest& request, ::rocos::RobotStateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::rocos::RobotStateRequest, ::rocos::RobotStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ReadRobotState_, context, request, response);
}

void RobotService::Stub::async::ReadRobotState(::grpc::ClientContext* context, const ::rocos::RobotStateRequest* request, ::rocos::RobotStateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::rocos::RobotStateRequest, ::rocos::RobotStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReadRobotState_, context, request, response, std::move(f));
}

void RobotService::Stub::async::ReadRobotState(::grpc::ClientContext* context, const ::rocos::RobotStateRequest* request, ::rocos::RobotStateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReadRobotState_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rocos::RobotStateResponse>* RobotService::Stub::PrepareAsyncReadRobotStateRaw(::grpc::ClientContext* context, const ::rocos::RobotStateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::rocos::RobotStateResponse, ::rocos::RobotStateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ReadRobotState_, context, request);
}

::grpc::ClientAsyncResponseReader< ::rocos::RobotStateResponse>* RobotService::Stub::AsyncReadRobotStateRaw(::grpc::ClientContext* context, const ::rocos::RobotStateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReadRobotStateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RobotService::Stub::WriteRobotCommmand(::grpc::ClientContext* context, const ::rocos::RobotCommandRequest& request, ::rocos::RobotCommandResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::rocos::RobotCommandRequest, ::rocos::RobotCommandResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_WriteRobotCommmand_, context, request, response);
}

void RobotService::Stub::async::WriteRobotCommmand(::grpc::ClientContext* context, const ::rocos::RobotCommandRequest* request, ::rocos::RobotCommandResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::rocos::RobotCommandRequest, ::rocos::RobotCommandResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_WriteRobotCommmand_, context, request, response, std::move(f));
}

void RobotService::Stub::async::WriteRobotCommmand(::grpc::ClientContext* context, const ::rocos::RobotCommandRequest* request, ::rocos::RobotCommandResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_WriteRobotCommmand_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rocos::RobotCommandResponse>* RobotService::Stub::PrepareAsyncWriteRobotCommmandRaw(::grpc::ClientContext* context, const ::rocos::RobotCommandRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::rocos::RobotCommandResponse, ::rocos::RobotCommandRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_WriteRobotCommmand_, context, request);
}

::grpc::ClientAsyncResponseReader< ::rocos::RobotCommandResponse>* RobotService::Stub::AsyncWriteRobotCommmandRaw(::grpc::ClientContext* context, const ::rocos::RobotCommandRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncWriteRobotCommmandRaw(context, request, cq);
  result->StartCall();
  return result;
}

RobotService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RobotService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RobotService::Service, ::rocos::RobotInfoRequest, ::rocos::RobotInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RobotService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::rocos::RobotInfoRequest* req,
             ::rocos::RobotInfoResponse* resp) {
               return service->ReadRobotInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RobotService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RobotService::Service, ::rocos::RobotStateRequest, ::rocos::RobotStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RobotService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::rocos::RobotStateRequest* req,
             ::rocos::RobotStateResponse* resp) {
               return service->ReadRobotState(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RobotService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RobotService::Service, ::rocos::RobotCommandRequest, ::rocos::RobotCommandResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RobotService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::rocos::RobotCommandRequest* req,
             ::rocos::RobotCommandResponse* resp) {
               return service->WriteRobotCommmand(ctx, req, resp);
             }, this)));
}

RobotService::Service::~Service() {
}

::grpc::Status RobotService::Service::ReadRobotInfo(::grpc::ServerContext* context, const ::rocos::RobotInfoRequest* request, ::rocos::RobotInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RobotService::Service::ReadRobotState(::grpc::ServerContext* context, const ::rocos::RobotStateRequest* request, ::rocos::RobotStateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RobotService::Service::WriteRobotCommmand(::grpc::ServerContext* context, const ::rocos::RobotCommandRequest* request, ::rocos::RobotCommandResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace rocos

