// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: header.proto

#include "header.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace rocos {
constexpr RequestHeader::RequestHeader(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : client_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , request_timestamp_(nullptr)
  , disable_rpc_logging_(false){}
struct RequestHeaderDefaultTypeInternal {
  constexpr RequestHeaderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestHeaderDefaultTypeInternal() {}
  union {
    RequestHeader _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestHeaderDefaultTypeInternal _RequestHeader_default_instance_;
constexpr CommonError::CommonError(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , data_(nullptr)
  , code_(0)
{}
struct CommonErrorDefaultTypeInternal {
  constexpr CommonErrorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommonErrorDefaultTypeInternal() {}
  union {
    CommonError _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommonErrorDefaultTypeInternal _CommonError_default_instance_;
constexpr ResponseHeader::ResponseHeader(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : request_header_(nullptr)
  , request_received_timestamp_(nullptr)
  , response_timestamp_(nullptr)
  , error_(nullptr)
  , request_(nullptr){}
struct ResponseHeaderDefaultTypeInternal {
  constexpr ResponseHeaderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResponseHeaderDefaultTypeInternal() {}
  union {
    ResponseHeader _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResponseHeaderDefaultTypeInternal _ResponseHeader_default_instance_;
}  // namespace rocos
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_header_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_header_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_header_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_header_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rocos::RequestHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rocos::RequestHeader, request_timestamp_),
  PROTOBUF_FIELD_OFFSET(::rocos::RequestHeader, client_name_),
  PROTOBUF_FIELD_OFFSET(::rocos::RequestHeader, disable_rpc_logging_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rocos::CommonError, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rocos::CommonError, code_),
  PROTOBUF_FIELD_OFFSET(::rocos::CommonError, message_),
  PROTOBUF_FIELD_OFFSET(::rocos::CommonError, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rocos::ResponseHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rocos::ResponseHeader, request_header_),
  PROTOBUF_FIELD_OFFSET(::rocos::ResponseHeader, request_received_timestamp_),
  PROTOBUF_FIELD_OFFSET(::rocos::ResponseHeader, response_timestamp_),
  PROTOBUF_FIELD_OFFSET(::rocos::ResponseHeader, error_),
  PROTOBUF_FIELD_OFFSET(::rocos::ResponseHeader, request_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::rocos::RequestHeader)},
  { 8, -1, sizeof(::rocos::CommonError)},
  { 16, -1, sizeof(::rocos::ResponseHeader)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rocos::_RequestHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rocos::_CommonError_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rocos::_ResponseHeader_default_instance_),
};

const char descriptor_table_protodef_header_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014header.proto\022\005rocos\032\031google/protobuf/a"
  "ny.proto\032\037google/protobuf/timestamp.prot"
  "o\"x\n\rRequestHeader\0225\n\021request_timestamp\030"
  "\001 \001(\0132\032.google.protobuf.Timestamp\022\023\n\013cli"
  "ent_name\030\002 \001(\t\022\033\n\023disable_rpc_logging\030\003 "
  "\001(\010\"\316\001\n\013CommonError\022%\n\004code\030\001 \001(\0162\027.roco"
  "s.CommonError.Code\022\017\n\007message\030\002 \001(\t\022\"\n\004d"
  "ata\030\003 \001(\0132\024.google.protobuf.Any\"c\n\004Code\022"
  "\024\n\020CODE_UNSPECIFIED\020\000\022\013\n\007CODE_OK\020\001\022\036\n\032CO"
  "DE_INTERNAL_SERVER_ERROR\020\002\022\030\n\024CODE_INVAL"
  "ID_REQUEST\020\003\"\200\002\n\016ResponseHeader\022,\n\016reque"
  "st_header\030\001 \001(\0132\024.rocos.RequestHeader\022>\n"
  "\032request_received_timestamp\030\002 \001(\0132\032.goog"
  "le.protobuf.Timestamp\0226\n\022response_timest"
  "amp\030\003 \001(\0132\032.google.protobuf.Timestamp\022!\n"
  "\005error\030\004 \001(\0132\022.rocos.CommonError\022%\n\007requ"
  "est\030\005 \001(\0132\024.google.protobuf.AnyB\024B\013Heade"
  "rProtoZ\005rocosb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_header_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_header_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_header_2eproto = {
  false, false, 701, descriptor_table_protodef_header_2eproto, "header.proto", 
  &descriptor_table_header_2eproto_once, descriptor_table_header_2eproto_deps, 2, 3,
  schemas, file_default_instances, TableStruct_header_2eproto::offsets,
  file_level_metadata_header_2eproto, file_level_enum_descriptors_header_2eproto, file_level_service_descriptors_header_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_header_2eproto_getter() {
  return &descriptor_table_header_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_header_2eproto(&descriptor_table_header_2eproto);
namespace rocos {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CommonError_Code_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_header_2eproto);
  return file_level_enum_descriptors_header_2eproto[0];
}
bool CommonError_Code_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CommonError_Code CommonError::CODE_UNSPECIFIED;
constexpr CommonError_Code CommonError::CODE_OK;
constexpr CommonError_Code CommonError::CODE_INTERNAL_SERVER_ERROR;
constexpr CommonError_Code CommonError::CODE_INVALID_REQUEST;
constexpr CommonError_Code CommonError::Code_MIN;
constexpr CommonError_Code CommonError::Code_MAX;
constexpr int CommonError::Code_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class RequestHeader::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& request_timestamp(const RequestHeader* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
RequestHeader::_Internal::request_timestamp(const RequestHeader* msg) {
  return *msg->request_timestamp_;
}
void RequestHeader::clear_request_timestamp() {
  if (GetArenaForAllocation() == nullptr && request_timestamp_ != nullptr) {
    delete request_timestamp_;
  }
  request_timestamp_ = nullptr;
}
RequestHeader::RequestHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rocos.RequestHeader)
}
RequestHeader::RequestHeader(const RequestHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  client_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_client_name().empty()) {
    client_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_client_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_request_timestamp()) {
    request_timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.request_timestamp_);
  } else {
    request_timestamp_ = nullptr;
  }
  disable_rpc_logging_ = from.disable_rpc_logging_;
  // @@protoc_insertion_point(copy_constructor:rocos.RequestHeader)
}

inline void RequestHeader::SharedCtor() {
client_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&request_timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&disable_rpc_logging_) -
    reinterpret_cast<char*>(&request_timestamp_)) + sizeof(disable_rpc_logging_));
}

RequestHeader::~RequestHeader() {
  // @@protoc_insertion_point(destructor:rocos.RequestHeader)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RequestHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  client_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete request_timestamp_;
}

void RequestHeader::ArenaDtor(void* object) {
  RequestHeader* _this = reinterpret_cast< RequestHeader* >(object);
  (void)_this;
}
void RequestHeader::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RequestHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:rocos.RequestHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  client_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && request_timestamp_ != nullptr) {
    delete request_timestamp_;
  }
  request_timestamp_ = nullptr;
  disable_rpc_logging_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp request_timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_request_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string client_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_client_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rocos.RequestHeader.client_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool disable_rpc_logging = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          disable_rpc_logging_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestHeader::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocos.RequestHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp request_timestamp = 1;
  if (this->_internal_has_request_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::request_timestamp(this), target, stream);
  }

  // string client_name = 2;
  if (!this->_internal_client_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_name().data(), static_cast<int>(this->_internal_client_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rocos.RequestHeader.client_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_client_name(), target);
  }

  // bool disable_rpc_logging = 3;
  if (this->_internal_disable_rpc_logging() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_disable_rpc_logging(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocos.RequestHeader)
  return target;
}

size_t RequestHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocos.RequestHeader)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string client_name = 2;
  if (!this->_internal_client_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_name());
  }

  // .google.protobuf.Timestamp request_timestamp = 1;
  if (this->_internal_has_request_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *request_timestamp_);
  }

  // bool disable_rpc_logging = 3;
  if (this->_internal_disable_rpc_logging() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestHeader::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RequestHeader::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestHeader::GetClassData() const { return &_class_data_; }

void RequestHeader::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<RequestHeader *>(to)->MergeFrom(
      static_cast<const RequestHeader &>(from));
}


void RequestHeader::MergeFrom(const RequestHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rocos.RequestHeader)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_client_name().empty()) {
    _internal_set_client_name(from._internal_client_name());
  }
  if (from._internal_has_request_timestamp()) {
    _internal_mutable_request_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_request_timestamp());
  }
  if (from._internal_disable_rpc_logging() != 0) {
    _internal_set_disable_rpc_logging(from._internal_disable_rpc_logging());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestHeader::CopyFrom(const RequestHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocos.RequestHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestHeader::IsInitialized() const {
  return true;
}

void RequestHeader::InternalSwap(RequestHeader* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &client_name_, GetArenaForAllocation(),
      &other->client_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestHeader, disable_rpc_logging_)
      + sizeof(RequestHeader::disable_rpc_logging_)
      - PROTOBUF_FIELD_OFFSET(RequestHeader, request_timestamp_)>(
          reinterpret_cast<char*>(&request_timestamp_),
          reinterpret_cast<char*>(&other->request_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestHeader::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_header_2eproto_getter, &descriptor_table_header_2eproto_once,
      file_level_metadata_header_2eproto[0]);
}

// ===================================================================

class CommonError::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Any& data(const CommonError* msg);
};

const PROTOBUF_NAMESPACE_ID::Any&
CommonError::_Internal::data(const CommonError* msg) {
  return *msg->data_;
}
void CommonError::clear_data() {
  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
CommonError::CommonError(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rocos.CommonError)
}
CommonError::CommonError(const CommonError& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_data()) {
    data_ = new PROTOBUF_NAMESPACE_ID::Any(*from.data_);
  } else {
    data_ = nullptr;
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:rocos.CommonError)
}

inline void CommonError::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&data_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&data_)) + sizeof(code_));
}

CommonError::~CommonError() {
  // @@protoc_insertion_point(destructor:rocos.CommonError)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommonError::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete data_;
}

void CommonError::ArenaDtor(void* object) {
  CommonError* _this = reinterpret_cast< CommonError* >(object);
  (void)_this;
}
void CommonError::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommonError::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommonError::Clear() {
// @@protoc_insertion_point(message_clear_start:rocos.CommonError)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommonError::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .rocos.CommonError.Code code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_code(static_cast<::rocos::CommonError_Code>(val));
        } else goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rocos.CommonError.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Any data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommonError::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocos.CommonError)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rocos.CommonError.Code code = 1;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_code(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rocos.CommonError.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // .google.protobuf.Any data = 3;
  if (this->_internal_has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocos.CommonError)
  return target;
}

size_t CommonError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocos.CommonError)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .google.protobuf.Any data = 3;
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // .rocos.CommonError.Code code = 1;
  if (this->_internal_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommonError::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommonError::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommonError::GetClassData() const { return &_class_data_; }

void CommonError::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommonError *>(to)->MergeFrom(
      static_cast<const CommonError &>(from));
}


void CommonError::MergeFrom(const CommonError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rocos.CommonError)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _internal_set_message(from._internal_message());
  }
  if (from._internal_has_data()) {
    _internal_mutable_data()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_data());
  }
  if (from._internal_code() != 0) {
    _internal_set_code(from._internal_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommonError::CopyFrom(const CommonError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocos.CommonError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonError::IsInitialized() const {
  return true;
}

void CommonError::InternalSwap(CommonError* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_, GetArenaForAllocation(),
      &other->message_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommonError, code_)
      + sizeof(CommonError::code_)
      - PROTOBUF_FIELD_OFFSET(CommonError, data_)>(
          reinterpret_cast<char*>(&data_),
          reinterpret_cast<char*>(&other->data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommonError::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_header_2eproto_getter, &descriptor_table_header_2eproto_once,
      file_level_metadata_header_2eproto[1]);
}

// ===================================================================

class ResponseHeader::_Internal {
 public:
  static const ::rocos::RequestHeader& request_header(const ResponseHeader* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& request_received_timestamp(const ResponseHeader* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& response_timestamp(const ResponseHeader* msg);
  static const ::rocos::CommonError& error(const ResponseHeader* msg);
  static const PROTOBUF_NAMESPACE_ID::Any& request(const ResponseHeader* msg);
};

const ::rocos::RequestHeader&
ResponseHeader::_Internal::request_header(const ResponseHeader* msg) {
  return *msg->request_header_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
ResponseHeader::_Internal::request_received_timestamp(const ResponseHeader* msg) {
  return *msg->request_received_timestamp_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
ResponseHeader::_Internal::response_timestamp(const ResponseHeader* msg) {
  return *msg->response_timestamp_;
}
const ::rocos::CommonError&
ResponseHeader::_Internal::error(const ResponseHeader* msg) {
  return *msg->error_;
}
const PROTOBUF_NAMESPACE_ID::Any&
ResponseHeader::_Internal::request(const ResponseHeader* msg) {
  return *msg->request_;
}
void ResponseHeader::clear_request_received_timestamp() {
  if (GetArenaForAllocation() == nullptr && request_received_timestamp_ != nullptr) {
    delete request_received_timestamp_;
  }
  request_received_timestamp_ = nullptr;
}
void ResponseHeader::clear_response_timestamp() {
  if (GetArenaForAllocation() == nullptr && response_timestamp_ != nullptr) {
    delete response_timestamp_;
  }
  response_timestamp_ = nullptr;
}
void ResponseHeader::clear_request() {
  if (GetArenaForAllocation() == nullptr && request_ != nullptr) {
    delete request_;
  }
  request_ = nullptr;
}
ResponseHeader::ResponseHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rocos.ResponseHeader)
}
ResponseHeader::ResponseHeader(const ResponseHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_request_header()) {
    request_header_ = new ::rocos::RequestHeader(*from.request_header_);
  } else {
    request_header_ = nullptr;
  }
  if (from._internal_has_request_received_timestamp()) {
    request_received_timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.request_received_timestamp_);
  } else {
    request_received_timestamp_ = nullptr;
  }
  if (from._internal_has_response_timestamp()) {
    response_timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.response_timestamp_);
  } else {
    response_timestamp_ = nullptr;
  }
  if (from._internal_has_error()) {
    error_ = new ::rocos::CommonError(*from.error_);
  } else {
    error_ = nullptr;
  }
  if (from._internal_has_request()) {
    request_ = new PROTOBUF_NAMESPACE_ID::Any(*from.request_);
  } else {
    request_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:rocos.ResponseHeader)
}

inline void ResponseHeader::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&request_header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&request_) -
    reinterpret_cast<char*>(&request_header_)) + sizeof(request_));
}

ResponseHeader::~ResponseHeader() {
  // @@protoc_insertion_point(destructor:rocos.ResponseHeader)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResponseHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete request_header_;
  if (this != internal_default_instance()) delete request_received_timestamp_;
  if (this != internal_default_instance()) delete response_timestamp_;
  if (this != internal_default_instance()) delete error_;
  if (this != internal_default_instance()) delete request_;
}

void ResponseHeader::ArenaDtor(void* object) {
  ResponseHeader* _this = reinterpret_cast< ResponseHeader* >(object);
  (void)_this;
}
void ResponseHeader::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResponseHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResponseHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:rocos.ResponseHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && request_header_ != nullptr) {
    delete request_header_;
  }
  request_header_ = nullptr;
  if (GetArenaForAllocation() == nullptr && request_received_timestamp_ != nullptr) {
    delete request_received_timestamp_;
  }
  request_received_timestamp_ = nullptr;
  if (GetArenaForAllocation() == nullptr && response_timestamp_ != nullptr) {
    delete response_timestamp_;
  }
  response_timestamp_ = nullptr;
  if (GetArenaForAllocation() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
  if (GetArenaForAllocation() == nullptr && request_ != nullptr) {
    delete request_;
  }
  request_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .rocos.RequestHeader request_header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_request_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp request_received_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_request_received_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp response_timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_response_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .rocos.CommonError error = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Any request = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResponseHeader::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocos.ResponseHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rocos.RequestHeader request_header = 1;
  if (this->_internal_has_request_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::request_header(this), target, stream);
  }

  // .google.protobuf.Timestamp request_received_timestamp = 2;
  if (this->_internal_has_request_received_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::request_received_timestamp(this), target, stream);
  }

  // .google.protobuf.Timestamp response_timestamp = 3;
  if (this->_internal_has_response_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::response_timestamp(this), target, stream);
  }

  // .rocos.CommonError error = 4;
  if (this->_internal_has_error()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::error(this), target, stream);
  }

  // .google.protobuf.Any request = 5;
  if (this->_internal_has_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::request(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocos.ResponseHeader)
  return target;
}

size_t ResponseHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocos.ResponseHeader)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .rocos.RequestHeader request_header = 1;
  if (this->_internal_has_request_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *request_header_);
  }

  // .google.protobuf.Timestamp request_received_timestamp = 2;
  if (this->_internal_has_request_received_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *request_received_timestamp_);
  }

  // .google.protobuf.Timestamp response_timestamp = 3;
  if (this->_internal_has_response_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *response_timestamp_);
  }

  // .rocos.CommonError error = 4;
  if (this->_internal_has_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *error_);
  }

  // .google.protobuf.Any request = 5;
  if (this->_internal_has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *request_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseHeader::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResponseHeader::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseHeader::GetClassData() const { return &_class_data_; }

void ResponseHeader::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ResponseHeader *>(to)->MergeFrom(
      static_cast<const ResponseHeader &>(from));
}


void ResponseHeader::MergeFrom(const ResponseHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rocos.ResponseHeader)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_request_header()) {
    _internal_mutable_request_header()->::rocos::RequestHeader::MergeFrom(from._internal_request_header());
  }
  if (from._internal_has_request_received_timestamp()) {
    _internal_mutable_request_received_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_request_received_timestamp());
  }
  if (from._internal_has_response_timestamp()) {
    _internal_mutable_response_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_response_timestamp());
  }
  if (from._internal_has_error()) {
    _internal_mutable_error()->::rocos::CommonError::MergeFrom(from._internal_error());
  }
  if (from._internal_has_request()) {
    _internal_mutable_request()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_request());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResponseHeader::CopyFrom(const ResponseHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocos.ResponseHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseHeader::IsInitialized() const {
  return true;
}

void ResponseHeader::InternalSwap(ResponseHeader* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResponseHeader, request_)
      + sizeof(ResponseHeader::request_)
      - PROTOBUF_FIELD_OFFSET(ResponseHeader, request_header_)>(
          reinterpret_cast<char*>(&request_header_),
          reinterpret_cast<char*>(&other->request_header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseHeader::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_header_2eproto_getter, &descriptor_table_header_2eproto_once,
      file_level_metadata_header_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace rocos
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::rocos::RequestHeader* Arena::CreateMaybeMessage< ::rocos::RequestHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rocos::RequestHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::rocos::CommonError* Arena::CreateMaybeMessage< ::rocos::CommonError >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rocos::CommonError >(arena);
}
template<> PROTOBUF_NOINLINE ::rocos::ResponseHeader* Arena::CreateMaybeMessage< ::rocos::ResponseHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rocos::ResponseHeader >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
