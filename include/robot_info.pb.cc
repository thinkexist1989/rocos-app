// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: robot_info.proto

#include "robot_info.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace rocos {
constexpr JointInfo::JointInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_unit_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , cnt_per_unit_(0)
  , torque_per_unit_(0)
  , ratio_(0)
  , pos_zero_offset_(0){}
struct JointInfoDefaultTypeInternal {
  constexpr JointInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~JointInfoDefaultTypeInternal() {}
  union {
    JointInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT JointInfoDefaultTypeInternal _JointInfo_default_instance_;
constexpr RobotInfo::RobotInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : joint_infos_(){}
struct RobotInfoDefaultTypeInternal {
  constexpr RobotInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RobotInfoDefaultTypeInternal() {}
  union {
    RobotInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RobotInfoDefaultTypeInternal _RobotInfo_default_instance_;
constexpr RobotInfoRequest::RobotInfoRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_(nullptr){}
struct RobotInfoRequestDefaultTypeInternal {
  constexpr RobotInfoRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RobotInfoRequestDefaultTypeInternal() {}
  union {
    RobotInfoRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RobotInfoRequestDefaultTypeInternal _RobotInfoRequest_default_instance_;
constexpr RobotInfoResponse::RobotInfoResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_(nullptr)
  , robot_info_(nullptr){}
struct RobotInfoResponseDefaultTypeInternal {
  constexpr RobotInfoResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RobotInfoResponseDefaultTypeInternal() {}
  union {
    RobotInfoResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RobotInfoResponseDefaultTypeInternal _RobotInfoResponse_default_instance_;
}  // namespace rocos
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_robot_5finfo_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_robot_5finfo_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_robot_5finfo_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_robot_5finfo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rocos::JointInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rocos::JointInfo, name_),
  PROTOBUF_FIELD_OFFSET(::rocos::JointInfo, cnt_per_unit_),
  PROTOBUF_FIELD_OFFSET(::rocos::JointInfo, torque_per_unit_),
  PROTOBUF_FIELD_OFFSET(::rocos::JointInfo, ratio_),
  PROTOBUF_FIELD_OFFSET(::rocos::JointInfo, pos_zero_offset_),
  PROTOBUF_FIELD_OFFSET(::rocos::JointInfo, user_unit_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rocos::RobotInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rocos::RobotInfo, joint_infos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rocos::RobotInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rocos::RobotInfoRequest, header_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rocos::RobotInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rocos::RobotInfoResponse, header_),
  PROTOBUF_FIELD_OFFSET(::rocos::RobotInfoResponse, robot_info_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::rocos::JointInfo)},
  { 11, -1, sizeof(::rocos::RobotInfo)},
  { 17, -1, sizeof(::rocos::RobotInfoRequest)},
  { 23, -1, sizeof(::rocos::RobotInfoResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rocos::_JointInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rocos::_RobotInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rocos::_RobotInfoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rocos::_RobotInfoResponse_default_instance_),
};

const char descriptor_table_protodef_robot_5finfo_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020robot_info.proto\022\005rocos\032\014header.proto\032"
  "\016geometry.proto\032\036google/protobuf/wrapper"
  "s.proto\032\037google/protobuf/timestamp.proto"
  "\"\210\001\n\tJointInfo\022\014\n\004name\030\001 \001(\t\022\024\n\014cnt_per_"
  "unit\030\002 \001(\001\022\027\n\017torque_per_unit\030\003 \001(\001\022\r\n\005r"
  "atio\030\004 \001(\001\022\027\n\017pos_zero_offset\030\005 \001(\005\022\026\n\016u"
  "ser_unit_name\030\006 \001(\t\"2\n\tRobotInfo\022%\n\013join"
  "t_infos\030\001 \003(\0132\020.rocos.JointInfo\"8\n\020Robot"
  "InfoRequest\022$\n\006header\030\001 \001(\0132\024.rocos.Requ"
  "estHeader\"`\n\021RobotInfoResponse\022%\n\006header"
  "\030\001 \001(\0132\025.rocos.ResponseHeader\022$\n\nrobot_i"
  "nfo\030\002 \001(\0132\020.rocos.RobotInfoB\020B\016RobotInfo"
  "Protob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_robot_5finfo_2eproto_deps[4] = {
  &::descriptor_table_geometry_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
  &::descriptor_table_header_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_robot_5finfo_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_robot_5finfo_2eproto = {
  false, false, 493, descriptor_table_protodef_robot_5finfo_2eproto, "robot_info.proto", 
  &descriptor_table_robot_5finfo_2eproto_once, descriptor_table_robot_5finfo_2eproto_deps, 4, 4,
  schemas, file_default_instances, TableStruct_robot_5finfo_2eproto::offsets,
  file_level_metadata_robot_5finfo_2eproto, file_level_enum_descriptors_robot_5finfo_2eproto, file_level_service_descriptors_robot_5finfo_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_robot_5finfo_2eproto_getter() {
  return &descriptor_table_robot_5finfo_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_robot_5finfo_2eproto(&descriptor_table_robot_5finfo_2eproto);
namespace rocos {

// ===================================================================

class JointInfo::_Internal {
 public:
};

JointInfo::JointInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rocos.JointInfo)
}
JointInfo::JointInfo(const JointInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  user_unit_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_unit_name().empty()) {
    user_unit_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_unit_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&cnt_per_unit_, &from.cnt_per_unit_,
    static_cast<size_t>(reinterpret_cast<char*>(&pos_zero_offset_) -
    reinterpret_cast<char*>(&cnt_per_unit_)) + sizeof(pos_zero_offset_));
  // @@protoc_insertion_point(copy_constructor:rocos.JointInfo)
}

inline void JointInfo::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
user_unit_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&cnt_per_unit_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pos_zero_offset_) -
    reinterpret_cast<char*>(&cnt_per_unit_)) + sizeof(pos_zero_offset_));
}

JointInfo::~JointInfo() {
  // @@protoc_insertion_point(destructor:rocos.JointInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void JointInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_unit_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void JointInfo::ArenaDtor(void* object) {
  JointInfo* _this = reinterpret_cast< JointInfo* >(object);
  (void)_this;
}
void JointInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JointInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void JointInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:rocos.JointInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  user_unit_name_.ClearToEmpty();
  ::memset(&cnt_per_unit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pos_zero_offset_) -
      reinterpret_cast<char*>(&cnt_per_unit_)) + sizeof(pos_zero_offset_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JointInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rocos.JointInfo.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double cnt_per_unit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          cnt_per_unit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double torque_per_unit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          torque_per_unit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double ratio = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 pos_zero_offset = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          pos_zero_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_unit_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_user_unit_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rocos.JointInfo.user_unit_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JointInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocos.JointInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rocos.JointInfo.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // double cnt_per_unit = 2;
  if (!(this->_internal_cnt_per_unit() <= 0 && this->_internal_cnt_per_unit() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_cnt_per_unit(), target);
  }

  // double torque_per_unit = 3;
  if (!(this->_internal_torque_per_unit() <= 0 && this->_internal_torque_per_unit() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_torque_per_unit(), target);
  }

  // double ratio = 4;
  if (!(this->_internal_ratio() <= 0 && this->_internal_ratio() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_ratio(), target);
  }

  // int32 pos_zero_offset = 5;
  if (this->_internal_pos_zero_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_pos_zero_offset(), target);
  }

  // string user_unit_name = 6;
  if (!this->_internal_user_unit_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_unit_name().data(), static_cast<int>(this->_internal_user_unit_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rocos.JointInfo.user_unit_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_user_unit_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocos.JointInfo)
  return target;
}

size_t JointInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocos.JointInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string user_unit_name = 6;
  if (!this->_internal_user_unit_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_unit_name());
  }

  // double cnt_per_unit = 2;
  if (!(this->_internal_cnt_per_unit() <= 0 && this->_internal_cnt_per_unit() >= 0)) {
    total_size += 1 + 8;
  }

  // double torque_per_unit = 3;
  if (!(this->_internal_torque_per_unit() <= 0 && this->_internal_torque_per_unit() >= 0)) {
    total_size += 1 + 8;
  }

  // double ratio = 4;
  if (!(this->_internal_ratio() <= 0 && this->_internal_ratio() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 pos_zero_offset = 5;
  if (this->_internal_pos_zero_offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pos_zero_offset());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData JointInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    JointInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*JointInfo::GetClassData() const { return &_class_data_; }

void JointInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<JointInfo *>(to)->MergeFrom(
      static_cast<const JointInfo &>(from));
}


void JointInfo::MergeFrom(const JointInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rocos.JointInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_user_unit_name().empty()) {
    _internal_set_user_unit_name(from._internal_user_unit_name());
  }
  if (!(from._internal_cnt_per_unit() <= 0 && from._internal_cnt_per_unit() >= 0)) {
    _internal_set_cnt_per_unit(from._internal_cnt_per_unit());
  }
  if (!(from._internal_torque_per_unit() <= 0 && from._internal_torque_per_unit() >= 0)) {
    _internal_set_torque_per_unit(from._internal_torque_per_unit());
  }
  if (!(from._internal_ratio() <= 0 && from._internal_ratio() >= 0)) {
    _internal_set_ratio(from._internal_ratio());
  }
  if (from._internal_pos_zero_offset() != 0) {
    _internal_set_pos_zero_offset(from._internal_pos_zero_offset());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void JointInfo::CopyFrom(const JointInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocos.JointInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JointInfo::IsInitialized() const {
  return true;
}

void JointInfo::InternalSwap(JointInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &user_unit_name_, GetArenaForAllocation(),
      &other->user_unit_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(JointInfo, pos_zero_offset_)
      + sizeof(JointInfo::pos_zero_offset_)
      - PROTOBUF_FIELD_OFFSET(JointInfo, cnt_per_unit_)>(
          reinterpret_cast<char*>(&cnt_per_unit_),
          reinterpret_cast<char*>(&other->cnt_per_unit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata JointInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_robot_5finfo_2eproto_getter, &descriptor_table_robot_5finfo_2eproto_once,
      file_level_metadata_robot_5finfo_2eproto[0]);
}

// ===================================================================

class RobotInfo::_Internal {
 public:
};

RobotInfo::RobotInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  joint_infos_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rocos.RobotInfo)
}
RobotInfo::RobotInfo(const RobotInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      joint_infos_(from.joint_infos_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:rocos.RobotInfo)
}

inline void RobotInfo::SharedCtor() {
}

RobotInfo::~RobotInfo() {
  // @@protoc_insertion_point(destructor:rocos.RobotInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RobotInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RobotInfo::ArenaDtor(void* object) {
  RobotInfo* _this = reinterpret_cast< RobotInfo* >(object);
  (void)_this;
}
void RobotInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RobotInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RobotInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:rocos.RobotInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  joint_infos_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RobotInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .rocos.JointInfo joint_infos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_joint_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RobotInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocos.RobotInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .rocos.JointInfo joint_infos = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_joint_infos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_joint_infos(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocos.RobotInfo)
  return target;
}

size_t RobotInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocos.RobotInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .rocos.JointInfo joint_infos = 1;
  total_size += 1UL * this->_internal_joint_infos_size();
  for (const auto& msg : this->joint_infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RobotInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RobotInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RobotInfo::GetClassData() const { return &_class_data_; }

void RobotInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<RobotInfo *>(to)->MergeFrom(
      static_cast<const RobotInfo &>(from));
}


void RobotInfo::MergeFrom(const RobotInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rocos.RobotInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  joint_infos_.MergeFrom(from.joint_infos_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RobotInfo::CopyFrom(const RobotInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocos.RobotInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotInfo::IsInitialized() const {
  return true;
}

void RobotInfo::InternalSwap(RobotInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  joint_infos_.InternalSwap(&other->joint_infos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RobotInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_robot_5finfo_2eproto_getter, &descriptor_table_robot_5finfo_2eproto_once,
      file_level_metadata_robot_5finfo_2eproto[1]);
}

// ===================================================================

class RobotInfoRequest::_Internal {
 public:
  static const ::rocos::RequestHeader& header(const RobotInfoRequest* msg);
};

const ::rocos::RequestHeader&
RobotInfoRequest::_Internal::header(const RobotInfoRequest* msg) {
  return *msg->header_;
}
void RobotInfoRequest::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
RobotInfoRequest::RobotInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rocos.RobotInfoRequest)
}
RobotInfoRequest::RobotInfoRequest(const RobotInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::rocos::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:rocos.RobotInfoRequest)
}

inline void RobotInfoRequest::SharedCtor() {
header_ = nullptr;
}

RobotInfoRequest::~RobotInfoRequest() {
  // @@protoc_insertion_point(destructor:rocos.RobotInfoRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RobotInfoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void RobotInfoRequest::ArenaDtor(void* object) {
  RobotInfoRequest* _this = reinterpret_cast< RobotInfoRequest* >(object);
  (void)_this;
}
void RobotInfoRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RobotInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RobotInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:rocos.RobotInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RobotInfoRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .rocos.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RobotInfoRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocos.RobotInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rocos.RequestHeader header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocos.RobotInfoRequest)
  return target;
}

size_t RobotInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocos.RobotInfoRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .rocos.RequestHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RobotInfoRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RobotInfoRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RobotInfoRequest::GetClassData() const { return &_class_data_; }

void RobotInfoRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<RobotInfoRequest *>(to)->MergeFrom(
      static_cast<const RobotInfoRequest &>(from));
}


void RobotInfoRequest::MergeFrom(const RobotInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rocos.RobotInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _internal_mutable_header()->::rocos::RequestHeader::MergeFrom(from._internal_header());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RobotInfoRequest::CopyFrom(const RobotInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocos.RobotInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotInfoRequest::IsInitialized() const {
  return true;
}

void RobotInfoRequest::InternalSwap(RobotInfoRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RobotInfoRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_robot_5finfo_2eproto_getter, &descriptor_table_robot_5finfo_2eproto_once,
      file_level_metadata_robot_5finfo_2eproto[2]);
}

// ===================================================================

class RobotInfoResponse::_Internal {
 public:
  static const ::rocos::ResponseHeader& header(const RobotInfoResponse* msg);
  static const ::rocos::RobotInfo& robot_info(const RobotInfoResponse* msg);
};

const ::rocos::ResponseHeader&
RobotInfoResponse::_Internal::header(const RobotInfoResponse* msg) {
  return *msg->header_;
}
const ::rocos::RobotInfo&
RobotInfoResponse::_Internal::robot_info(const RobotInfoResponse* msg) {
  return *msg->robot_info_;
}
void RobotInfoResponse::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
RobotInfoResponse::RobotInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rocos.RobotInfoResponse)
}
RobotInfoResponse::RobotInfoResponse(const RobotInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::rocos::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_robot_info()) {
    robot_info_ = new ::rocos::RobotInfo(*from.robot_info_);
  } else {
    robot_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:rocos.RobotInfoResponse)
}

inline void RobotInfoResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&robot_info_) -
    reinterpret_cast<char*>(&header_)) + sizeof(robot_info_));
}

RobotInfoResponse::~RobotInfoResponse() {
  // @@protoc_insertion_point(destructor:rocos.RobotInfoResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RobotInfoResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete robot_info_;
}

void RobotInfoResponse::ArenaDtor(void* object) {
  RobotInfoResponse* _this = reinterpret_cast< RobotInfoResponse* >(object);
  (void)_this;
}
void RobotInfoResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RobotInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RobotInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:rocos.RobotInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArenaForAllocation() == nullptr && robot_info_ != nullptr) {
    delete robot_info_;
  }
  robot_info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RobotInfoResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .rocos.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .rocos.RobotInfo robot_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_robot_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RobotInfoResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocos.RobotInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rocos.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .rocos.RobotInfo robot_info = 2;
  if (this->_internal_has_robot_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::robot_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocos.RobotInfoResponse)
  return target;
}

size_t RobotInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocos.RobotInfoResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .rocos.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .rocos.RobotInfo robot_info = 2;
  if (this->_internal_has_robot_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *robot_info_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RobotInfoResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RobotInfoResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RobotInfoResponse::GetClassData() const { return &_class_data_; }

void RobotInfoResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<RobotInfoResponse *>(to)->MergeFrom(
      static_cast<const RobotInfoResponse &>(from));
}


void RobotInfoResponse::MergeFrom(const RobotInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rocos.RobotInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _internal_mutable_header()->::rocos::ResponseHeader::MergeFrom(from._internal_header());
  }
  if (from._internal_has_robot_info()) {
    _internal_mutable_robot_info()->::rocos::RobotInfo::MergeFrom(from._internal_robot_info());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RobotInfoResponse::CopyFrom(const RobotInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocos.RobotInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotInfoResponse::IsInitialized() const {
  return true;
}

void RobotInfoResponse::InternalSwap(RobotInfoResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RobotInfoResponse, robot_info_)
      + sizeof(RobotInfoResponse::robot_info_)
      - PROTOBUF_FIELD_OFFSET(RobotInfoResponse, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RobotInfoResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_robot_5finfo_2eproto_getter, &descriptor_table_robot_5finfo_2eproto_once,
      file_level_metadata_robot_5finfo_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace rocos
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::rocos::JointInfo* Arena::CreateMaybeMessage< ::rocos::JointInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rocos::JointInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::rocos::RobotInfo* Arena::CreateMaybeMessage< ::rocos::RobotInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rocos::RobotInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::rocos::RobotInfoRequest* Arena::CreateMaybeMessage< ::rocos::RobotInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rocos::RobotInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::rocos::RobotInfoResponse* Arena::CreateMaybeMessage< ::rocos::RobotInfoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rocos::RobotInfoResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
